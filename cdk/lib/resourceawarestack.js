"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_1 = require("@aws-cdk/cdk");
class ResourceBag {
    constructor(resources) {
        if (resources && resources.getResources()) {
            if (!this.resources)
                this.resources = new Map();
            resources.getResources().forEach((v, k) => {
                this.resources.set(k.toLowerCase(), v);
            });
        }
        ;
    }
    getResources() {
        return this.resources;
    }
    ;
    addResources(resources) {
        if (resources) {
            if (!this.resources)
                this.resources = new Map();
            for (let resourceName of resources.keys()) {
                let name = resourceName.toLowerCase();
                this.resources.set(name, resources.get(name));
            }
        }
    }
    ;
    addResource(key, resource) {
        if (resource) {
            if (!this.resources)
                this.resources = new Map();
            this.resources.set(key.toLowerCase(), resource);
        }
    }
    getResource(key) {
        return this.resources.get(key.toLowerCase());
    }
    getResourcesNames() {
        if (this.resources)
            return this.resources.keys();
        else
            return [];
    }
}
exports.ResourceBag = ResourceBag;
class ParameterAwareProps {
    constructor(props) {
        this.applicationName = (props && props.applicationName && props.applicationName.length > 0) ? props.applicationName : ParameterAwareProps.defaultApplicationName;
        this.suffix = (props && props.suffix && props.suffix.length > 0) ? props.suffix : '';
        if (props) {
            this.suffix = props.suffix;
            this.region = props.region;
            this.accountId = props.accountId;
            if (props.getParameters())
                props.getParameters().forEach((v, k) => this.addParameter(k, v));
        }
    }
    setApplicationName(appName) {
        if (appName && appName.length > 0)
            this.applicationName = appName;
    }
    getAppRefName() {
        let appName = this.applicationName ? this.applicationName : ParameterAwareProps.defaultApplicationName;
        if (this.suffix && this.suffix.length > 0)
            return appName + this.suffix;
        else
            return appName;
    }
    setSuffix(suffix) {
        if (suffix && suffix.length > 0)
            this.suffix = suffix;
    }
    getParameters() {
        return this.parameters;
    }
    ;
    addParameters(parameters) {
        if (parameters) {
            if (!this.parameters)
                this.parameters = new Map();
            for (let parameterName of parameters.keys()) {
                this.parameters.set(parameterName.toLowerCase(), parameters.get(parameterName));
            }
        }
    }
    ;
    addParameter(key, parameter) {
        if (parameter) {
            if (!this.parameters)
                this.parameters = new Map();
            this.parameters.set(key.toLowerCase(), parameter);
        }
    }
    getParameter(key) {
        if (!this.parameters)
            this.parameters = new Map();
        return this.parameters.get(key.toLowerCase());
    }
}
// handling/defining the application name.
// Default is NRTA - Near Real-Time Application
ParameterAwareProps.defaultApplicationName = 'NRTA';
exports.ParameterAwareProps = ParameterAwareProps;
class ResourceAwareStack extends cdk_1.Stack {
    constructor(parent, name, props) {
        super(parent, name, props);
        this.scope = parent;
        if (!this.properties)
            this.properties = new ParameterAwareProps(props);
        if (!this.properties.accountId)
            this.properties.accountId = this.accountId;
        if (!this.properties.region)
            this.properties.region = this.region;
    }
    getResources() {
        return this.resources;
    }
    ;
    addResources(resources) {
        if (resources) {
            if (!this.resources)
                this.resources = new Map();
            for (let resourceName of resources.keys()) {
                let name = resourceName.toLowerCase();
                this.resources.set(name, resources.get(name));
            }
        }
    }
    ;
    addResource(key, resource) {
        if (resource) {
            if (!this.resources)
                this.resources = new Map();
            this.resources.set(key.toLowerCase(), resource);
        }
    }
    getResource(key) {
        if (!this.resources)
            this.resources = new Map();
        return this.resources.get(key.toLowerCase());
    }
    getResourcesNames() {
        if (this.resources)
            return this.resources.keys();
        else
            return [];
    }
    getProperties() {
        return this.properties;
    }
}
exports.ResourceAwareStack = ResourceAwareStack;
class ResourceAwareConstruct extends cdk_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.properties = props;
    }
    getResources() {
        return this.resources;
    }
    ;
    addResources(resources) {
        if (resources) {
            if (!this.resources)
                this.resources = new Map();
            for (let resourceName of resources.keys()) {
                let name = resourceName.toLowerCase();
                this.resources.set(name, resources.get(name));
            }
        }
    }
    ;
    addResource(key, resource) {
        if (resource) {
            if (!this.resources)
                this.resources = new Map();
            this.resources.set(key.toLowerCase(), resource);
        }
    }
    getResource(key) {
        return this.resources.get(key.toLowerCase());
    }
    getResourcesNames() {
        if (this.resources)
            return this.resources.keys();
        else
            return [];
    }
    getProperties() {
        return this.properties;
    }
}
exports.ResourceAwareConstruct = ResourceAwareConstruct;
//# sourceMappingURL=data:application/json;base64,