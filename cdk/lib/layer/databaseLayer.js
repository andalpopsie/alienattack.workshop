"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resourceawarestack_1 = require("./../resourceawarestack");
const DynamoDB = require("@aws-cdk/aws-dynamodb");
class DatabaseLayer extends resourceawarestack_1.ResourceAwareConstruct {
    constructor(parent, name, props) {
        super(parent, name, props);
        this.tables = new Map();
        let sessionTable = new DynamoDB.Table(this, props.getAppRefName() + 'Session', {
            tableName: props.getAppRefName() + 'Session',
            partitionKey: {
                name: 'SessionId',
                type: DynamoDB.AttributeType.String
            },
            billingMode: DynamoDB.BillingMode.PayPerRequest
        });
        this.addResource('table.session', sessionTable);
        let sessionControlTable = new DynamoDB.Table(this, props.getAppRefName() + 'SessionControl', {
            tableName: props.getAppRefName() + 'SessionControl',
            partitionKey: {
                name: 'SessionId',
                type: DynamoDB.AttributeType.String
            },
            billingMode: DynamoDB.BillingMode.PayPerRequest
        });
        this.addResource('table.sessioncontrol', sessionControlTable);
        let sessionTopXTable = new DynamoDB.Table(this, props.getAppRefName() + 'SessionTopX', {
            tableName: props.getAppRefName() + 'SessionTopX',
            partitionKey: {
                name: 'SessionId',
                type: DynamoDB.AttributeType.String
            },
            billingMode: DynamoDB.BillingMode.PayPerRequest
        });
        this.addResource('table.sessiontopx', sessionTopXTable);
    }
}
exports.DatabaseLayer = DatabaseLayer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2VMYXllci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhdGFiYXNlTGF5ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxnRUFBc0Y7QUFFdEYsa0RBQW1EO0FBR25ELE1BQWEsYUFBYyxTQUFRLDJDQUFzQjtJQUdyRCxZQUFZLE1BQWlCLEVBQUUsSUFBWSxFQUFFLEtBQTJCO1FBQ3BFLEtBQUssQ0FBQyxNQUFNLEVBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBSDlCLFdBQU0sR0FBZ0MsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUs1QyxJQUFJLFlBQVksR0FBRyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsR0FBQyxTQUFTLEVBQUU7WUFDeEUsU0FBUyxFQUFHLEtBQUssQ0FBQyxhQUFhLEVBQUUsR0FBQyxTQUFTO1lBQzNDLFlBQVksRUFBRztnQkFDWCxJQUFJLEVBQUcsV0FBVztnQkFDbEIsSUFBSSxFQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTTthQUN2QztZQUNELFdBQVcsRUFBRyxRQUFRLENBQUMsV0FBVyxDQUFDLGFBQWE7U0FDbkQsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUMsWUFBWSxDQUFDLENBQUM7UUFFL0MsSUFBSSxtQkFBbUIsR0FBRyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsR0FBQyxnQkFBZ0IsRUFBRTtZQUN0RixTQUFTLEVBQUcsS0FBSyxDQUFDLGFBQWEsRUFBRSxHQUFDLGdCQUFnQjtZQUNsRCxZQUFZLEVBQUc7Z0JBQ1gsSUFBSSxFQUFHLFdBQVc7Z0JBQ2xCLElBQUksRUFBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU07YUFDdkM7WUFDRCxXQUFXLEVBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxhQUFhO1NBQ25ELENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxXQUFXLENBQUMsc0JBQXNCLEVBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUU3RCxJQUFJLGdCQUFnQixHQUFHLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxHQUFDLGFBQWEsRUFBRTtZQUNoRixTQUFTLEVBQUcsS0FBSyxDQUFDLGFBQWEsRUFBRSxHQUFDLGFBQWE7WUFDL0MsWUFBWSxFQUFHO2dCQUNYLElBQUksRUFBRyxXQUFXO2dCQUNsQixJQUFJLEVBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNO2FBQ3ZDO1lBQ0QsV0FBVyxFQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsYUFBYTtTQUNuRCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsV0FBVyxDQUFDLG1CQUFtQixFQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDM0QsQ0FBQztDQUNKO0FBcENELHNDQW9DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ0Bhd3MtY2RrL2Nkayc7XG5pbXBvcnQgeyBSZXNvdXJjZUF3YXJlQ29uc3RydWN0LCBJUGFyYW1ldGVyQXdhcmVQcm9wcyB9IGZyb20gJy4vLi4vcmVzb3VyY2Vhd2FyZXN0YWNrJ1xuXG5pbXBvcnQgRHluYW1vREIgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtZHluYW1vZGInKTtcblxuXG5leHBvcnQgY2xhc3MgRGF0YWJhc2VMYXllciBleHRlbmRzIFJlc291cmNlQXdhcmVDb25zdHJ1Y3Qge1xuICAgIHRhYmxlcyA6IE1hcDxzdHJpbmcsRHluYW1vREIuVGFibGU+ID0gbmV3IE1hcCgpO1xuXG4gICAgY29uc3RydWN0b3IocGFyZW50OiBDb25zdHJ1Y3QsIG5hbWU6IHN0cmluZywgcHJvcHM6IElQYXJhbWV0ZXJBd2FyZVByb3BzKSB7XG4gICAgICAgIHN1cGVyKHBhcmVudCxuYW1lLCBwcm9wcyk7XG4gICAgICAgIFxuICAgICAgICBsZXQgc2Vzc2lvblRhYmxlID0gbmV3IER5bmFtb0RCLlRhYmxlKHRoaXMscHJvcHMuZ2V0QXBwUmVmTmFtZSgpKydTZXNzaW9uJywge1xuICAgICAgICAgICAgdGFibGVOYW1lIDogcHJvcHMuZ2V0QXBwUmVmTmFtZSgpKydTZXNzaW9uJyxcbiAgICAgICAgICAgIHBhcnRpdGlvbktleSA6IHtcbiAgICAgICAgICAgICAgICBuYW1lIDogJ1Nlc3Npb25JZCcsXG4gICAgICAgICAgICAgICAgdHlwZSA6IER5bmFtb0RCLkF0dHJpYnV0ZVR5cGUuU3RyaW5nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmlsbGluZ01vZGUgOiBEeW5hbW9EQi5CaWxsaW5nTW9kZS5QYXlQZXJSZXF1ZXN0ICAgICAgXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFkZFJlc291cmNlKCd0YWJsZS5zZXNzaW9uJyxzZXNzaW9uVGFibGUpO1xuXG4gICAgICAgIGxldCBzZXNzaW9uQ29udHJvbFRhYmxlID0gbmV3IER5bmFtb0RCLlRhYmxlKHRoaXMscHJvcHMuZ2V0QXBwUmVmTmFtZSgpKydTZXNzaW9uQ29udHJvbCcsIHtcbiAgICAgICAgICAgIHRhYmxlTmFtZSA6IHByb3BzLmdldEFwcFJlZk5hbWUoKSsnU2Vzc2lvbkNvbnRyb2wnLFxuICAgICAgICAgICAgcGFydGl0aW9uS2V5IDoge1xuICAgICAgICAgICAgICAgIG5hbWUgOiAnU2Vzc2lvbklkJyxcbiAgICAgICAgICAgICAgICB0eXBlIDogRHluYW1vREIuQXR0cmlidXRlVHlwZS5TdHJpbmdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBiaWxsaW5nTW9kZSA6IER5bmFtb0RCLkJpbGxpbmdNb2RlLlBheVBlclJlcXVlc3RcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWRkUmVzb3VyY2UoJ3RhYmxlLnNlc3Npb25jb250cm9sJyxzZXNzaW9uQ29udHJvbFRhYmxlKTtcblxuICAgICAgICBsZXQgc2Vzc2lvblRvcFhUYWJsZSA9IG5ldyBEeW5hbW9EQi5UYWJsZSh0aGlzLHByb3BzLmdldEFwcFJlZk5hbWUoKSsnU2Vzc2lvblRvcFgnLCB7XG4gICAgICAgICAgICB0YWJsZU5hbWUgOiBwcm9wcy5nZXRBcHBSZWZOYW1lKCkrJ1Nlc3Npb25Ub3BYJyxcbiAgICAgICAgICAgIHBhcnRpdGlvbktleSA6IHtcbiAgICAgICAgICAgICAgICBuYW1lIDogJ1Nlc3Npb25JZCcsXG4gICAgICAgICAgICAgICAgdHlwZSA6IER5bmFtb0RCLkF0dHJpYnV0ZVR5cGUuU3RyaW5nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmlsbGluZ01vZGUgOiBEeW5hbW9EQi5CaWxsaW5nTW9kZS5QYXlQZXJSZXF1ZXN0XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFkZFJlc291cmNlKCd0YWJsZS5zZXNzaW9udG9weCcsc2Vzc2lvblRvcFhUYWJsZSk7XG4gICAgfVxufSJdfQ==