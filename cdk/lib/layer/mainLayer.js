"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resourceawarestack_1 = require("../resourceawarestack");
const securityLayer_1 = require("./securityLayer");
const configurationLayer_1 = require("./configurationLayer");
const storageLayer_1 = require("./storageLayer");
const databaseLayer_1 = require("./databaseLayer");
const ingestionConsumptionLayer_1 = require("./ingestionConsumptionLayer");
const processingLayer_1 = require("./processingLayer");
class MainLayer extends resourceawarestack_1.ResourceAwareStack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.buildResources();
    }
    buildResources() {
        // security layer
        let securityLayer = new securityLayer_1.SecurityLayer(this, 'SecurityLayer', this.properties);
        // configuration layer
        let configLayerProps = new resourceawarestack_1.ParameterAwareProps(this.properties);
        let ssmProperties = new Map();
        ssmProperties.set("Region", this.region);
        ssmProperties.set("ClientId", securityLayer.getUserPoolClientId());
        ssmProperties.set("UserpoolId", securityLayer.getUserPoolId());
        ssmProperties.set("UserPoolURL", securityLayer.getUserPoolUrl());
        ssmProperties.set("IdentityPoolId", securityLayer.getIdentityPoolId());
        // MISSING PARAMETER
        // ssmProperties.set("Session", "null");
        configLayerProps.addParameter('ssmParameters', ssmProperties);
        // MISSING PARAMETER  - side effect - uncomment the next line to fix it
        // let configLayer =
        new configurationLayer_1.ConfigurationLayer(this, 'ConfigurationLayer', configLayerProps);
        // storage layer
        let storageLayer = new storageLayer_1.StorageLayer(this, 'StorageStorage', this.properties);
        // UNCOMMENT the following section if you want to have the CDN created. It will take 20 minutes to build/destroy
        /*
        let cdnLayerProps = new ParameterAwareProps(this.properties);
        cdnLayerProps.addParameter('appbucket',storageLayer.getResource('appbucket'));
          new ContentDeliveryLayer(this,'ContentDeliveryLayer',cdnLayerProps);
          */
        // database layer
        let databaseLayer = new databaseLayer_1.DatabaseLayer(this, 'DatabaseLayer', this.properties);
        // processing layer
        let processingLayerProps = new resourceawarestack_1.ParameterAwareProps(this.properties);
        // MISSING PARAMETER - side effect - uncomment the next line
        // processingLayerProps.addParameter('parameter.session', configLayer.getResource('parameter.session'));
        processingLayerProps.addParameter('table.sessionControl', databaseLayer.getResource('table.sessionControl'));
        processingLayerProps.addParameter('table.sessionTopX', databaseLayer.getResource('table.sessionTopX'));
        processingLayerProps.addParameter('table.session', databaseLayer.getResource('table.session'));
        let processingLayer = new processingLayer_1.ProcessingLayer(this, 'ProcessingLayer', processingLayerProps);
        // Ingestion/consumption layer
        let ingestionConsumptionLayerProps = new resourceawarestack_1.ParameterAwareProps(processingLayerProps);
        ingestionConsumptionLayerProps.addParameter('rawbucketarn', storageLayer.getRawDataBucketArn());
        ingestionConsumptionLayerProps.addParameter('userpool', securityLayer.getUserPoolArn());
        ingestionConsumptionLayerProps.addParameter('userpoolid', securityLayer.getUserPoolId());
        ingestionConsumptionLayerProps.addParameter('table.session', databaseLayer.getResource('table.session'));
        ingestionConsumptionLayerProps.addParameter('table.sessiontopx', databaseLayer.getResource('table.sessiontopx'));
        ingestionConsumptionLayerProps.addParameter('lambda.allocate', processingLayer.getAllocateFunctionRef());
        ingestionConsumptionLayerProps.addParameter('lambda.deallocate', processingLayer.getDeallocateFunctionArn());
        ingestionConsumptionLayerProps.addParameter('lambda.scoreboard', processingLayer.getScoreboardFunctionRef());
        ingestionConsumptionLayerProps.addParameter('security.playersrole', securityLayer.getResource('security.playersrole'));
        ingestionConsumptionLayerProps.addParameter('security.managersrole', securityLayer.getResource('security.managersrole'));
        new ingestionConsumptionLayer_1.IngestionConsumptionLayer(this, 'IngestionConsumptionLayer', ingestionConsumptionLayerProps);
    }
}
exports.MainLayer = MainLayer;
//# sourceMappingURL=data:application/json;base64,