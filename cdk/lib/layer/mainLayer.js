"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resourceawarestack_1 = require("../resourceawarestack");
const securityLayer_1 = require("./securityLayer");
const configurationLayer_1 = require("./configurationLayer");
const storageLayer_1 = require("./storageLayer");
const databaseLayer_1 = require("./databaseLayer");
const ingestionConsumptionLayer_1 = require("./ingestionConsumptionLayer");
const processingLayer_1 = require("./processingLayer");
// MISSING CLOUDFRONT DISTRIBUTION - side effect
// Uncomment the following line if you want to deploy your Cloudfront distribution. It takes 20 mminutes
//import { ContentDeliveryLayer } from './contentDeliveryLayer';
class MainLayer extends resourceawarestack_1.ResourceAwareStack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.buildResources();
    }
    buildResources() {
        // security layer
        let securityLayer = new securityLayer_1.SecurityLayer(this, 'SecurityLayer', this.properties);
        // configuration layer
        let configLayerProps = new resourceawarestack_1.ParameterAwareProps(this.properties);
        let ssmProperties = new Map();
        ssmProperties.set("Region", this.region);
        ssmProperties.set("ClientId", securityLayer.getUserPoolClientId());
        ssmProperties.set("UserpoolId", securityLayer.getUserPoolId());
        ssmProperties.set("UserPoolURL", securityLayer.getUserPoolUrl());
        ssmProperties.set("IdentityPoolId", securityLayer.getIdentityPoolId());
        // MISSING PARAMETER - Uncomment the next line to create the parameter
        // ssmProperties.set("Session", "null");
        configLayerProps.addParameter('ssmParameters', ssmProperties);
        // MISSING PARAMETER  - side effect - uncomment the next line to fix it
        // let configLayer =
        new configurationLayer_1.ConfigurationLayer(this, 'ConfigurationLayer', configLayerProps);
        // storage layer
        let storageLayer = new storageLayer_1.StorageLayer(this, 'StorageStorage', this.properties);
        // MISSING CLOUDFRONT DISTRIBUTION 
        // Uncomment the following section if you want to deploy your Cloudfront distribution. It takes 20 mminutes
        /*
        let cdnLayerProps = new ParameterAwareProps(this.properties);
        cdnLayerProps.addParameter('appbucket',storageLayer.getResource('appbucket'));
          new ContentDeliveryLayer(this,'ContentDeliveryLayer',cdnLayerProps);
        */
        // database layer
        let databaseLayer = new databaseLayer_1.DatabaseLayer(this, 'DatabaseLayer', this.properties);
        // processing layer
        let processingLayerProps = new resourceawarestack_1.ParameterAwareProps(this.properties);
        // MISSING PARAMETER - side effect - uncomment the next line
        //processingLayerProps.addParameter('parameter.session', configLayer.getResource('parameter.session'));
        processingLayerProps.addParameter('table.sessionControl', databaseLayer.getResource('table.sessionControl'));
        processingLayerProps.addParameter('table.sessionTopX', databaseLayer.getResource('table.sessionTopX'));
        processingLayerProps.addParameter('table.session', databaseLayer.getResource('table.session'));
        let processingLayer = new processingLayer_1.ProcessingLayer(this, 'ProcessingLayer', processingLayerProps);
        // Ingestion/consumption layer
        let ingestionConsumptionLayerProps = new resourceawarestack_1.ParameterAwareProps(processingLayerProps);
        ingestionConsumptionLayerProps.addParameter('rawbucketarn', storageLayer.getRawDataBucketArn());
        ingestionConsumptionLayerProps.addParameter('userpool', securityLayer.getUserPoolArn());
        ingestionConsumptionLayerProps.addParameter('userpoolid', securityLayer.getUserPoolId());
        ingestionConsumptionLayerProps.addParameter('table.session', databaseLayer.getResource('table.session'));
        ingestionConsumptionLayerProps.addParameter('table.sessiontopx', databaseLayer.getResource('table.sessiontopx'));
        ingestionConsumptionLayerProps.addParameter('lambda.allocate', processingLayer.getAllocateFunctionRef());
        ingestionConsumptionLayerProps.addParameter('lambda.deallocate', processingLayer.getDeallocateFunctionArn());
        ingestionConsumptionLayerProps.addParameter('lambda.scoreboard', processingLayer.getScoreboardFunctionRef());
        ingestionConsumptionLayerProps.addParameter('security.playersrole', securityLayer.getResource('security.playersrole'));
        ingestionConsumptionLayerProps.addParameter('security.managersrole', securityLayer.getResource('security.managersrole'));
        new ingestionConsumptionLayer_1.IngestionConsumptionLayer(this, 'IngestionConsumptionLayer', ingestionConsumptionLayerProps);
    }
}
exports.MainLayer = MainLayer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbkxheWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbkxheWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsOERBQXFHO0FBRXJHLG1EQUFnRDtBQUNoRCw2REFBMEQ7QUFDMUQsaURBQThDO0FBQzlDLG1EQUFnRDtBQUNoRCwyRUFBd0U7QUFDeEUsdURBQW9EO0FBQ3BELGdEQUFnRDtBQUNoRCx3R0FBd0c7QUFDeEcsZ0VBQWdFO0FBR2hFLE1BQWEsU0FBVSxTQUFRLHVDQUFrQjtJQUUvQyxZQUFZLEtBQVUsRUFBRSxFQUFVLEVBQUUsS0FBNEI7UUFDOUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxjQUFjO1FBRVosaUJBQWlCO1FBQ2pCLElBQUksYUFBYSxHQUNmLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUU1RCxzQkFBc0I7UUFDdEIsSUFBSSxnQkFBZ0IsR0FBRyxJQUFJLHdDQUFtQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVoRSxJQUFJLGFBQWEsR0FBRyxJQUFJLEdBQUcsRUFBaUIsQ0FBQztRQUM3QyxhQUFhLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQztRQUNuRSxhQUFhLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxhQUFhLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztRQUMvRCxhQUFhLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNqRSxhQUFhLENBQUMsR0FBRyxDQUFD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IEFwcCB9IGZyb20gJ0Bhd3MtY2RrL2Nkayc7XG5pbXBvcnQgeyBJUGFyYW1ldGVyQXdhcmVQcm9wcywgUGFyYW1ldGVyQXdhcmVQcm9wcywgUmVzb3VyY2VBd2FyZVN0YWNrfSBmcm9tICcuLi9yZXNvdXJjZWF3YXJlc3RhY2snO1xuXG5pbXBvcnQgeyBTZWN1cml0eUxheWVyIH0gZnJvbSAnLi9zZWN1cml0eUxheWVyJztcbmltcG9ydCB7IENvbmZpZ3VyYXRpb25MYXllciB9IGZyb20gJy4vY29uZmlndXJhdGlvbkxheWVyJztcbmltcG9ydCB7IFN0b3JhZ2VMYXllciB9IGZyb20gJy4vc3RvcmFnZUxheWVyJztcbmltcG9ydCB7IERhdGFiYXNlTGF5ZXIgfSBmcm9tICcuL2RhdGFiYXNlTGF5ZXInO1xuaW1wb3J0IHsgSW5nZXN0aW9uQ29uc3VtcHRpb25MYXllciB9IGZyb20gJy4vaW5nZXN0aW9uQ29uc3VtcHRpb25MYXllcic7XG5pbXBvcnQgeyBQcm9jZXNzaW5nTGF5ZXIgfSBmcm9tICcuL3Byb2Nlc3NpbmdMYXllcic7XG4vLyBNSVNTSU5HIENMT1VERlJPTlQgRElTVFJJQlVUSU9OIC0gc2lkZSBlZmZlY3Rcbi8vIFVuY29tbWVudCB0aGUgZm9sbG93aW5nIGxpbmUgaWYgeW91IHdhbnQgdG8gZGVwbG95IHlvdXIgQ2xvdWRmcm9udCBkaXN0cmlidXRpb24uIEl0IHRha2VzIDIwIG1taW51dGVzXG4vL2ltcG9ydCB7IENvbnRlbnREZWxpdmVyeUxheWVyIH0gZnJvbSAnLi9jb250ZW50RGVsaXZlcnlMYXllcic7XG5cblxuZXhwb3J0IGNsYXNzIE1haW5MYXllciBleHRlbmRzIFJlc291cmNlQXdhcmVTdGFjayAge1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBBcHAsIGlkOiBzdHJpbmcsIHByb3BzPzogSVBhcmFtZXRlckF3YXJlUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcbiAgICB0aGlzLmJ1aWxkUmVzb3VyY2VzKCk7XG4gIH1cblxuICBidWlsZFJlc291cmNlcygpIHtcblxuICAgIC8vIHNlY3VyaXR5IGxheWVyXG4gICAgbGV0IHNlY3VyaXR5TGF5ZXIgPVxuICAgICAgbmV3IFNlY3VyaXR5TGF5ZXIodGhpcywgJ1NlY3VyaXR5TGF5ZXInLCB0aGlzLnByb3BlcnRpZXMpO1xuICAgIFxuICAgIC8vIGNvbmZpZ3VyYXRpb24gbGF5ZXJcbiAgICBsZXQgY29uZmlnTGF5ZXJQcm9wcyA9IG5ldyBQYXJhbWV0ZXJBd2FyZVByb3BzKHRoaXMucHJvcGVydGllcyk7XG4gICAgXG4gICAgbGV0IHNzbVByb3BlcnRpZXMgPSBuZXcgTWFwPHN0cmluZyxzdHJpbmc+KCk7XG4gICAgc3NtUHJvcGVydGllcy5zZXQoXCJSZWdpb25cIiwgdGhpcy5yZWdpb24pO1xuICAgIHNzbVByb3BlcnRpZXMuc2V0KFwiQ2xpZW50SWRcIiwgc2VjdXJpdHlMYXllci5nZXRVc2VyUG9vbENsaWVudElkKCkpO1xuICAgIHNzbVByb3BlcnRpZXMuc2V0KFwiVXNlcnBvb2xJZFwiLCBzZWN1cml0eUxheWVyLmdldFVzZXJQb29sSWQoKSk7XG4gICAgc3NtUHJvcGVydGllcy5zZXQoXCJVc2VyUG9vbFVSTFwiLCBzZWN1cml0eUxheWVyLmdldFVzZXJQb29sVXJsKCkpO1xuICAgIHNzbVByb3BlcnRpZXMuc2V0KFwiSWRlbnRpdHlQb29sSWRcIiwgc2VjdXJpdHlMYXllci5nZXRJZGVudGl0eVBvb2xJZCgpKTtcbiAgICAvLyBNSVNTSU5HIFBBUkFNRVRFUiAtIFVuY29tbWVudCB0aGUgbmV4dCBsaW5lIHRvIGNyZWF0ZSB0aGUgcGFyYW1ldGVyXG4gICAgLy8gc3NtUHJvcGVydGllcy5zZXQoXCJTZXNzaW9uXCIsIFwibnVsbFwiKTtcbiAgICBjb25maWdMYXllclByb3BzLmFkZFBhcmFtZXRlcignc3NtUGFyYW1ldGVycycsc3NtUHJvcGVydGllcyk7XG4gICAgLy8gTUlTU0lORyBQQVJBTUVURVIgIC0gc2lkZSBlZmZlY3QgLSB1bmNvbW1lbnQgdGhlIG5leHQgbGluZSB0byBmaXggaXRcbiAgIC8vIGxldCBjb25maWdMYXllciA9XG4gICAgICBuZXcgQ29uZmlndXJhdGlvbkxheWVyKHRoaXMsICdDb25maWd1cmF0aW9uTGF5ZXInLCBjb25maWdMYXllclByb3BzKTtcblxuICAgIC8vIHN0b3JhZ2UgbGF5ZXJcbiAgICBsZXQgc3RvcmFnZUxheWVyID1cbiAgICAgIG5ldyBTdG9yYWdlTGF5ZXIodGhpcywgJ1N0b3JhZ2VTdG9yYWdlJywgdGhpcy5wcm9wZXJ0aWVzKTtcblxuXG4gICAgLy8gTUlTU0lORyBDTE9VREZST05UIERJU1RSSUJVVElPTiBcbiAgICAvLyBVbmNvbW1lbnQgdGhlIGZvbGxvd2luZyBzZWN0aW9uIGlmIHlvdSB3YW50IHRvIGRlcGxveSB5b3VyIENsb3VkZnJvbnQgZGlzdHJpYnV0aW9uLiBJdCB0YWtlcyAyMCBtbWludXRlc1xuICAgIC8qXG4gICAgbGV0IGNkbkxheWVyUHJvcHMgPSBuZXcgUGFyYW1ldGVyQXdhcmVQcm9wcyh0aGlzLnByb3BlcnRpZXMpO1xuICAgIGNkbkxheWVyUHJvcHMuYWRkUGFyYW1ldGVyKCdhcHBidWNrZXQnLHN0b3JhZ2VMYXllci5nZXRSZXNvdXJjZSgnYXBwYnVja2V0JykpO1xuICAgICAgbmV3IENvbnRlbnREZWxpdmVyeUxheWVyKHRoaXMsJ0NvbnRlbnREZWxpdmVyeUxheWVyJyxjZG5MYXllclByb3BzKTtcbiAgICAqL1xuXG5cbiAgICAvLyBkYXRhYmFzZSBsYXllclxuICAgIGxldCBkYXRhYmFzZUxheWVyID1cbiAgICAgIG5ldyBEYXRhYmFzZUxheWVyKHRoaXMsICdEYXRhYmFzZUxheWVyJywgdGhpcy5wcm9wZXJ0aWVzKTtcbiAgICBcbiAgICAvLyBwcm9jZXNzaW5nIGxheWVyXG4gICAgbGV0IHByb2Nlc3NpbmdMYXllclByb3BzID0gbmV3IFBhcmFtZXRlckF3YXJlUHJvcHModGhpcy5wcm9wZXJ0aWVzKTtcbiAgICAvLyBNSVNTSU5HIFBBUkFNRVRFUiAtIHNpZGUgZWZmZWN0IC0gdW5jb21tZW50IHRoZSBuZXh0IGxpbmVcbiAgICAgIC8vcHJvY2Vzc2luZ0xheWVyUHJvcHMuYWRkUGFyYW1ldGVyKCdwYXJhbWV0ZXIuc2Vzc2lvbicsIGNvbmZpZ0xheWVyLmdldFJlc291cmNlKCdwYXJhbWV0ZXIuc2Vzc2lvbicpKTtcbiAgICAgIHByb2Nlc3NpbmdMYXllclByb3BzLmFkZFBhcmFtZXRlcigndGFibGUuc2Vzc2lvbkNvbnRyb2wnLCBkYXRhYmFzZUxheWVyLmdldFJlc291cmNlKCd0YWJsZS5zZXNzaW9uQ29udHJvbCcpKTtcbiAgICAgIHByb2Nlc3NpbmdMYXllclByb3BzLmFkZFBhcmFtZXRlcigndGFibGUuc2Vzc2lvblRvcFgnLCBkYXRhYmFzZUxheWVyLmdldFJlc291cmNlKCd0YWJsZS5zZXNzaW9uVG9wWCcpKTtcbiAgICAgIHByb2Nlc3NpbmdMYXllclByb3BzLmFkZFBhcmFtZXRlcigndGFibGUuc2Vzc2lvbicsIGRhdGFiYXNlTGF5ZXIuZ2V0UmVzb3VyY2UoJ3RhYmxlLnNlc3Npb24nKSk7XG4gICAgbGV0IHByb2Nlc3NpbmdMYXllciA9IG5ldyBQcm9jZXNzaW5nTGF5ZXIodGhpcywgJ1Byb2Nlc3NpbmdMYXllcicsIHByb2Nlc3NpbmdMYXllclByb3BzKTtcblxuICAgIC8vIEluZ2VzdGlvbi9jb25zdW1wdGlvbiBsYXllclxuICAgIGxldCBpbmdlc3Rpb25Db25zdW1wdGlvbkxheWVyUHJvcHMgPSBuZXcgUGFyYW1ldGVyQXdhcmVQcm9wcyhwcm9jZXNzaW5nTGF5ZXJQcm9wcyk7XG4gICAgaW5nZXN0aW9uQ29uc3VtcHRpb25MYXllclByb3BzLmFkZFBhcmFtZXRlcigncmF3YnVja2V0YXJuJywgc3RvcmFnZUxheWVyLmdldFJhd0RhdGFCdWNrZXRBcm4oKSk7XG4gICAgaW5nZXN0aW9uQ29uc3VtcHRpb25MYXllclByb3BzLmFkZFBhcmFtZXRlcigndXNlcnBvb2wnLHNlY3VyaXR5TGF5ZXIuZ2V0VXNlclBvb2xBcm4oKSk7XG4gICAgaW5nZXN0aW9uQ29uc3VtcHRpb25MYXllclByb3BzLmFkZFBhcmFtZXRlcigndXNlcnBvb2xpZCcsIHNlY3VyaXR5TGF5ZXIuZ2V0VXNlclBvb2xJZCgpKTtcbiAgICBpbmdlc3Rpb25Db25zdW1wdGlvbkxheWVyUHJvcHMuYWRkUGFyYW1ldGVyKCd0YWJsZS5zZXNzaW9uJyxkYXRhYmFzZUxheWVyLmdldFJlc291cmNlKCd0YWJsZS5zZXNzaW9uJykpO1xuICAgIGluZ2VzdGlvbkNvbnN1bXB0aW9uTGF5ZXJQcm9wcy5hZGRQYXJhbWV0ZXIoJ3RhYmxlLnNlc3Npb250b3B4JyxkYXRhYmFzZUxheWVyLmdldFJlc291cmNlKCd0YWJsZS5zZXNzaW9udG9weCcpKTtcbiAgICBpbmdlc3Rpb25Db25zdW1wdGlvbkxheWVyUHJvcHMuYWRkUGFyYW1ldGVyKCdsYW1iZGEuYWxsb2NhdGUnLHByb2Nlc3NpbmdMYXllci5nZXRBbGxvY2F0ZUZ1bmN0aW9uUmVmKCkpO1xuICAgIGluZ2VzdGlvbkNvbnN1bXB0aW9uTGF5ZXJQcm9wcy5hZGRQYXJhbWV0ZXIoJ2xhbWJkYS5kZWFsbG9jYXRlJyxwcm9jZXNzaW5nTGF5ZXIuZ2V0RGVhbGxvY2F0ZUZ1bmN0aW9uQXJuKCkpO1xuICAgIGluZ2VzdGlvbkNvbnN1bXB0aW9uTGF5ZXJQcm9wcy5hZGRQYXJhbWV0ZXIoJ2xhbWJkYS5zY29yZWJvYXJkJyxwcm9jZXNzaW5nTGF5ZXIuZ2V0U2NvcmVib2FyZEZ1bmN0aW9uUmVmKCkpO1xuICAgIGluZ2VzdGlvbkNvbnN1bXB0aW9uTGF5ZXJQcm9wcy5hZGRQYXJhbWV0ZXIoJ3NlY3VyaXR5LnBsYXllcnNyb2xlJywgc2VjdXJpdHlMYXllci5nZXRSZXNvdXJjZSgnc2VjdXJpdHkucGxheWVyc3JvbGUnKSk7XG4gICAgaW5nZXN0aW9uQ29uc3VtcHRpb25MYXllclByb3BzLmFkZFBhcmFtZXRlcignc2VjdXJpdHkubWFuYWdlcnNyb2xlJywgc2VjdXJpdHlMYXllci5nZXRSZXNvdXJjZSgnc2VjdXJpdHkubWFuYWdlcnNyb2xlJykpO1xuICAgIG5ldyBJbmdlc3Rpb25Db25zdW1wdGlvbkxheWVyKHRoaXMsICdJbmdlc3Rpb25Db25zdW1wdGlvbkxheWVyJyxpbmdlc3Rpb25Db25zdW1wdGlvbkxheWVyUHJvcHMpOyBcbiAgfVxufSJdfQ==