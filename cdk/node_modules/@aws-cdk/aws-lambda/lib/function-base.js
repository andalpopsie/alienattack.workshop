"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const s3n = require("@aws-cdk/aws-s3-notifications");
const cdk = require("@aws-cdk/cdk");
const lambda_generated_1 = require("./lambda.generated");
const pipeline_action_1 = require("./pipeline-action");
class FunctionBase extends cdk.Construct {
    constructor() {
        super(...arguments);
        /**
         * Indicates if the policy that allows CloudWatch logs to publish to this lambda has been added.
         */
        this.logSubscriptionDestinationPolicyAddedFor = [];
    }
    /**
     * Adds a permission to the Lambda resource policy.
     * @param id The id Æ’or the permission construct
     */
    addPermission(id, permission) {
        if (!this.canCreatePermissions) {
            // FIXME: Report metadata
            return;
        }
        const principal = this.parsePermissionPrincipal(permission.principal);
        const action = permission.action || 'lambda:InvokeFunction';
        new lambda_generated_1.CfnPermission(this, id, {
            action,
            principal,
            functionName: this.functionName,
            eventSourceToken: permission.eventSourceToken,
            sourceAccount: permission.sourceAccount,
            sourceArn: permission.sourceArn,
        });
    }
    get id() {
        return this.node.id;
    }
    toCodePipelineInvokeAction(props) {
        return new pipeline_action_1.PipelineInvokeAction(Object.assign({}, props, { lambda: this }));
    }
    addToRolePolicy(statement) {
        if (!this.role) {
            return;
        }
        this.role.addToPolicy(statement);
    }
    /**
     * Access the Connections object
     *
     * Will fail if not a VPC-enabled Lambda Function
     */
    get connections() {
        if (!this._connections) {
            // tslint:disable-next-line:max-line-length
            throw new Error('Only VPC-associated Lambda Functions have security groups to manage. Supply the "vpc" parameter when creating the Lambda, or "securityGroupId" when importing it.');
        }
        return this._connections;
    }
    /**
     * Whether or not this Lambda function was bound to a VPC
     *
     * If this is is `false`, trying to access the `connections` object will fail.
     */
    get isBoundToVpc() {
        return !!this._connections;
    }
    /**
     * Returns a RuleTarget that can be used to trigger this Lambda as a
     * result from a CloudWatch event.
     */
    asEventRuleTarget(ruleArn, ruleId) {
        const permissionId = `AllowEventRule${ruleId}`;
        if (!this.node.tryFindChild(permissionId)) {
            this.addPermission(permissionId, {
                action: 'lambda:InvokeFunction',
                principal: new iam.ServicePrincipal('events.amazonaws.com'),
                sourceArn: ruleArn
            });
        }
        return {
            id: this.node.id,
            arn: this.functionArn,
        };
    }
    /**
     * Grant the given identity permissions to invoke this Lambda
     */
    grantInvoke(identity) {
        if (identity) {
            identity.addToPolicy(new iam.PolicyStatement()
                .addAction('lambda:InvokeFunction')
                .addResource(this.functionArn));
        }
    }
    logSubscriptionDestination(sourceLogGroup) {
        const arn = sourceLogGroup.logGroupArn;
        if (this.logSubscriptionDestinationPolicyAddedFor.indexOf(arn) === -1) {
            // NOTE: the use of {AWS::Region} limits this to the same region, which shouldn't really be an issue,
            // since the Lambda must be in the same region as the SubscriptionFilter anyway.
            //
            // (Wildcards in principals are unfortunately not supported.
            this.addPermission('InvokedByCloudWatchLogs', {
                principal: new iam.ServicePrincipal(`logs.${this.node.stack.region}.amazonaws.com`),
                sourceArn: arn
            });
            this.logSubscriptionDestinationPolicyAddedFor.push(arn);
        }
        return { arn: this.functionArn };
    }
    /**
     * Allows this Lambda to be used as a destination for bucket notifications.
     * Use `bucket.onEvent(lambda)` to subscribe.
     */
    asBucketNotificationDestination(bucketArn, bucketId) {
        const permissionId = `AllowBucketNotificationsFrom${bucketId}`;
        if (!this.node.tryFindChild(permissionId)) {
            this.addPermission(permissionId, {
                sourceAccount: this.node.stack.accountId,
                principal: new iam.ServicePrincipal('s3.amazonaws.com'),
                sourceArn: bucketArn,
            });
        }
        // if we have a permission resource for this relationship, add it as a dependency
        // to the bucket notifications resource, so it will be created first.
        const permission = this.node.tryFindChild(permissionId);
        return {
            type: s3n.BucketNotificationDestinationType.Lambda,
            arn: this.functionArn,
            dependencies: permission ? [permission] : undefined
        };
    }
    asStepFunctionsTaskResource(_callingTask) {
        return {
            resourceArn: this.functionArn,
            metricPrefixSingular: 'LambdaFunction',
            metricPrefixPlural: 'LambdaFunctions',
            metricDimensions: { LambdaFunctionArn: this.functionArn },
            policyStatements: [new iam.PolicyStatement()
                    .addResource(this.functionArn)
                    .addActions("lambda:InvokeFunction")
            ]
        };
    }
    /**
     * Adds an event source to this function.
     *
     * Event sources are implemented in the @aws-cdk/aws-lambda-event-sources module.
     *
     * The following example adds an SQS Queue as an event source:
     *
     *     import { SqsEventSource } from '@aws-cdk/aws-lambda-event-sources';
     *     myFunction.addEventSource(new SqsEventSource(myQueue));
     *
     * @param source The event source to bind to this function
     */
    addEventSource(source) {
        source.bind(this);
    }
    parsePermissionPrincipal(principal) {
        if (!principal) {
            return undefined;
        }
        // use duck-typing, not instance of
        if ('accountId' in principal) {
            return principal.accountId;
        }
        if (`service` in principal) {
            return principal.service;
        }
        throw new Error(`Invalid principal type for Lambda permission statement: ${JSON.stringify(this.node.resolve(principal))}. ` +
            'Supported: AccountPrincipal, ServicePrincipal');
    }
}
exports.FunctionBase = FunctionBase;
//# sourceMappingURL=data:application/json;base64,