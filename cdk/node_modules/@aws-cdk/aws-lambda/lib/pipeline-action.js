"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codepipeline = require("@aws-cdk/aws-codepipeline-api");
const iam = require("@aws-cdk/aws-iam");
/**
 * CodePipeline invoke Action that is provided by an AWS Lambda function.
 *
 * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-invoke-lambda-function.html
 */
class PipelineInvokeAction extends codepipeline.Action {
    constructor(props) {
        super(Object.assign({}, props, { category: codepipeline.ActionCategory.Invoke, provider: 'Lambda', artifactBounds: codepipeline.defaultBounds(), configuration: {
                FunctionName: props.lambda.functionName,
                UserParameters: props.userParameters
            } }));
        // handle input artifacts
        for (const inputArtifact of props.inputArtifacts || []) {
            this.addInputArtifact(inputArtifact);
        }
        // handle output artifacts
        for (const outputArtifactName of props.outputArtifactNames || []) {
            this.addOutputArtifact(outputArtifactName);
        }
        this.props = props;
    }
    outputArtifacts() {
        return this._outputArtifacts;
    }
    outputArtifact(artifactName) {
        const result = this._outputArtifacts.find(a => (a.artifactName === artifactName));
        if (result === undefined) {
            throw new Error(`Could not find the output Artifact with name '${artifactName}'`);
        }
        else {
            return result;
        }
    }
    bind(stage, _scope) {
        // allow pipeline to list functions
        stage.pipeline.role.addToPolicy(new iam.PolicyStatement()
            .addAction('lambda:ListFunctions')
            .addAllResources());
        // allow pipeline to invoke this lambda functionn
        stage.pipeline.role.addToPolicy(new iam.PolicyStatement()
            .addAction('lambda:InvokeFunction')
            .addResource(this.props.lambda.functionArn));
        // allow lambda to put job results for this pipeline.
        const addToPolicy = this.props.addPutJobResultPolicy !== undefined ? this.props.addPutJobResultPolicy : true;
        if (addToPolicy) {
            this.props.lambda.addToRolePolicy(new iam.PolicyStatement()
                .addAllResources() // to avoid cycles (see docs)
                .addAction('codepipeline:PutJobSuccessResult')
                .addAction('codepipeline:PutJobFailureResult'));
        }
    }
}
exports.PipelineInvokeAction = PipelineInvokeAction;
//# sourceMappingURL=data:application/json;base64,