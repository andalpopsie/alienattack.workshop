"use strict";
// Copyright 2012-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// Generated from the AWS CloudFormation Resource Specification
// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html
// @cfn2ts:meta@ {"generated":"2019-03-07T22:05:49.335Z","fingerprint":"NxKHScP/JUPpTxR66jvc79djru8TFCkfaYH/gi2jq/0="}
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:max-line-length | This is generated code - line lengths are difficult to control
const cdk = require("@aws-cdk/cdk");
/**
 * Determine whether the given properties match those of a ``CfnCertificateProps``
 *
 * @param properties the TypeScript properties of a ``CfnCertificateProps``
 *
 * @returns the result of the validation.
 */
function CfnCertificatePropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('domainName', cdk.requiredValidator)(properties.domainName));
    errors.collect(cdk.propertyValidator('domainName', cdk.validateString)(properties.domainName));
    errors.collect(cdk.propertyValidator('domainValidationOptions', cdk.listValidator(CfnCertificate_DomainValidationOptionPropertyValidator))(properties.domainValidationOptions));
    errors.collect(cdk.propertyValidator('subjectAlternativeNames', cdk.listValidator(cdk.validateString))(properties.subjectAlternativeNames));
    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));
    errors.collect(cdk.propertyValidator('validationMethod', cdk.validateString)(properties.validationMethod));
    return errors.wrap('supplied properties not correct for "CfnCertificateProps"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::CertificateManager::Certificate`` resource
 *
 * @param properties the TypeScript properties of a ``CfnCertificateProps``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::CertificateManager::Certificate`` resource.
 */
// @ts-ignore TS6133
function cfnCertificatePropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnCertificatePropsValidator(properties).assertSuccess();
    return {
        DomainName: cdk.stringToCloudFormation(properties.domainName),
        DomainValidationOptions: cdk.listMapper(cfnCertificateDomainValidationOptionPropertyToCloudFormation)(properties.domainValidationOptions),
        SubjectAlternativeNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.subjectAlternativeNames),
        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
        ValidationMethod: cdk.stringToCloudFormation(properties.validationMethod),
    };
}
/**
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html
 */
class CfnCertificate extends cdk.Resource {
    /**
     * Creates a new ``AWS::CertificateManager::Certificate``.
     *
     * @param scope scope in which this resource is defined
     * @param id    scoped id of the resource
     * @param props resource properties
     */
    constructor(scope, id, props) {
        super(scope, id, { type: CfnCertificate.resourceTypeName, properties: props });
        /**
         * The ``TagManager`` handles setting, removing and formatting tags
         *
         * Tags should be managed either passing them as properties during
         * initiation or by calling methods on this object. If both techniques are
         * used only the tags from the TagManager will be used. ``Tag`` (aspect)
         * will use the manager.
         */
        this.tags = new cdk.TagManager(cdk.TagType.Standard, "AWS::CertificateManager::Certificate");
        cdk.requireProperty(props, 'domainName', this);
        this.certificateArn = this.ref.toString();
    }
    get propertyOverrides() {
        return this.untypedPropertyOverrides;
    }
    renderProperties(properties) {
        return cfnCertificatePropsToCloudFormation(this.node.resolve(properties));
    }
}
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnCertificate.resourceTypeName = "AWS::CertificateManager::Certificate";
exports.CfnCertificate = CfnCertificate;
/**
 * Determine whether the given properties match those of a ``DomainValidationOptionProperty``
 *
 * @param properties the TypeScript properties of a ``DomainValidationOptionProperty``
 *
 * @returns the result of the validation.
 */
function CfnCertificate_DomainValidationOptionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('domainName', cdk.requiredValidator)(properties.domainName));
    errors.collect(cdk.propertyValidator('domainName', cdk.validateString)(properties.domainName));
    errors.collect(cdk.propertyValidator('validationDomain', cdk.requiredValidator)(properties.validationDomain));
    errors.collect(cdk.propertyValidator('validationDomain', cdk.validateString)(properties.validationDomain));
    return errors.wrap('supplied properties not correct for "DomainValidationOptionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::CertificateManager::Certificate.DomainValidationOption`` resource
 *
 * @param properties the TypeScript properties of a ``DomainValidationOptionProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::CertificateManager::Certificate.DomainValidationOption`` resource.
 */
// @ts-ignore TS6133
function cfnCertificateDomainValidationOptionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnCertificate_DomainValidationOptionPropertyValidator(properties).assertSuccess();
    return {
        DomainName: cdk.stringToCloudFormation(properties.domainName),
        ValidationDomain: cdk.stringToCloudFormation(properties.validationDomain),
    };
}
//# sourceMappingURL=data:application/json;base64,