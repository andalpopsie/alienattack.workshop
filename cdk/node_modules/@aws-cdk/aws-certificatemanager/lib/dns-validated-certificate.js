"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cfn = require("@aws-cdk/aws-cloudformation");
const iam = require("@aws-cdk/aws-iam");
const lambda = require("@aws-cdk/aws-lambda");
const cdk = require("@aws-cdk/cdk");
const path = require("path");
/**
 * A certificate managed by AWS Certificate Manager.  Will be automatically
 * validated using DNS validation against the specified Route 53 hosted zone.
 */
class DNSValidatedCertificate extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.domainName = props.domainName;
        this.normalizedZoneName = props.hostedZone.zoneName;
        // Remove trailing `.` from zone name
        if (this.normalizedZoneName.endsWith('.')) {
            this.normalizedZoneName = this.normalizedZoneName.substring(0, this.normalizedZoneName.length - 1);
        }
        // Remove any `/hostedzone/` prefix from the Hosted Zone ID
        this.hostedZoneId = props.hostedZone.hostedZoneId.replace(/^\/hostedzone\//, '');
        const requestorFunction = new lambda.Function(this, 'CertificateRequestorFunction', {
            code: lambda.Code.asset(path.resolve(__dirname, '..', 'lambda-packages', 'dns_validated_certificate_handler', 'lib')),
            handler: 'index.certificateRequestHandler',
            runtime: lambda.Runtime.NodeJS810,
            timeout: 15 * 60 // 15 minutes
        });
        requestorFunction.addToRolePolicy(new iam.PolicyStatement()
            .addActions('acm:RequestCertificate', 'acm:DescribeCertificate', 'acm:DeleteCertificate')
            .addResource('*'));
        requestorFunction.addToRolePolicy(new iam.PolicyStatement()
            .addActions('route53:GetChange')
            .addResource('*'));
        requestorFunction.addToRolePolicy(new iam.PolicyStatement()
            .addActions('route53:changeResourceRecordSets')
            .addResource(`arn:aws:route53:::hostedzone/${this.hostedZoneId}`));
        const certificate = new cfn.CustomResource(this, 'CertificateRequestorResource', {
            lambdaProvider: requestorFunction,
            properties: {
                DomainName: props.domainName,
                SubjectAlternativeNames: props.subjectAlternativeNames,
                HostedZoneId: this.hostedZoneId
            }
        });
        this.certificateArn = certificate.getAtt('Arn').toString();
    }
    /**
     * Export this certificate from the stack
     */
    export() {
        return {
            certificateArn: new cdk.Output(this, 'Arn', { value: this.certificateArn }).makeImportValue().toString()
        };
    }
    validate() {
        const errors = [];
        // Ensure the zone name is a parent zone of the certificate domain name
        if (!this.domainName.endsWith('.' + this.normalizedZoneName)) {
            errors.push(`DNS zone ${this.normalizedZoneName} is not authoritative for certificate domain name ${this.domainName}`);
        }
        return errors;
    }
}
exports.DNSValidatedCertificate = DNSValidatedCertificate;
//# sourceMappingURL=data:application/json;base64,