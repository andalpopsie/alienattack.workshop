"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const s3n = require("@aws-cdk/aws-s3-notifications");
const cdk = require("@aws-cdk/cdk");
const policy_1 = require("./policy");
/**
 * Reference to a new or existing Amazon SQS queue
 */
class QueueBase extends cdk.Construct {
    constructor() {
        super(...arguments);
        /**
         * The set of S3 bucket IDs that are allowed to send notifications to this queue.
         */
        this.notifyingBuckets = new Set();
    }
    /**
     * Adds a statement to the IAM resource policy associated with this queue.
     *
     * If this queue was created in this stack (`new Queue`), a queue policy
     * will be automatically created upon the first call to `addToPolicy`. If
     * the queue is improted (`Queue.import`), then this is a no-op.
     */
    addToResourcePolicy(statement) {
        if (!this.policy && this.autoCreatePolicy) {
            this.policy = new policy_1.QueuePolicy(this, 'Policy', { queues: [this] });
        }
        if (this.policy) {
            this.policy.document.addStatement(statement);
        }
    }
    /**
     * Allows using SQS queues as destinations for bucket notifications.
     * Use `bucket.onEvent(event, queue)` to subscribe.
     * @param bucketArn The ARN of the notifying bucket.
     * @param bucketId A unique ID for the notifying bucket.
     */
    asBucketNotificationDestination(bucketArn, bucketId) {
        if (!this.notifyingBuckets.has(bucketId)) {
            this.addToResourcePolicy(new iam.PolicyStatement()
                .addServicePrincipal('s3.amazonaws.com')
                .addAction('sqs:SendMessage')
                .addResource(this.queueArn)
                .addCondition('ArnLike', { 'aws:SourceArn': bucketArn }));
            // if this queue is encrypted, we need to allow S3 to read messages since that's how
            // it verifies that the notification destination configuration is valid.
            // by setting allowNoOp to false, we ensure that only custom keys that we can actually
            // control access to can be used here as described in:
            // https://docs.aws.amazon.com/AmazonS3/latest/dev/ways-to-add-notification-config-to-bucket.html
            if (this.encryptionMasterKey) {
                this.encryptionMasterKey.addToResourcePolicy(new iam.PolicyStatement()
                    .addServicePrincipal('s3.amazonaws.com')
                    .addAction('kms:GenerateDataKey')
                    .addAction('kms:Decrypt')
                    .addAllResources(), /* allowNoOp */ false);
            }
            this.notifyingBuckets.add(bucketId);
        }
        return {
            arn: this.queueArn,
            type: s3n.BucketNotificationDestinationType.Queue,
            dependencies: [this.policy]
        };
    }
    /**
     * Allow using SQS queues as lifecycle hook targets
     */
    asLifecycleHookTarget(lifecycleHook) {
        this.grantSendMessages(lifecycleHook.role);
        return { notificationTargetArn: this.queueArn };
    }
    /**
     * Grant permissions to consume messages from a queue
     *
     * This will grant the following permissions:
     *
     *   - sqs:ChangeMessageVisibility
     *   - sqs:ChangeMessageVisibilityBatch
     *   - sqs:DeleteMessage
     *   - sqs:ReceiveMessage
     *   - sqs:DeleteMessageBatch
     *   - sqs:GetQueueAttributes
     *   - sqs:GetQueueUrl
     *
     * @param identity Principal to grant consume rights to
     */
    grantConsumeMessages(identity) {
        this.grant(identity, 'sqs:ReceiveMessage', 'sqs:ChangeMessageVisibility', 'sqs:ChangeMessageVisibilityBatch', 'sqs:GetQueueUrl', 'sqs:DeleteMessage', 'sqs:DeleteMessageBatch', 'sqs:GetQueueAttributes');
    }
    /**
     * Grant access to send messages to a queue to the given identity.
     *
     * This will grant the following permissions:
     *
     *  - sqs:SendMessage
     *  - sqs:SendMessageBatch
     *  - sqs:GetQueueAttributes
     *  - sqs:GetQueueUrl
     *
     * @param identity Principal to grant send rights to
     */
    grantSendMessages(identity) {
        this.grant(identity, 'sqs:SendMessage', 'sqs:SendMessageBatch', 'sqs:GetQueueAttributes', 'sqs:GetQueueUrl');
    }
    /**
     * Grant an IAM principal permissions to purge all messages from the queue.
     *
     * This will grant the following permissions:
     *
     *  - sqs:PurgeQueue
     *  - sqs:GetQueueAttributes
     *  - sqs:GetQueueUrl
     *
     * @param identity Principal to grant send rights to
     * @param queueActions additional queue actions to allow
     */
    grantPurge(identity) {
        this.grant(identity, 'sqs:PurgeQueue', 'sqs:GetQueueAttributes', 'sqs:GetQueueUrl');
    }
    /**
     * Grant the actions defined in queueActions to the identity Principal given
     * on this SQS queue resource.
     *
     * @param identity Principal to grant right to
     * @param queueActions The actions to grant
     */
    grant(identity, ...queueActions) {
        if (!identity) {
            return;
        }
        identity.addToPolicy(new iam.PolicyStatement()
            .addResource(this.queueArn)
            .addActions(...queueActions));
    }
}
exports.QueueBase = QueueBase;
//# sourceMappingURL=data:application/json;base64,