"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events = require("@aws-cdk/aws-events");
const artifact_1 = require("./artifact");
const validation = require("./validation");
var ActionCategory;
(function (ActionCategory) {
    ActionCategory["Source"] = "Source";
    ActionCategory["Build"] = "Build";
    ActionCategory["Test"] = "Test";
    ActionCategory["Approval"] = "Approval";
    ActionCategory["Deploy"] = "Deploy";
    ActionCategory["Invoke"] = "Invoke";
})(ActionCategory = exports.ActionCategory || (exports.ActionCategory = {}));
function defaultBounds() {
    return {
        minInputs: 0,
        maxInputs: 5,
        minOutputs: 0,
        maxOutputs: 5
    };
}
exports.defaultBounds = defaultBounds;
/**
 * Low-level class for generic CodePipeline Actions.
 * It is recommended that concrete types are used instead, such as {@link codecommit.PipelineSourceAction} or
 * {@link codebuild.PipelineBuildAction}.
 */
class Action {
    constructor(props) {
        this._actionInputArtifacts = new Array();
        this._actionOutputArtifacts = new Array();
        validation.validateName('Action', props.actionName);
        this.owner = props.owner || 'AWS';
        this.version = props.version || '1';
        this.category = props.category;
        this.provider = props.provider;
        this.region = props.region;
        this.configuration = props.configuration;
        this.artifactBounds = props.artifactBounds;
        this.runOrder = props.runOrder === undefined ? 1 : props.runOrder;
        this.actionName = props.actionName;
        this.role = props.role;
    }
    onStateChange(name, target, options) {
        const rule = new events.EventRule(this.scope, name, options);
        rule.addTarget(target);
        rule.addEventPattern({
            detailType: ['CodePipeline Stage Execution State Change'],
            source: ['aws.codepipeline'],
            resources: [this.stage.pipeline.pipelineArn],
            detail: {
                stage: [this.stage.stageName],
                action: [this.actionName],
            },
        });
        return rule;
    }
    get _inputArtifacts() {
        return this._actionInputArtifacts.slice();
    }
    get _outputArtifacts() {
        return this._actionOutputArtifacts.slice();
    }
    validate() {
        return validation.validateArtifactBounds('input', this._actionInputArtifacts, this.artifactBounds.minInputs, this.artifactBounds.maxInputs, this.category, this.provider)
            .concat(validation.validateArtifactBounds('output', this._actionOutputArtifacts, this.artifactBounds.minOutputs, this.artifactBounds.maxOutputs, this.category, this.provider));
    }
    addOutputArtifact(name) {
        const artifact = new artifact_1.Artifact(name);
        this._actionOutputArtifacts.push(artifact);
        return artifact;
    }
    addInputArtifact(artifact) {
        this._actionInputArtifacts.push(artifact);
        return this;
    }
    /**
     * Retrieves the Construct scope of this Action.
     * Only available after the Action has been added to a Stage,
     * and that Stage to a Pipeline.
     */
    get scope() {
        if (this._scope) {
            return this._scope;
        }
        else {
            throw new Error('Action must be added to a stage that is part of a pipeline first');
        }
    }
    // ignore unused private method (it's actually used in Stage)
    // @ts-ignore
    _attachActionToPipeline(stage, scope) {
        if (this._stage) {
            throw new Error(`Action '${this.actionName}' has been added to a pipeline twice`);
        }
        this._stage = stage;
        this._scope = scope;
        this.bind(stage, scope);
    }
    get stage() {
        if (this._stage) {
            return this._stage;
        }
        else {
            throw new Error('Action must be added to a stage that is part of a pipeline before using onStateChange');
        }
    }
}
exports.Action = Action;
// export class ElasticBeanstalkDeploy extends DeployAction {
//   constructor(scope: Stage, id: string, applicationName: string, environmentName: string) {
//     super(scope, id, 'ElasticBeanstalk', { minInputs: 1, maxInputs: 1, minOutputs: 0, maxOutputs: 0 }, {
//       ApplicationName: applicationName,
//       EnvironmentName: environmentName
//     });
//   }
// }
// export class OpsWorksDeploy extends DeployAction {
//   constructor(scope: Stage, id: string, app: string, stack: string, layer?: string) {
//     super(scope, id, 'OpsWorks', { minInputs: 1, maxInputs: 1, minOutputs: 0, maxOutputs: 0 }, {
//       Stack: stack,
//       App: app,
//       Layer: layer,
//     });
//   }
// }
// export class ECSDeploy extends DeployAction {
//   constructor(scope: Stage, id: string, clusterName: string, serviceName: string, fileName?: string) {
//     super(scope, id, 'ECS', { minInputs: 1, maxInputs: 1, minOutputs: 0, maxOutputs: 0 }, {
//       ClusterName: clusterName,
//       ServiceName: serviceName,
//       FileName: fileName,
//     });
//   }
// }
//# sourceMappingURL=data:application/json;base64,