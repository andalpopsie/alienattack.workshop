import events = require('@aws-cdk/aws-events');
import iam = require('@aws-cdk/aws-iam');
import cdk = require('@aws-cdk/cdk');
import { Artifact } from './artifact';
export declare enum ActionCategory {
    Source = "Source",
    Build = "Build",
    Test = "Test",
    Approval = "Approval",
    Deploy = "Deploy",
    Invoke = "Invoke"
}
/**
 * Specifies the constraints on the number of input and output
 * artifacts an action can have.
 *
 * The constraints for each action type are documented on the
 * {@link https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html Pipeline Structure Reference} page.
 */
export interface ActionArtifactBounds {
    readonly minInputs: number;
    readonly maxInputs: number;
    readonly minOutputs: number;
    readonly maxOutputs: number;
}
export declare function defaultBounds(): ActionArtifactBounds;
/**
 * The abstract view of an AWS CodePipeline as required and used by Actions.
 * It extends {@link events.IEventRuleTarget},
 * so this interface can be used as a Target for CloudWatch Events.
 */
export interface IPipeline extends cdk.IConstruct, events.IEventRuleTarget {
    /**
     * The name of the Pipeline.
     */
    readonly pipelineName: string;
    /**
     * The ARN of the Pipeline.
     */
    readonly pipelineArn: string;
    /**
     * The service Role of the Pipeline.
     */
    readonly role: iam.Role;
    /**
     * Grants read permissions to the Pipeline's S3 Bucket to the given Identity.
     *
     * @param identity the IAM Identity to grant the permissions to
     */
    grantBucketRead(identity?: iam.IPrincipal): void;
    /**
     * Grants read & write permissions to the Pipeline's S3 Bucket to the given Identity.
     *
     * @param identity the IAM Identity to grant the permissions to
     */
    grantBucketReadWrite(identity?: iam.IPrincipal): void;
}
/**
 * The abstract interface of a Pipeline Stage that is used by Actions.
 */
export interface IStage {
    /**
     * The physical, human-readable name of this Pipeline Stage.
     */
    readonly stageName: string;
    /**
     * The Pipeline this Stage belongs to.
     */
    readonly pipeline: IPipeline;
    addAction(action: Action): void;
    onStateChange(name: string, target?: events.IEventRuleTarget, options?: events.EventRuleProps): events.EventRule;
}
/**
 * Common properties shared by all Actions.
 */
export interface CommonActionProps {
    /**
     * The physical, human-readable name of the Action.
     * Not that Action names must be unique within a single Stage.
     */
    actionName: string;
    /**
     * The runOrder property for this Action.
     * RunOrder determines the relative order in which multiple Actions in the same Stage execute.
     *
     * @default 1
     * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html
     */
    runOrder?: number;
}
/**
 * Construction properties of the low-level {@link Action Action class}.
 */
export interface ActionProps extends CommonActionProps {
    category: ActionCategory;
    provider: string;
    /**
     * The region this Action resides in.
     *
     * @default the Action resides in the same region as the Pipeline
     */
    region?: string;
    /**
     * The service role that is assumed during execution of action.
     * This role is not mandatory, however more advanced configuration
     * may require specifying it.
     *
     * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codepipeline-pipeline-stages-actions.html
     */
    role?: iam.IRole;
    artifactBounds: ActionArtifactBounds;
    configuration?: any;
    version?: string;
    owner?: string;
}
/**
 * Low-level class for generic CodePipeline Actions.
 * It is recommended that concrete types are used instead, such as {@link codecommit.PipelineSourceAction} or
 * {@link codebuild.PipelineBuildAction}.
 */
export declare abstract class Action {
    /**
     * The category of the action.
     * The category defines which action type the owner
     * (the entity that performs the action) performs.
     */
    readonly category: ActionCategory;
    /**
     * The service provider that the action calls.
     */
    readonly provider: string;
    /**
     * The AWS region the given Action resides in.
     * Note that a cross-region Pipeline requires replication buckets to function correctly.
     * You can provide their names with the {@link PipelineProps#crossRegionReplicationBuckets} property.
     * If you don't, the CodePipeline Construct will create new Stacks in your CDK app containing those buckets,
     * that you will need to `cdk deploy` before deploying the main, Pipeline-containing Stack.
     *
     * @default the Action resides in the same region as the Pipeline
     */
    readonly region?: string;
    /**
     * The action's configuration. These are key-value pairs that specify input values for an action.
     * For more information, see the AWS CodePipeline User Guide.
     *
     * http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements
     */
    readonly configuration?: any;
    /**
     * The service role that is assumed during execution of action.
     * This role is not mandatory, however more advanced configuration
     * may require specifying it.
     *
     * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codepipeline-pipeline-stages-actions.html
     */
    readonly role?: iam.IRole;
    /**
     * The order in which AWS CodePipeline runs this action.
     * For more information, see the AWS CodePipeline User Guide.
     *
     * https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements
     */
    readonly runOrder: number;
    readonly owner: string;
    readonly version: string;
    readonly actionName: string;
    private readonly _actionInputArtifacts;
    private readonly _actionOutputArtifacts;
    private readonly artifactBounds;
    private _stage?;
    private _scope?;
    constructor(props: ActionProps);
    onStateChange(name: string, target?: events.IEventRuleTarget, options?: events.EventRuleProps): events.EventRule;
    readonly _inputArtifacts: Artifact[];
    readonly _outputArtifacts: Artifact[];
    protected validate(): string[];
    protected addOutputArtifact(name: string): Artifact;
    protected addInputArtifact(artifact: Artifact): Action;
    /**
     * Retrieves the Construct scope of this Action.
     * Only available after the Action has been added to a Stage,
     * and that Stage to a Pipeline.
     */
    protected readonly scope: cdk.Construct;
    /**
     * The method called when an Action is attached to a Pipeline.
     * This method is guaranteed to be called only once for each Action instance.
     *
     * @param stage the stage this action has been added to
     *   (includes a reference to the pipeline as well)
     * @param scope the scope construct for this action,
     *   can be used by the action implementation to create any resources it needs to work correctly
     */
    protected abstract bind(stage: IStage, scope: cdk.Construct): void;
    private _attachActionToPipeline;
    private readonly stage;
}
