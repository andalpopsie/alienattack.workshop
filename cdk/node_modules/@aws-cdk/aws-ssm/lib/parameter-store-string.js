"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
/**
 * References a public value in AWS Systems Manager Parameter Store
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html
 */
class ParameterStoreString extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // We use a different inner construct depend on whether we want the latest
        // or a specific version.
        //
        // * Latest - generate a Parameter and reference that.
        // * Specific - use a Dynamic Reference.
        if (props.version === undefined) {
            // Construct/get a singleton parameter under the stack
            const param = new cdk.Parameter(this, 'Parameter', {
                type: 'AWS::SSM::Parameter::Value<String>',
                default: props.parameterName
            });
            this.stringValue = param.stringValue;
        }
        else {
            // Use a dynamic reference
            const dynRef = new cdk.DynamicReference(this, 'Reference', {
                service: cdk.DynamicReferenceService.Ssm,
                referenceKey: `${props.parameterName}:${props.version}`,
            });
            this.stringValue = dynRef.stringValue;
        }
    }
}
exports.ParameterStoreString = ParameterStoreString;
/**
 * References a secret value in AWS Systems Manager Parameter Store
 *
 * It is not possible to retrieve the "latest" value of a secret.
 * Use Secrets Manager if you need that ability.
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html
 */
class ParameterStoreSecureString extends cdk.DynamicReference {
    constructor(scope, id, props) {
        super(scope, id, {
            service: cdk.DynamicReferenceService.SsmSecure,
            referenceKey: `${props.parameterName}:${props.version}`,
        });
    }
}
exports.ParameterStoreSecureString = ParameterStoreSecureString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW1ldGVyLXN0b3JlLXN0cmluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBhcmFtZXRlci1zdG9yZS1zdHJpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBcUM7QUFtQnJDOzs7O0dBSUc7QUFDSCxNQUFhLG9CQUFxQixTQUFRLEdBQUcsQ0FBQyxTQUFTO0lBR3JELFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBZ0M7UUFDNUUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQiwwRUFBMEU7UUFDMUUseUJBQXlCO1FBQ3pCLEVBQUU7UUFDRixzREFBc0Q7UUFDdEQsd0NBQXdDO1FBQ3hDLElBQUksS0FBSyxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDL0Isc0RBQXNEO1lBQ3RELE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO2dCQUNqRCxJQUFJLEVBQUUsb0NBQW9DO2dCQUMxQyxPQUFPLEVBQUUsS0FBSyxDQUFDLGFBQWE7YUFDN0IsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO1NBQ3RDO2FBQU07WUFDTCwwQkFBMEI7WUFDMUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtnQkFDekQsT0FBTyxFQUFFLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHO2dCQUN4QyxZQUFZLEVBQUUsR0FBRyxLQUFLLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7YUFDeEQsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQztDQUNGO0FBM0JELG9EQTJCQztBQWlCRDs7Ozs7OztHQU9HO0FBQ0gsTUFBYSwwQkFBMkIsU0FBUSxHQUFHLENBQUMsZ0JBQWdCO0lBQ2xFLFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0M7UUFDbEYsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDZixPQUFPLEVBQUUsR0FBRyxDQUFDLHVCQUF1QixDQUFDLFNBQVM7WUFDOUMsWUFBWSxFQUFFLEdBQUcsS0FBSyxDQUFDLGFBQWEsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO1NBQ3hELENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQVBELGdFQU9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NkaycpO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGEgUGFyYW1ldGVyU3RvcmVWYWx1ZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBhcmFtZXRlclN0b3JlU3RyaW5nUHJvcHMge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlciBzdG9yZSB2YWx1ZVxuICAgKi9cbiAgcGFyYW1ldGVyTmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBudW1iZXIgb2YgdGhlIHZhbHVlIHlvdSB3aXNoIHRvIHJldHJpZXZlLlxuICAgKlxuICAgKiBAZGVmYXVsdCBUaGUgbGF0ZXN0IHZlcnNpb24gd2lsbCBiZSByZXRyaWV2ZWQuXG4gICAqL1xuICB2ZXJzaW9uPzogbnVtYmVyO1xufVxuXG4vKipcbiAqIFJlZmVyZW5jZXMgYSBwdWJsaWMgdmFsdWUgaW4gQVdTIFN5c3RlbXMgTWFuYWdlciBQYXJhbWV0ZXIgU3RvcmVcbiAqXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BV1NDbG91ZEZvcm1hdGlvbi9sYXRlc3QvVXNlckd1aWRlL2R5bmFtaWMtcmVmZXJlbmNlcy5odG1sXG4gKi9cbmV4cG9ydCBjbGFzcyBQYXJhbWV0ZXJTdG9yZVN0cmluZyBleHRlbmRzIGNkay5Db25zdHJ1Y3Qge1xuICBwdWJsaWMgcmVhZG9ubHkgc3RyaW5nVmFsdWU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihzY29wZTogY2RrLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFBhcmFtZXRlclN0b3JlU3RyaW5nUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgLy8gV2UgdXNlIGEgZGlmZmVyZW50IGlubmVyIGNvbnN0cnVjdCBkZXBlbmQgb24gd2hldGhlciB3ZSB3YW50IHRoZSBsYXRlc3RcbiAgICAvLyBvciBhIHNwZWNpZmljIHZlcnNpb24uXG4gICAgLy9cbiAgICAvLyAqIExhdGVzdCAtIGdlbmVyYXRlIGEgUGFyYW1ldGVyIGFuZCByZWZlcmVuY2UgdGhhdC5cbiAgICAvLyAqIFNwZWNpZmljIC0gdXNlIGEgRHluYW1pYyBSZWZlcmVuY2UuXG4gICAgaWYgKHByb3BzLnZlcnNpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQ29uc3RydWN0L2dldCBhIHNpbmdsZXRvbiBwYXJhbWV0ZXIgdW5kZXIgdGhlIHN0YWNrXG4gICAgICBjb25zdCBwYXJhbSA9IG5ldyBjZGsuUGFyYW1ldGVyKHRoaXMsICdQYXJhbWV0ZXInLCB7XG4gICAgICAgIHR5cGU6ICdBV1M6OlNTTTo6UGFyYW1ldGVyOjpWYWx1ZTxTdHJpbmc+JyxcbiAgICAgICAgZGVmYXVsdDogcHJvcHMucGFyYW1ldGVyTmFtZVxuICAgICAgfSk7XG4gICAgICB0aGlzLnN0cmluZ1ZhbHVlID0gcGFyYW0uc3RyaW5nVmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVzZSBhIGR5bmFtaWMgcmVmZXJlbmNlXG4gICAgICBjb25zdCBkeW5SZWYgPSBuZXcgY2RrLkR5bmFtaWNSZWZlcmVuY2UodGhpcywgJ1JlZmVyZW5jZScsIHtcbiAgICAgICAgc2VydmljZTogY2RrLkR5bmFtaWNSZWZlcmVuY2VTZXJ2aWNlLlNzbSxcbiAgICAgICAgcmVmZXJlbmNlS2V5OiBgJHtwcm9wcy5wYXJhbWV0ZXJOYW1lfToke3Byb3BzLnZlcnNpb259YCxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zdHJpbmdWYWx1ZSA9IGR5blJlZi5zdHJpbmdWYWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBhIFBhcmFtZXRlclN0b3JlVmFsdWVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXJhbWV0ZXJTdG9yZVNlY3VyZVN0cmluZ1Byb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIgc3RvcmUgc2VjdXJlIHN0cmluZyB2YWx1ZVxuICAgKi9cbiAgcGFyYW1ldGVyTmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBudW1iZXIgb2YgdGhlIHZhbHVlIHlvdSB3aXNoIHRvIHJldHJpZXZlLlxuICAgKi9cbiAgdmVyc2lvbjogbnVtYmVyO1xufVxuXG4vKipcbiAqIFJlZmVyZW5jZXMgYSBzZWNyZXQgdmFsdWUgaW4gQVdTIFN5c3RlbXMgTWFuYWdlciBQYXJhbWV0ZXIgU3RvcmVcbiAqXG4gKiBJdCBpcyBub3QgcG9zc2libGUgdG8gcmV0cmlldmUgdGhlIFwibGF0ZXN0XCIgdmFsdWUgb2YgYSBzZWNyZXQuXG4gKiBVc2UgU2VjcmV0cyBNYW5hZ2VyIGlmIHlvdSBuZWVkIHRoYXQgYWJpbGl0eS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BV1NDbG91ZEZvcm1hdGlvbi9sYXRlc3QvVXNlckd1aWRlL2R5bmFtaWMtcmVmZXJlbmNlcy5odG1sXG4gKi9cbmV4cG9ydCBjbGFzcyBQYXJhbWV0ZXJTdG9yZVNlY3VyZVN0cmluZyBleHRlbmRzIGNkay5EeW5hbWljUmVmZXJlbmNlIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBQYXJhbWV0ZXJTdG9yZVNlY3VyZVN0cmluZ1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICBzZXJ2aWNlOiBjZGsuRHluYW1pY1JlZmVyZW5jZVNlcnZpY2UuU3NtU2VjdXJlLFxuICAgICAgcmVmZXJlbmNlS2V5OiBgJHtwcm9wcy5wYXJhbWV0ZXJOYW1lfToke3Byb3BzLnZlcnNpb259YCxcbiAgICB9KTtcbiAgfVxufVxuIl19