"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const ssm = require("./ssm.generated");
/**
 * Basic features shared across all types of SSM Parameters.
 */
class ParameterBase extends cdk.Construct {
    constructor(scope, id, _props) {
        super(scope, id);
    }
    get parameterArn() {
        return this.node.stack.formatArn({
            service: 'ssm',
            resource: 'parameter',
            sep: '',
            resourceName: this.parameterName,
        });
    }
    grantRead(grantee) {
        grantee.addToPolicy(new iam.PolicyStatement()
            .allow()
            .addActions('ssm:DescribeParameters', 'ssm:GetParameter', 'ssm:GetParameterHistory')
            .addResource(this.parameterArn));
    }
    grantWrite(grantee) {
        grantee.addToPolicy(new iam.PolicyStatement()
            .allow()
            .addAction('ssm:PutParameter')
            .addResource(this.parameterArn));
    }
}
exports.ParameterBase = ParameterBase;
/**
 * Creates a new String SSM Parameter.
 */
class StringParameter extends ParameterBase {
    constructor(scope, id, props) {
        super(scope, id, props);
        if (props.allowedPattern) {
            _assertValidValue(props.stringValue, props.allowedPattern);
        }
        const resource = new ssm.CfnParameter(this, 'Resource', {
            allowedPattern: props.allowedPattern,
            description: props.description,
            name: props.name,
            type: 'String',
            value: props.stringValue,
        });
        this.parameterName = resource.parameterName;
        this.parameterType = resource.parameterType;
        this.stringValue = resource.parameterValue;
    }
}
exports.StringParameter = StringParameter;
/**
 * Creates a new StringList SSM Parameter.
 */
class StringListParameter extends ParameterBase {
    constructor(scope, id, props) {
        super(scope, id, props);
        if (props.stringListValue.find(str => !cdk.unresolved(str) && str.indexOf(',') !== -1)) {
            throw new Error('Values of a StringList SSM Parameter cannot contain the \',\' character. Use a string parameter instead.');
        }
        if (props.allowedPattern && !cdk.unresolved(props.stringListValue)) {
            props.stringListValue.forEach(str => _assertValidValue(str, props.allowedPattern));
        }
        const resource = new ssm.CfnParameter(this, 'Resource', {
            allowedPattern: props.allowedPattern,
            description: props.description,
            name: props.name,
            type: 'StringList',
            value: props.stringListValue.join(','),
        });
        this.parameterName = resource.parameterName;
        this.parameterType = resource.parameterType;
        this.stringListValue = cdk.Fn.split(',', resource.parameterValue);
    }
}
exports.StringListParameter = StringListParameter;
/**
 * Validates whether a supplied value conforms to the allowedPattern, granted neither is an unresolved token.
 *
 * @param value          the value to be validated.
 * @param allowedPattern the regular expression to use for validation.
 *
 * @throws if the ``value`` does not conform to the ``allowedPattern`` and neither is an unresolved token (per
 *         ``cdk.unresolved``).
 */
function _assertValidValue(value, allowedPattern) {
    if (cdk.unresolved(value) || cdk.unresolved(allowedPattern)) {
        // Unable to perform validations against unresolved tokens
        return;
    }
    if (!new RegExp(allowedPattern).test(value)) {
        throw new Error(`The supplied value (${value}) does not match the specified allowedPattern (${allowedPattern})`);
    }
}
//# sourceMappingURL=data:application/json;base64,