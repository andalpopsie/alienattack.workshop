"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const ssm = require("../lib");
class CreatingStack extends cdk.Stack {
    constructor(scope, id) {
        super(scope, id);
        new ssm.StringParameter(this, 'String', {
            name: '/My/Public/Parameter',
            stringValue: 'abcdef'
        });
    }
}
class UsingStack extends cdk.Stack {
    constructor(scope, id) {
        super(scope, id);
        /// !show
        // Retrieve the latest value of the non-secret parameter
        // with name "/My/String/Parameter".
        const stringValue = new ssm.ParameterStoreString(this, 'MyValue', {
            parameterName: '/My/Public/Parameter',
        }).stringValue;
        // Retrieve a specific version of the secret (SecureString) parameter.
        // 'version' is always required.
        const secretValue = new ssm.ParameterStoreSecureString(this, 'SecretValue', {
            parameterName: '/My/Secret/Parameter',
            version: 5
        }).stringValue;
        /// !hide
        new cdk.Output(this, 'TheValue', { value: stringValue });
        // Cannot be provisioned so cannot be actually used
        Array.isArray(secretValue);
    }
}
const app = new cdk.App();
const creating = new CreatingStack(app, 'sspms-creating');
const using = new UsingStack(app, 'sspms-using');
using.addDependency(creating);
app.run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucGFyYW1ldGVyLXN0b3JlLXN0cmluZy5saXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5wYXJhbWV0ZXItc3RvcmUtc3RyaW5nLmxpdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9DQUFxQztBQUNyQyw4QkFBK0I7QUFFL0IsTUFBTSxhQUFjLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDbkMsWUFBWSxLQUFjLEVBQUUsRUFBVTtRQUNwQyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO1lBQ3RDLElBQUksRUFBRSxzQkFBc0I7WUFDNUIsV0FBVyxFQUFFLFFBQVE7U0FDdEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFXLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDaEMsWUFBWSxLQUFjLEVBQUUsRUFBVTtRQUNwQyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLFNBQVM7UUFDVCx3REFBd0Q7UUFDeEQsb0NBQW9DO1FBQ3BDLE1BQU0sV0FBVyxHQUFHLElBQUksR0FBRyxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxTQUFTLEVBQUU7WUFDaEUsYUFBYSxFQUFFLHNCQUFzQjtTQUV0QyxDQUFDLENBQUMsV0FBVyxDQUFDO1FBRWYsc0VBQXNFO1FBQ3RFLGdDQUFnQztRQUNoQyxNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFO1lBQzFFLGFBQWEsRUFBRSxzQkFBc0I7WUFDckMsT0FBTyxFQUFFLENBQUM7U0FDWCxDQUFDLENBQUMsV0FBVyxDQUFDO1FBQ2YsU0FBUztRQUVULElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFFekQsbURBQW1EO1FBQ25ELEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDN0IsQ0FBQztDQUNGO0FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxhQUFhLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFDMUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxVQUFVLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ2pELEtBQUssQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFOUIsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NkaycpO1xuaW1wb3J0IHNzbSA9IHJlcXVpcmUoJy4uL2xpYicpO1xuXG5jbGFzcyBDcmVhdGluZ1N0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5BcHAsIGlkOiBzdHJpbmcpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgbmV3IHNzbS5TdHJpbmdQYXJhbWV0ZXIodGhpcywgJ1N0cmluZycsIHtcbiAgICAgIG5hbWU6ICcvTXkvUHVibGljL1BhcmFtZXRlcicsXG4gICAgICBzdHJpbmdWYWx1ZTogJ2FiY2RlZidcbiAgICB9KTtcbiAgfVxufVxuXG5jbGFzcyBVc2luZ1N0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5BcHAsIGlkOiBzdHJpbmcpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgLy8vICFzaG93XG4gICAgLy8gUmV0cmlldmUgdGhlIGxhdGVzdCB2YWx1ZSBvZiB0aGUgbm9uLXNlY3JldCBwYXJhbWV0ZXJcbiAgICAvLyB3aXRoIG5hbWUgXCIvTXkvU3RyaW5nL1BhcmFtZXRlclwiLlxuICAgIGNvbnN0IHN0cmluZ1ZhbHVlID0gbmV3IHNzbS5QYXJhbWV0ZXJTdG9yZVN0cmluZyh0aGlzLCAnTXlWYWx1ZScsIHtcbiAgICAgIHBhcmFtZXRlck5hbWU6ICcvTXkvUHVibGljL1BhcmFtZXRlcicsXG4gICAgICAvLyAndmVyc2lvbicgY2FuIGJlIHNwZWNpZmllZCBidXQgaXMgb3B0aW9uYWwuXG4gICAgfSkuc3RyaW5nVmFsdWU7XG5cbiAgICAvLyBSZXRyaWV2ZSBhIHNwZWNpZmljIHZlcnNpb24gb2YgdGhlIHNlY3JldCAoU2VjdXJlU3RyaW5nKSBwYXJhbWV0ZXIuXG4gICAgLy8gJ3ZlcnNpb24nIGlzIGFsd2F5cyByZXF1aXJlZC5cbiAgICBjb25zdCBzZWNyZXRWYWx1ZSA9IG5ldyBzc20uUGFyYW1ldGVyU3RvcmVTZWN1cmVTdHJpbmcodGhpcywgJ1NlY3JldFZhbHVlJywge1xuICAgICAgcGFyYW1ldGVyTmFtZTogJy9NeS9TZWNyZXQvUGFyYW1ldGVyJyxcbiAgICAgIHZlcnNpb246IDVcbiAgICB9KS5zdHJpbmdWYWx1ZTtcbiAgICAvLy8gIWhpZGVcblxuICAgIG5ldyBjZGsuT3V0cHV0KHRoaXMsICdUaGVWYWx1ZScsIHsgdmFsdWU6IHN0cmluZ1ZhbHVlIH0pO1xuXG4gICAgLy8gQ2Fubm90IGJlIHByb3Zpc2lvbmVkIHNvIGNhbm5vdCBiZSBhY3R1YWxseSB1c2VkXG4gICAgQXJyYXkuaXNBcnJheShzZWNyZXRWYWx1ZSk7XG4gIH1cbn1cblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY29uc3QgY3JlYXRpbmcgPSBuZXcgQ3JlYXRpbmdTdGFjayhhcHAsICdzc3Btcy1jcmVhdGluZycpO1xuY29uc3QgdXNpbmcgPSBuZXcgVXNpbmdTdGFjayhhcHAsICdzc3Btcy11c2luZycpO1xudXNpbmcuYWRkRGVwZW5kZW5jeShjcmVhdGluZyk7XG5cbmFwcC5ydW4oKTsiXX0=