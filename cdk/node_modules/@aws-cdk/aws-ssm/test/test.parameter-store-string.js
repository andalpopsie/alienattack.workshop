"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/cdk");
const ssm = require("../lib");
module.exports = {
    'can reference SSMPS string - specific version'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const ref = new ssm.ParameterStoreString(stack, 'Ref', {
            parameterName: '/some/key',
            version: 123
        });
        // THEN
        test.equal(ref.node.resolve(ref.stringValue), '{{resolve:ssm:/some/key:123}}');
        test.done();
    },
    'can reference SSMPS string - latest version'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const ref = new ssm.ParameterStoreString(stack, 'Ref', {
            parameterName: '/some/key',
        });
        // THEN
        assert_1.expect(stack).toMatch({
            Parameters: {
                RefParameter407AF5C8: {
                    Type: "AWS::SSM::Parameter::Value<String>",
                    Default: "/some/key"
                }
            }
        });
        test.deepEqual(ref.node.resolve(ref.stringValue), { Ref: 'RefParameter407AF5C8' });
        test.done();
    },
    'can reference SSMPS secure string'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const ref = new ssm.ParameterStoreSecureString(stack, 'Ref', {
            parameterName: '/some/key',
            version: 123
        });
        // THEN
        test.equal(ref.node.resolve(ref.stringValue), '{{resolve:ssm-secure:/some/key:123}}');
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5wYXJhbWV0ZXItc3RvcmUtc3RyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5wYXJhbWV0ZXItc3RvcmUtc3RyaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0Q0FBeUM7QUFDekMsb0NBQXFDO0FBRXJDLDhCQUErQjtBQUUvQixpQkFBUztJQUNQLCtDQUErQyxDQUFDLElBQVU7UUFDeEQsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTlCLE9BQU87UUFDUCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO1lBQ3JELGFBQWEsRUFBRSxXQUFXO1lBQzFCLE9BQU8sRUFBRSxHQUFHO1NBQ2IsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLCtCQUErQixDQUFDLENBQUM7UUFFL0UsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELDZDQUE2QyxDQUFDLElBQVU7UUFDdEQsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTlCLE9BQU87UUFDUCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO1lBQ3JELGFBQWEsRUFBRSxXQUFXO1NBQzNCLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ3BCLFVBQVUsRUFBRTtnQkFDVixvQkFBb0IsRUFBRTtvQkFDcEIsSUFBSSxFQUFFLG9DQUFvQztvQkFDMUMsT0FBTyxFQUFFLFdBQVc7aUJBQ3JCO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxzQkFBc0IsRUFBRSxDQUFDLENBQUM7UUFFbkYsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELG1DQUFtQyxDQUFDLElBQVU7UUFDNUMsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTlCLE9BQU87UUFDUCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO1lBQzNELGFBQWEsRUFBRSxXQUFXO1lBQzFCLE9BQU8sRUFBRSxHQUFHO1NBQ2IsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLHNDQUFzQyxDQUFDLENBQUM7UUFFdEYsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlY3QgfSBmcm9tICdAYXdzLWNkay9hc3NlcnQnO1xuaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NkaycpO1xuaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCBzc20gPSByZXF1aXJlKCcuLi9saWInKTtcblxuZXhwb3J0ID0ge1xuICAnY2FuIHJlZmVyZW5jZSBTU01QUyBzdHJpbmcgLSBzcGVjaWZpYyB2ZXJzaW9uJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCByZWYgPSBuZXcgc3NtLlBhcmFtZXRlclN0b3JlU3RyaW5nKHN0YWNrLCAnUmVmJywge1xuICAgICAgcGFyYW1ldGVyTmFtZTogJy9zb21lL2tleScsXG4gICAgICB2ZXJzaW9uOiAxMjNcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICB0ZXN0LmVxdWFsKHJlZi5ub2RlLnJlc29sdmUocmVmLnN0cmluZ1ZhbHVlKSwgJ3t7cmVzb2x2ZTpzc206L3NvbWUva2V5OjEyM319Jyk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnY2FuIHJlZmVyZW5jZSBTU01QUyBzdHJpbmcgLSBsYXRlc3QgdmVyc2lvbicodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgcmVmID0gbmV3IHNzbS5QYXJhbWV0ZXJTdG9yZVN0cmluZyhzdGFjaywgJ1JlZicsIHtcbiAgICAgIHBhcmFtZXRlck5hbWU6ICcvc29tZS9rZXknLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChzdGFjaykudG9NYXRjaCh7XG4gICAgICBQYXJhbWV0ZXJzOiB7XG4gICAgICAgIFJlZlBhcmFtZXRlcjQwN0FGNUM4OiB7XG4gICAgICAgICAgVHlwZTogXCJBV1M6OlNTTTo6UGFyYW1ldGVyOjpWYWx1ZTxTdHJpbmc+XCIsXG4gICAgICAgICAgRGVmYXVsdDogXCIvc29tZS9rZXlcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0ZXN0LmRlZXBFcXVhbChyZWYubm9kZS5yZXNvbHZlKHJlZi5zdHJpbmdWYWx1ZSksIHsgUmVmOiAnUmVmUGFyYW1ldGVyNDA3QUY1QzgnIH0pO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2NhbiByZWZlcmVuY2UgU1NNUFMgc2VjdXJlIHN0cmluZycodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgcmVmID0gbmV3IHNzbS5QYXJhbWV0ZXJTdG9yZVNlY3VyZVN0cmluZyhzdGFjaywgJ1JlZicsIHtcbiAgICAgIHBhcmFtZXRlck5hbWU6ICcvc29tZS9rZXknLFxuICAgICAgdmVyc2lvbjogMTIzXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgdGVzdC5lcXVhbChyZWYubm9kZS5yZXNvbHZlKHJlZi5zdHJpbmdWYWx1ZSksICd7e3Jlc29sdmU6c3NtLXNlY3VyZTovc29tZS9rZXk6MTIzfX0nKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxufTsiXX0=