"use strict";
const lib_1 = require("../../lib");
module.exports = {
    'parameters can be used and referenced using param.ref'(test) {
        const stack = new lib_1.Stack();
        const child = new lib_1.Construct(stack, 'Child');
        const param = new lib_1.Parameter(child, 'MyParam', {
            default: 10,
            type: 'Integer',
            description: 'My first parameter'
        });
        new lib_1.Resource(stack, 'Resource', { type: 'Type', properties: { ReferenceToParam: param.ref } });
        test.deepEqual(stack.toCloudFormation(), {
            Parameters: {
                ChildMyParam3161BF5D: {
                    Default: 10,
                    Type: 'Integer',
                    Description: 'My first parameter'
                }
            },
            Resources: {
                Resource: {
                    Type: 'Type',
                    Properties: { ReferenceToParam: { Ref: 'ChildMyParam3161BF5D' } }
                }
            }
        });
        test.done();
    },
    'parameters are tokens, so they can be assigned without .ref and their Ref will be taken'(test) {
        const stack = new lib_1.Stack();
        const param = new lib_1.Parameter(stack, 'MyParam', { type: 'String' });
        test.deepEqual(stack.node.resolve(param), { Ref: 'MyParam' });
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5wYXJhbWV0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LnBhcmFtZXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsbUNBQWtFO0FBRWxFLGlCQUFTO0lBQ1AsdURBQXVELENBQUMsSUFBVTtRQUNoRSxNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssRUFBRSxDQUFDO1FBRTFCLE1BQU0sS0FBSyxHQUFHLElBQUksZUFBUyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM1QyxNQUFNLEtBQUssR0FBRyxJQUFJLGVBQVMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO1lBQzVDLE9BQU8sRUFBRSxFQUFFO1lBQ1gsSUFBSSxFQUFFLFNBQVM7WUFDZixXQUFXLEVBQUUsb0JBQW9CO1NBQ2xDLENBQUMsQ0FBQztRQUVILElBQUksY0FBUSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxFQUFFLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFL0YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtZQUN2QyxVQUFVLEVBQUU7Z0JBQ1Ysb0JBQW9CLEVBQUU7b0JBQ3BCLE9BQU8sRUFBRSxFQUFFO29CQUNYLElBQUksRUFBRSxTQUFTO29CQUNmLFdBQVcsRUFBRSxvQkFBb0I7aUJBQUU7YUFBRTtZQUN6QyxTQUFTLEVBQUU7Z0JBQ1QsUUFBUSxFQUFFO29CQUNSLElBQUksRUFBRSxNQUFNO29CQUNaLFVBQVUsRUFBRSxFQUFFLGdCQUFnQixFQUFFLEVBQUUsR0FBRyxFQUFFLHNCQUFzQixFQUFFLEVBQUU7aUJBQUU7YUFBRTtTQUFFLENBQUMsQ0FBQztRQUUvRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQseUZBQXlGLENBQUMsSUFBVTtRQUNsRyxNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksZUFBUyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUVsRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0IH0gZnJvbSAnbm9kZXVuaXQnO1xuaW1wb3J0IHsgQ29uc3RydWN0LCBQYXJhbWV0ZXIsIFJlc291cmNlLCBTdGFjayB9IGZyb20gJy4uLy4uL2xpYic7XG5cbmV4cG9ydCA9IHtcbiAgJ3BhcmFtZXRlcnMgY2FuIGJlIHVzZWQgYW5kIHJlZmVyZW5jZWQgdXNpbmcgcGFyYW0ucmVmJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcblxuICAgIGNvbnN0IGNoaWxkID0gbmV3IENvbnN0cnVjdChzdGFjaywgJ0NoaWxkJyk7XG4gICAgY29uc3QgcGFyYW0gPSBuZXcgUGFyYW1ldGVyKGNoaWxkLCAnTXlQYXJhbScsIHtcbiAgICAgIGRlZmF1bHQ6IDEwLFxuICAgICAgdHlwZTogJ0ludGVnZXInLFxuICAgICAgZGVzY3JpcHRpb246ICdNeSBmaXJzdCBwYXJhbWV0ZXInXG4gICAgfSk7XG5cbiAgICBuZXcgUmVzb3VyY2Uoc3RhY2ssICdSZXNvdXJjZScsIHsgdHlwZTogJ1R5cGUnLCBwcm9wZXJ0aWVzOiB7IFJlZmVyZW5jZVRvUGFyYW06IHBhcmFtLnJlZiB9IH0pO1xuXG4gICAgdGVzdC5kZWVwRXF1YWwoc3RhY2sudG9DbG91ZEZvcm1hdGlvbigpLCB7XG4gICAgICBQYXJhbWV0ZXJzOiB7XG4gICAgICAgIENoaWxkTXlQYXJhbTMxNjFCRjVEOiB7XG4gICAgICAgICAgRGVmYXVsdDogMTAsXG4gICAgICAgICAgVHlwZTogJ0ludGVnZXInLFxuICAgICAgICAgIERlc2NyaXB0aW9uOiAnTXkgZmlyc3QgcGFyYW1ldGVyJyB9IH0sXG4gICAgICBSZXNvdXJjZXM6IHtcbiAgICAgICAgUmVzb3VyY2U6IHtcbiAgICAgICAgICBUeXBlOiAnVHlwZScsXG4gICAgICAgICAgUHJvcGVydGllczogeyBSZWZlcmVuY2VUb1BhcmFtOiB7IFJlZjogJ0NoaWxkTXlQYXJhbTMxNjFCRjVEJyB9IH0gfSB9IH0pO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ3BhcmFtZXRlcnMgYXJlIHRva2Vucywgc28gdGhleSBjYW4gYmUgYXNzaWduZWQgd2l0aG91dCAucmVmIGFuZCB0aGVpciBSZWYgd2lsbCBiZSB0YWtlbicodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgcGFyYW0gPSBuZXcgUGFyYW1ldGVyKHN0YWNrLCAnTXlQYXJhbScsIHsgdHlwZTogJ1N0cmluZycgfSk7XG5cbiAgICB0ZXN0LmRlZXBFcXVhbChzdGFjay5ub2RlLnJlc29sdmUocGFyYW0pLCB7IFJlZjogJ015UGFyYW0nIH0pO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9XG59OyJdfQ==