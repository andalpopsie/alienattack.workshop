"use strict";
const cdk = require("../../lib");
module.exports = {
    'chain conditions'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const param = new cdk.Parameter(stack, 'Param1', { type: 'String' });
        const cond1 = new cdk.Condition(stack, 'Condition1', { expression: cdk.Fn.conditionEquals("a", "b") });
        const cond2 = new cdk.Condition(stack, 'Condition2', { expression: cdk.Fn.conditionContains(["a", "b", "c"], "c") });
        const cond3 = new cdk.Condition(stack, 'Condition3', { expression: cdk.Fn.conditionEquals(param, "hello") });
        // WHEN
        new cdk.Condition(stack, 'Condition4', {
            expression: cdk.Fn.conditionOr(cond1, cond2, cdk.Fn.conditionNot(cond3))
        });
        // THEN
        test.deepEqual(stack.toCloudFormation(), {
            Parameters: { Param1: { Type: 'String' } },
            Conditions: {
                Condition1: { 'Fn::Equals': ['a', 'b'] },
                Condition2: { 'Fn::Contains': [['a', 'b', 'c'], 'c'] },
                Condition3: { 'Fn::Equals': [{ Ref: 'Param1' }, 'hello'] },
                Condition4: { 'Fn::Or': [
                        { Condition: 'Condition1' },
                        { Condition: 'Condition2' },
                        { 'Fn::Not': [{ Condition: 'Condition3' }] }
                    ] }
            }
        });
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5jb25kaXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LmNvbmRpdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsaUNBQWtDO0FBRWxDLGlCQUFTO0lBQ1Asa0JBQWtCLENBQUMsSUFBVTtRQUMzQixRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNyRSxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLFVBQVUsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZHLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLEVBQUUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN2SCxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLFVBQVUsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTdHLE9BQU87UUFDUCxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtZQUNyQyxVQUFVLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6RSxDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtZQUN2QyxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUU7WUFDMUMsVUFBVSxFQUFFO2dCQUNWLFVBQVUsRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsRUFBRTtnQkFDMUMsVUFBVSxFQUFFLEVBQUUsY0FBYyxFQUFFLENBQUUsQ0FBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBRSxFQUFFLEdBQUcsQ0FBRSxFQUFFO2dCQUMxRCxVQUFVLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBRSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLENBQUUsRUFBRTtnQkFDNUQsVUFBVSxFQUFFLEVBQUUsUUFBUSxFQUFFO3dCQUN0QixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUU7d0JBQzNCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRTt3QkFDM0IsRUFBRSxTQUFTLEVBQUUsQ0FBRSxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsQ0FBRSxFQUFFO3FCQUFFLEVBQUU7YUFBRTtTQUFFLENBQUMsQ0FBQztRQUU5RCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnLi4vLi4vbGliJyk7XG5cbmV4cG9ydCA9IHtcbiAgJ2NoYWluIGNvbmRpdGlvbnMnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgIGNvbnN0IHBhcmFtID0gbmV3IGNkay5QYXJhbWV0ZXIoc3RhY2ssICdQYXJhbTEnLCB7IHR5cGU6ICdTdHJpbmcnIH0pO1xuICAgIGNvbnN0IGNvbmQxID0gbmV3IGNkay5Db25kaXRpb24oc3RhY2ssICdDb25kaXRpb24xJywgeyBleHByZXNzaW9uOiBjZGsuRm4uY29uZGl0aW9uRXF1YWxzKFwiYVwiLCBcImJcIikgfSk7XG4gICAgY29uc3QgY29uZDIgPSBuZXcgY2RrLkNvbmRpdGlvbihzdGFjaywgJ0NvbmRpdGlvbjInLCB7IGV4cHJlc3Npb246IGNkay5Gbi5jb25kaXRpb25Db250YWlucyhbIFwiYVwiLCBcImJcIiwgXCJjXCIgXSwgXCJjXCIpIH0pO1xuICAgIGNvbnN0IGNvbmQzID0gbmV3IGNkay5Db25kaXRpb24oc3RhY2ssICdDb25kaXRpb24zJywgeyBleHByZXNzaW9uOiBjZGsuRm4uY29uZGl0aW9uRXF1YWxzKHBhcmFtLCBcImhlbGxvXCIpIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIG5ldyBjZGsuQ29uZGl0aW9uKHN0YWNrLCAnQ29uZGl0aW9uNCcsIHtcbiAgICAgIGV4cHJlc3Npb246IGNkay5Gbi5jb25kaXRpb25Pcihjb25kMSwgY29uZDIsIGNkay5Gbi5jb25kaXRpb25Ob3QoY29uZDMpKVxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIHRlc3QuZGVlcEVxdWFsKHN0YWNrLnRvQ2xvdWRGb3JtYXRpb24oKSwge1xuICAgICAgUGFyYW1ldGVyczogeyBQYXJhbTE6IHsgVHlwZTogJ1N0cmluZycgfSB9LFxuICAgICAgQ29uZGl0aW9uczoge1xuICAgICAgICBDb25kaXRpb24xOiB7ICdGbjo6RXF1YWxzJzogWyAnYScsICdiJyBdIH0sXG4gICAgICAgIENvbmRpdGlvbjI6IHsgJ0ZuOjpDb250YWlucyc6IFsgWyAnYScsICdiJywgJ2MnIF0sICdjJyBdIH0sXG4gICAgICAgIENvbmRpdGlvbjM6IHsgJ0ZuOjpFcXVhbHMnOiBbIHsgUmVmOiAnUGFyYW0xJyB9LCAnaGVsbG8nIF0gfSxcbiAgICAgICAgQ29uZGl0aW9uNDogeyAnRm46Ok9yJzogW1xuICAgICAgICAgIHsgQ29uZGl0aW9uOiAnQ29uZGl0aW9uMScgfSxcbiAgICAgICAgICB7IENvbmRpdGlvbjogJ0NvbmRpdGlvbjInIH0sXG4gICAgICAgICAgeyAnRm46Ok5vdCc6IFsgeyBDb25kaXRpb246ICdDb25kaXRpb24zJyB9IF0gfSBdIH0gfSB9KTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9XG59O1xuIl19