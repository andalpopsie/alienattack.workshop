"use strict";
const lib_1 = require("../../lib");
module.exports = {
    'Secret is merely a token'(test) {
        const stack = new lib_1.Stack();
        const foo = new lib_1.Secret('Foo');
        const bar = new lib_1.Secret(() => 'Bar');
        test.deepEqual(stack.node.resolve(foo), 'Foo');
        test.deepEqual(stack.node.resolve(bar), 'Bar');
        test.done();
    },
    'SecretParameter can be used to define values resolved from SSM parameter store during deployment'(test) {
        const stack = new lib_1.Stack();
        const mySecret = new lib_1.SecretParameter(stack, 'MySecret', { ssmParameter: '/my/secret/param' });
        new lib_1.SecretParameter(stack, 'Boom', {
            ssmParameter: 'Boom',
            description: 'description',
            constraintDescription: 'constraintDescription',
            minLength: -100,
            maxLength: 2000,
            allowedPattern: 'allowed-pattern',
            allowedValues: ['allowed', 'values'],
        });
        test.deepEqual(stack.toCloudFormation(), { Parameters: { MySecretParameterBB81DE58: { Type: 'AWS::SSM::Parameter::Value<String>',
                    Default: '/my/secret/param',
                    NoEcho: true },
                BoomParameterB3EB3942: { Type: 'AWS::SSM::Parameter::Value<String>',
                    Default: 'Boom',
                    AllowedPattern: 'allowed-pattern',
                    AllowedValues: ['allowed', 'values'],
                    ConstraintDescription: 'constraintDescription',
                    Description: 'description',
                    MaxLength: 2000,
                    MinLength: -100,
                    NoEcho: true } } });
        // value resolves to a "Ref"
        test.deepEqual(stack.node.resolve(mySecret.value), { Ref: 'MySecretParameterBB81DE58' });
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5zZWNyZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LnNlY3JldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsbUNBQTJEO0FBRTNELGlCQUFTO0lBQ1AsMEJBQTBCLENBQUMsSUFBVTtRQUNuQyxNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksWUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLE1BQU0sR0FBRyxHQUFHLElBQUksWUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXBDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsa0dBQWtHLENBQUMsSUFBVTtRQUMzRyxNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssRUFBRSxDQUFDO1FBRTFCLE1BQU0sUUFBUSxHQUFHLElBQUkscUJBQWUsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLEVBQUUsWUFBWSxFQUFFLGtCQUFrQixFQUFFLENBQUMsQ0FBQztRQUU5RixJQUFJLHFCQUFlLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtZQUNqQyxZQUFZLEVBQUUsTUFBTTtZQUNwQixXQUFXLEVBQUUsYUFBYTtZQUMxQixxQkFBcUIsRUFBRSx1QkFBdUI7WUFDOUMsU0FBUyxFQUFFLENBQUMsR0FBRztZQUNmLFNBQVMsRUFBRSxJQUFJO1lBQ2YsY0FBYyxFQUFFLGlCQUFpQjtZQUNqQyxhQUFhLEVBQUUsQ0FBRSxTQUFTLEVBQUUsUUFBUSxDQUFFO1NBQ3ZDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQ25ELEVBQUUseUJBQXlCLEVBQ3hCLEVBQUUsSUFBSSxFQUFFLG9DQUFvQztvQkFDNUMsT0FBTyxFQUFFLGtCQUFrQjtvQkFDM0IsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFDZixxQkFBcUIsRUFDcEIsRUFBRSxJQUFJLEVBQUUsb0NBQW9DO29CQUM1QyxPQUFPLEVBQUUsTUFBTTtvQkFDZixjQUFjLEVBQUUsaUJBQWlCO29CQUNqQyxhQUFhLEVBQUUsQ0FBRSxTQUFTLEVBQUUsUUFBUSxDQUFFO29CQUN0QyxxQkFBcUIsRUFBRSx1QkFBdUI7b0JBQzlDLFdBQVcsRUFBRSxhQUFhO29CQUMxQixTQUFTLEVBQUUsSUFBSTtvQkFDZixTQUFTLEVBQUUsQ0FBQyxHQUFHO29CQUNmLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUV6Qiw0QkFBNEI7UUFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsMkJBQTJCLEVBQUUsQ0FBQyxDQUFDO1FBRXpGLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IFNlY3JldCwgU2VjcmV0UGFyYW1ldGVyLCBTdGFjayB9IGZyb20gJy4uLy4uL2xpYic7XG5cbmV4cG9ydCA9IHtcbiAgJ1NlY3JldCBpcyBtZXJlbHkgYSB0b2tlbicodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgZm9vID0gbmV3IFNlY3JldCgnRm9vJyk7XG4gICAgY29uc3QgYmFyID0gbmV3IFNlY3JldCgoKSA9PiAnQmFyJyk7XG5cbiAgICB0ZXN0LmRlZXBFcXVhbChzdGFjay5ub2RlLnJlc29sdmUoZm9vKSwgJ0ZvbycpO1xuICAgIHRlc3QuZGVlcEVxdWFsKHN0YWNrLm5vZGUucmVzb2x2ZShiYXIpLCAnQmFyJyk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ1NlY3JldFBhcmFtZXRlciBjYW4gYmUgdXNlZCB0byBkZWZpbmUgdmFsdWVzIHJlc29sdmVkIGZyb20gU1NNIHBhcmFtZXRlciBzdG9yZSBkdXJpbmcgZGVwbG95bWVudCcodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG5cbiAgICBjb25zdCBteVNlY3JldCA9IG5ldyBTZWNyZXRQYXJhbWV0ZXIoc3RhY2ssICdNeVNlY3JldCcsIHsgc3NtUGFyYW1ldGVyOiAnL215L3NlY3JldC9wYXJhbScgfSk7XG5cbiAgICBuZXcgU2VjcmV0UGFyYW1ldGVyKHN0YWNrLCAnQm9vbScsIHtcbiAgICAgIHNzbVBhcmFtZXRlcjogJ0Jvb20nLFxuICAgICAgZGVzY3JpcHRpb246ICdkZXNjcmlwdGlvbicsXG4gICAgICBjb25zdHJhaW50RGVzY3JpcHRpb246ICdjb25zdHJhaW50RGVzY3JpcHRpb24nLFxuICAgICAgbWluTGVuZ3RoOiAtMTAwLFxuICAgICAgbWF4TGVuZ3RoOiAyMDAwLFxuICAgICAgYWxsb3dlZFBhdHRlcm46ICdhbGxvd2VkLXBhdHRlcm4nLFxuICAgICAgYWxsb3dlZFZhbHVlczogWyAnYWxsb3dlZCcsICd2YWx1ZXMnIF0sXG4gICAgfSk7XG5cbiAgICB0ZXN0LmRlZXBFcXVhbChzdGFjay50b0Nsb3VkRm9ybWF0aW9uKCksIHsgUGFyYW1ldGVyczpcbiAgICAgIHsgTXlTZWNyZXRQYXJhbWV0ZXJCQjgxREU1ODpcbiAgICAgICAgIHsgVHlwZTogJ0FXUzo6U1NNOjpQYXJhbWV0ZXI6OlZhbHVlPFN0cmluZz4nLFxuICAgICAgICAgRGVmYXVsdDogJy9teS9zZWNyZXQvcGFyYW0nLFxuICAgICAgICAgTm9FY2hvOiB0cnVlIH0sXG4gICAgICAgIEJvb21QYXJhbWV0ZXJCM0VCMzk0MjpcbiAgICAgICAgIHsgVHlwZTogJ0FXUzo6U1NNOjpQYXJhbWV0ZXI6OlZhbHVlPFN0cmluZz4nLFxuICAgICAgICAgRGVmYXVsdDogJ0Jvb20nLFxuICAgICAgICAgQWxsb3dlZFBhdHRlcm46ICdhbGxvd2VkLXBhdHRlcm4nLFxuICAgICAgICAgQWxsb3dlZFZhbHVlczogWyAnYWxsb3dlZCcsICd2YWx1ZXMnIF0sXG4gICAgICAgICBDb25zdHJhaW50RGVzY3JpcHRpb246ICdjb25zdHJhaW50RGVzY3JpcHRpb24nLFxuICAgICAgICAgRGVzY3JpcHRpb246ICdkZXNjcmlwdGlvbicsXG4gICAgICAgICBNYXhMZW5ndGg6IDIwMDAsXG4gICAgICAgICBNaW5MZW5ndGg6IC0xMDAsXG4gICAgICAgICBOb0VjaG86IHRydWUgfSB9IH0pO1xuXG4gICAgLy8gdmFsdWUgcmVzb2x2ZXMgdG8gYSBcIlJlZlwiXG4gICAgdGVzdC5kZWVwRXF1YWwoc3RhY2subm9kZS5yZXNvbHZlKG15U2VjcmV0LnZhbHVlKSwgeyBSZWY6ICdNeVNlY3JldFBhcmFtZXRlckJCODFERTU4JyB9KTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9XG59O1xuIl19