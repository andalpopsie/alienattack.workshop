"use strict";
const lib_1 = require("../../lib");
module.exports = {
    'outputs can be added to the stack'(test) {
        const stack = new lib_1.Stack();
        const res = new lib_1.Resource(stack, 'MyResource', { type: 'R' });
        const ref = new lib_1.Ref(res);
        new lib_1.Output(stack, 'MyOutput', {
            export: 'ExportName',
            value: ref,
            description: 'Output properties'
        });
        test.deepEqual(stack.toCloudFormation(), { Resources: { MyResource: { Type: 'R' } },
            Outputs: { MyOutput: { Description: 'Output properties',
                    Export: { Name: 'ExportName' },
                    Value: { Ref: 'MyResource' } } } });
        test.done();
    },
    'outputs cannot be referenced'(test) {
        const stack = new lib_1.Stack();
        const output = new lib_1.Output(stack, 'MyOutput', { description: 'My Output' });
        test.throws(() => output.ref);
        test.done();
    },
    'disableExport can be used to disable the auto-export behavior'(test) {
        const stack = new lib_1.Stack();
        const output = new lib_1.Output(stack, 'MyOutput', { disableExport: true });
        test.equal(output.export, null);
        // cannot specify `export` and `disableExport` at the same time.
        test.throws(() => new lib_1.Output(stack, 'YourOutput', {
            disableExport: true,
            export: 'bla'
        }), /Cannot set `disableExport` and specify an export name/);
        test.done();
    },
    'if stack name is undefined, we will only use the logical ID for the export name'(test) {
        const stack = new lib_1.Stack();
        const output = new lib_1.Output(stack, 'MyOutput');
        test.deepEqual(stack.node.resolve(output.makeImportValue()), { 'Fn::ImportValue': 'MyOutput' });
        test.done();
    },
    'makeImportValue can be used to create an Fn::ImportValue from an output'(test) {
        const stack = new lib_1.Stack(undefined, 'MyStack');
        const output = new lib_1.Output(stack, 'MyOutput');
        test.deepEqual(stack.node.resolve(output.makeImportValue()), { 'Fn::ImportValue': 'MyStack:MyOutput' });
        test.deepEqual(stack.toCloudFormation(), {
            Outputs: {
                MyOutput: {
                    Export: { Name: 'MyStack:MyOutput' }
                }
            }
        });
        test.done();
    },
    'No export is created by default'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        new lib_1.Output(stack, 'SomeOutput', { value: 'x' });
        // THEN
        test.deepEqual(stack.toCloudFormation(), {
            Outputs: {
                SomeOutput: {
                    Value: 'x'
                }
            }
        });
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5vdXRwdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0Lm91dHB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsbUNBQXlEO0FBRXpELGlCQUFTO0lBQ1AsbUNBQW1DLENBQUMsSUFBVTtRQUM1QyxNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksY0FBUSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM3RCxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV6QixJQUFJLFlBQU0sQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFO1lBQzVCLE1BQU0sRUFBRSxZQUFZO1lBQ3BCLEtBQUssRUFBRSxHQUFHO1lBQ1YsV0FBVyxFQUFFLG1CQUFtQjtTQUNqQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ25GLE9BQU8sRUFDTixFQUFFLFFBQVEsRUFDVCxFQUFFLFdBQVcsRUFBRSxtQkFBbUI7b0JBQ2hDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7b0JBQzlCLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCw4QkFBOEIsQ0FBQyxJQUFVO1FBQ3ZDLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFNLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCwrREFBK0QsQ0FBQyxJQUFVO1FBQ3hFLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFNLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRXRFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVoQyxnRUFBZ0U7UUFDaEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLFlBQU0sQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO1lBQ2hELGFBQWEsRUFBRSxJQUFJO1lBQ25CLE1BQU0sRUFBRSxLQUFLO1NBQ2QsQ0FBQyxFQUFFLHVEQUF1RCxDQUFDLENBQUM7UUFFN0QsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELGlGQUFpRixDQUFDLElBQVU7UUFDMUYsTUFBTSxLQUFLLEdBQUcsSUFBSSxXQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLE1BQU0sR0FBRyxJQUFJLFlBQU0sQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUMsRUFBRSxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDaEcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELHlFQUF5RSxDQUFDLElBQVU7UUFDbEYsTUFBTSxLQUFLLEdBQUcsSUFBSSxXQUFLLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sTUFBTSxHQUFHLElBQUksWUFBTSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQyxFQUFFLEVBQUUsaUJBQWlCLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1FBRXhHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEVBQUU7WUFDdkMsT0FBTyxFQUFFO2dCQUNQLFFBQVEsRUFBRTtvQkFDUixNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUU7aUJBQ3JDO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsaUNBQWlDLENBQUMsSUFBVTtRQUMxQyxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxXQUFLLEVBQUUsQ0FBQztRQUUxQixPQUFPO1FBQ1AsSUFBSSxZQUFNLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRWhELE9BQU87UUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQ3ZDLE9BQU8sRUFBRTtnQkFDUCxVQUFVLEVBQUU7b0JBQ1YsS0FBSyxFQUFFLEdBQUc7aUJBQ1g7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IE91dHB1dCwgUmVmLCBSZXNvdXJjZSwgU3RhY2sgfSBmcm9tICcuLi8uLi9saWInO1xuXG5leHBvcnQgPSB7XG4gICdvdXRwdXRzIGNhbiBiZSBhZGRlZCB0byB0aGUgc3RhY2snKHRlc3Q6IFRlc3QpIHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IHJlcyA9IG5ldyBSZXNvdXJjZShzdGFjaywgJ015UmVzb3VyY2UnLCB7IHR5cGU6ICdSJyB9KTtcbiAgICBjb25zdCByZWYgPSBuZXcgUmVmKHJlcyk7XG5cbiAgICBuZXcgT3V0cHV0KHN0YWNrLCAnTXlPdXRwdXQnLCB7XG4gICAgICBleHBvcnQ6ICdFeHBvcnROYW1lJyxcbiAgICAgIHZhbHVlOiByZWYsXG4gICAgICBkZXNjcmlwdGlvbjogJ091dHB1dCBwcm9wZXJ0aWVzJ1xuICAgIH0pO1xuICAgIHRlc3QuZGVlcEVxdWFsKHN0YWNrLnRvQ2xvdWRGb3JtYXRpb24oKSwgeyBSZXNvdXJjZXM6IHsgTXlSZXNvdXJjZTogeyBUeXBlOiAnUicgfSB9LFxuICAgIE91dHB1dHM6XG4gICAgIHsgTXlPdXRwdXQ6XG4gICAgICB7IERlc2NyaXB0aW9uOiAnT3V0cHV0IHByb3BlcnRpZXMnLFxuICAgICAgICBFeHBvcnQ6IHsgTmFtZTogJ0V4cG9ydE5hbWUnIH0sXG4gICAgICAgIFZhbHVlOiB7IFJlZjogJ015UmVzb3VyY2UnIH0gfSB9IH0pO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdvdXRwdXRzIGNhbm5vdCBiZSByZWZlcmVuY2VkJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBjb25zdCBvdXRwdXQgPSBuZXcgT3V0cHV0KHN0YWNrLCAnTXlPdXRwdXQnLCB7IGRlc2NyaXB0aW9uOiAnTXkgT3V0cHV0JyB9KTtcbiAgICB0ZXN0LnRocm93cygoKSA9PiBvdXRwdXQucmVmKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnZGlzYWJsZUV4cG9ydCBjYW4gYmUgdXNlZCB0byBkaXNhYmxlIHRoZSBhdXRvLWV4cG9ydCBiZWhhdmlvcicodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3Qgb3V0cHV0ID0gbmV3IE91dHB1dChzdGFjaywgJ015T3V0cHV0JywgeyBkaXNhYmxlRXhwb3J0OiB0cnVlIH0pO1xuXG4gICAgdGVzdC5lcXVhbChvdXRwdXQuZXhwb3J0LCBudWxsKTtcblxuICAgIC8vIGNhbm5vdCBzcGVjaWZ5IGBleHBvcnRgIGFuZCBgZGlzYWJsZUV4cG9ydGAgYXQgdGhlIHNhbWUgdGltZS5cbiAgICB0ZXN0LnRocm93cygoKSA9PiBuZXcgT3V0cHV0KHN0YWNrLCAnWW91ck91dHB1dCcsIHtcbiAgICAgIGRpc2FibGVFeHBvcnQ6IHRydWUsXG4gICAgICBleHBvcnQ6ICdibGEnXG4gICAgfSksIC9DYW5ub3Qgc2V0IGBkaXNhYmxlRXhwb3J0YCBhbmQgc3BlY2lmeSBhbiBleHBvcnQgbmFtZS8pO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2lmIHN0YWNrIG5hbWUgaXMgdW5kZWZpbmVkLCB3ZSB3aWxsIG9ubHkgdXNlIHRoZSBsb2dpY2FsIElEIGZvciB0aGUgZXhwb3J0IG5hbWUnKHRlc3Q6IFRlc3QpIHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IG91dHB1dCA9IG5ldyBPdXRwdXQoc3RhY2ssICdNeU91dHB1dCcpO1xuICAgIHRlc3QuZGVlcEVxdWFsKHN0YWNrLm5vZGUucmVzb2x2ZShvdXRwdXQubWFrZUltcG9ydFZhbHVlKCkpLCB7ICdGbjo6SW1wb3J0VmFsdWUnOiAnTXlPdXRwdXQnIH0pO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdtYWtlSW1wb3J0VmFsdWUgY2FuIGJlIHVzZWQgdG8gY3JlYXRlIGFuIEZuOjpJbXBvcnRWYWx1ZSBmcm9tIGFuIG91dHB1dCcodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKHVuZGVmaW5lZCwgJ015U3RhY2snKTtcbiAgICBjb25zdCBvdXRwdXQgPSBuZXcgT3V0cHV0KHN0YWNrLCAnTXlPdXRwdXQnKTtcbiAgICB0ZXN0LmRlZXBFcXVhbChzdGFjay5ub2RlLnJlc29sdmUob3V0cHV0Lm1ha2VJbXBvcnRWYWx1ZSgpKSwgeyAnRm46OkltcG9ydFZhbHVlJzogJ015U3RhY2s6TXlPdXRwdXQnIH0pO1xuXG4gICAgdGVzdC5kZWVwRXF1YWwoc3RhY2sudG9DbG91ZEZvcm1hdGlvbigpLCB7XG4gICAgICBPdXRwdXRzOiB7XG4gICAgICAgIE15T3V0cHV0OiB7XG4gICAgICAgICAgRXhwb3J0OiB7IE5hbWU6ICdNeVN0YWNrOk15T3V0cHV0JyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnTm8gZXhwb3J0IGlzIGNyZWF0ZWQgYnkgZGVmYXVsdCcodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcblxuICAgIC8vIFdIRU5cbiAgICBuZXcgT3V0cHV0KHN0YWNrLCAnU29tZU91dHB1dCcsIHsgdmFsdWU6ICd4JyB9KTtcblxuICAgIC8vIFRIRU5cbiAgICB0ZXN0LmRlZXBFcXVhbChzdGFjay50b0Nsb3VkRm9ybWF0aW9uKCksIHtcbiAgICAgIE91dHB1dHM6IHtcbiAgICAgICAgU29tZU91dHB1dDoge1xuICAgICAgICAgIFZhbHVlOiAneCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG59O1xuIl19