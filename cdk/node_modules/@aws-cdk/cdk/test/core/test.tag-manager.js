"use strict";
const resource_1 = require("../../lib/cloudformation/resource");
const tag_manager_1 = require("../../lib/core/tag-manager");
module.exports = {
    '#setTag() supports setting a tag regardless of Type'(test) {
        const notTaggable = new tag_manager_1.TagManager(resource_1.TagType.NotTaggable, 'AWS::Resource::Type');
        notTaggable.setTag('key', 'value');
        test.deepEqual(notTaggable.renderTags(), undefined);
        test.done();
    },
    'when a tag does not exist': {
        '#removeTag() does not throw an error'(test) {
            const mgr = new tag_manager_1.TagManager(resource_1.TagType.Standard, 'AWS::Resource::Type');
            test.doesNotThrow(() => (mgr.removeTag('dne')));
            test.done();
        },
        '#setTag() creates the tag'(test) {
            const mgr = new tag_manager_1.TagManager(resource_1.TagType.Standard, 'AWS::Resource::Type');
            mgr.setTag('dne', 'notanymore');
            test.deepEqual(mgr.renderTags(), [{ key: 'dne', value: 'notanymore' }]);
            test.done();
        }
    },
    'when a tag does exist': {
        '#removeTag() deletes the tag'(test) {
            const mgr = new tag_manager_1.TagManager(resource_1.TagType.Standard, 'AWS::Resource::Type');
            mgr.setTag('dne', 'notanymore');
            mgr.removeTag('dne');
            test.deepEqual(mgr.renderTags(), undefined);
            test.done();
        },
        '#setTag() overwrites the tag'(test) {
            const mgr = new tag_manager_1.TagManager(resource_1.TagType.Standard, 'AWS::Resource::Type');
            mgr.setTag('dne', 'notanymore');
            mgr.setTag('dne', 'iwin');
            test.deepEqual(mgr.renderTags(), [{ key: 'dne', value: 'iwin' }]);
            test.done();
        }
    },
    'when there are no tags': {
        '#renderTags() returns undefined'(test) {
            const mgr = new tag_manager_1.TagManager(resource_1.TagType.Standard, 'AWS::Resource::Type');
            test.deepEqual(mgr.renderTags(), undefined);
            test.done();
        },
    },
    '#renderTags() handles standard, map, and ASG tag formats'(test) {
        const tagged = [];
        const standard = new tag_manager_1.TagManager(resource_1.TagType.Standard, 'AWS::Resource::Type');
        const asg = new tag_manager_1.TagManager(resource_1.TagType.AutoScalingGroup, 'AWS::Resource::Type');
        const mapper = new tag_manager_1.TagManager(resource_1.TagType.Map, 'AWS::Resource::Type');
        tagged.push(standard);
        tagged.push(asg);
        tagged.push(mapper);
        for (const res of tagged) {
            res.setTag('foo', 'bar');
            res.setTag('asg', 'only', { applyToLaunchedInstances: false });
        }
        test.deepEqual(standard.renderTags(), [
            { key: 'foo', value: 'bar' },
            { key: 'asg', value: 'only' },
        ]);
        test.deepEqual(asg.renderTags(), [
            { key: 'foo', value: 'bar', propagateAtLaunch: true },
            { key: 'asg', value: 'only', propagateAtLaunch: false },
        ]);
        test.deepEqual(mapper.renderTags(), {
            foo: 'bar',
            asg: 'only',
        });
        test.done();
    },
    'tags with higher or equal priority always take precedence'(test) {
        const mgr = new tag_manager_1.TagManager(resource_1.TagType.Standard, 'AWS::Resource::Type');
        mgr.setTag('key', 'myVal', {
            priority: 2,
        });
        mgr.setTag('key', 'newVal', {
            priority: 1,
        });
        mgr.removeTag('key', { priority: 1 });
        test.deepEqual(mgr.renderTags(), [
            { key: 'key', value: 'myVal' },
        ]);
        mgr.removeTag('key', { priority: 2 });
        test.deepEqual(mgr.renderTags(), undefined);
        test.done();
    },
    'excludeResourceTypes only tags resources that do not match'(test) {
        const mgr = new tag_manager_1.TagManager(resource_1.TagType.Standard, 'AWS::Fake::Resource');
        mgr.setTag('key', 'value', { excludeResourceTypes: ['AWS::Fake::Resource'] });
        mgr.setTag('sticky', 'value', { excludeResourceTypes: ['AWS::Wrong::Resource'] });
        test.deepEqual(mgr.renderTags(), [{ key: 'sticky', value: 'value' }]);
        test.done();
    },
    'includeResourceTypes only tags resources that match'(test) {
        const mgr = new tag_manager_1.TagManager(resource_1.TagType.Standard, 'AWS::Fake::Resource');
        mgr.setTag('key', 'value', { includeResourceTypes: ['AWS::Fake::Resource'] });
        mgr.setTag('sticky', 'value', { includeResourceTypes: ['AWS::Wrong::Resource'] });
        test.deepEqual(mgr.renderTags(), [{ key: 'key', value: 'value' }]);
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC50YWctbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QudGFnLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLGdFQUE0RDtBQUM1RCw0REFBd0Q7QUFFeEQsaUJBQVM7SUFDUCxxREFBcUQsQ0FBQyxJQUFVO1FBQzlELE1BQU0sV0FBVyxHQUFHLElBQUksd0JBQVUsQ0FBQyxrQkFBTyxDQUFDLFdBQVcsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1FBQy9FLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFDRCwyQkFBMkIsRUFBRTtRQUMzQixzQ0FBc0MsQ0FBQyxJQUFVO1lBQy9DLE1BQU0sR0FBRyxHQUFHLElBQUksd0JBQVUsQ0FBQyxrQkFBTyxDQUFDLFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1lBQ3BFLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDO1FBQ0QsMkJBQTJCLENBQUMsSUFBVTtZQUNwQyxNQUFNLEdBQUcsR0FBRyxJQUFJLHdCQUFVLENBQUMsa0JBQU8sQ0FBQyxRQUFRLEVBQUUscUJBQXFCLENBQUMsQ0FBQztZQUNwRSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLEVBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsWUFBWSxF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dXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgeyBUYWdUeXBlIH0gZnJvbSAnLi4vLi4vbGliL2Nsb3VkZm9ybWF0aW9uL3Jlc291cmNlJztcbmltcG9ydCB7IFRhZ01hbmFnZXIgfSBmcm9tICcuLi8uLi9saWIvY29yZS90YWctbWFuYWdlcic7XG5cbmV4cG9ydCA9IHtcbiAgJyNzZXRUYWcoKSBzdXBwb3J0cyBzZXR0aW5nIGEgdGFnIHJlZ2FyZGxlc3Mgb2YgVHlwZScodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IG5vdFRhZ2dhYmxlID0gbmV3IFRhZ01hbmFnZXIoVGFnVHlwZS5Ob3RUYWdnYWJsZSwgJ0FXUzo6UmVzb3VyY2U6OlR5cGUnKTtcbiAgICBub3RUYWdnYWJsZS5zZXRUYWcoJ2tleScsICd2YWx1ZScpO1xuICAgIHRlc3QuZGVlcEVxdWFsKG5vdFRhZ2dhYmxlLnJlbmRlclRhZ3MoKSwgdW5kZWZpbmVkKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcbiAgJ3doZW4gYSB0YWcgZG9lcyBub3QgZXhpc3QnOiB7XG4gICAgJyNyZW1vdmVUYWcoKSBkb2VzIG5vdCB0aHJvdyBhbiBlcnJvcicodGVzdDogVGVzdCkge1xuICAgICAgY29uc3QgbWdyID0gbmV3IFRhZ01hbmFnZXIoVGFnVHlwZS5TdGFuZGFyZCwgJ0FXUzo6UmVzb3VyY2U6OlR5cGUnKTtcbiAgICAgIHRlc3QuZG9lc05vdFRocm93KCgpID0+IChtZ3IucmVtb3ZlVGFnKCdkbmUnKSkpO1xuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcbiAgICAnI3NldFRhZygpIGNyZWF0ZXMgdGhlIHRhZycodGVzdDogVGVzdCkge1xuICAgICAgY29uc3QgbWdyID0gbmV3IFRhZ01hbmFnZXIoVGFnVHlwZS5TdGFuZGFyZCwgJ0FXUzo6UmVzb3VyY2U6OlR5cGUnKTtcbiAgICAgIG1nci5zZXRUYWcoJ2RuZScsICdub3Rhbnltb3JlJyk7XG4gICAgICB0ZXN0LmRlZXBFcXVhbChtZ3IucmVuZGVyVGFncygpLCBbe2tleTogJ2RuZScsIHZhbHVlOiAnbm90YW55bW9yZSd9XSk7XG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9XG4gIH0sXG4gICd3aGVuIGEgdGFnIGRvZXMgZXhpc3QnOiB7XG4gICAgJyNyZW1vdmVUYWcoKSBkZWxldGVzIHRoZSB0YWcnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IG1nciA9IG5ldyBUYWdNYW5hZ2VyKFRhZ1R5cGUuU3RhbmRhcmQsICdBV1M6OlJlc291cmNlOjpUeXBlJyk7XG4gICAgICBtZ3Iuc2V0VGFnKCdkbmUnLCAnbm90YW55bW9yZScpO1xuICAgICAgbWdyLnJlbW92ZVRhZygnZG5lJyk7XG4gICAgICB0ZXN0LmRlZXBFcXVhbChtZ3IucmVuZGVyVGFncygpLCB1bmRlZmluZWQpO1xuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcbiAgICAnI3NldFRhZygpIG92ZXJ3cml0ZXMgdGhlIHRhZycodGVzdDogVGVzdCkge1xuICAgICAgY29uc3QgbWdyID0gbmV3IFRhZ01hbmFnZXIoVGFnVHlwZS5TdGFuZGFyZCwgJ0FXUzo6UmVzb3VyY2U6OlR5cGUnKTtcbiAgICAgIG1nci5zZXRUYWcoJ2RuZScsICdub3Rhbnltb3JlJyk7XG4gICAgICBtZ3Iuc2V0VGFnKCdkbmUnLCAnaXdpbicpO1xuICAgICAgdGVzdC5kZWVwRXF1YWwobWdyLnJlbmRlclRhZ3MoKSwgW3trZXk6ICdkbmUnLCB2YWx1ZTogJ2l3aW4nfV0pO1xuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfVxuICB9LFxuICAnd2hlbiB0aGVyZSBhcmUgbm8gdGFncyc6IHtcbiAgICAnI3JlbmRlclRhZ3MoKSByZXR1cm5zIHVuZGVmaW5lZCcodGVzdDogVGVzdCkge1xuICAgICAgY29uc3QgbWdyID0gbmV3IFRhZ01hbmFnZXIoVGFnVHlwZS5TdGFuZGFyZCwgJ0FXUzo6UmVzb3VyY2U6OlR5cGUnKTtcbiAgICAgIHRlc3QuZGVlcEVxdWFsKG1nci5yZW5kZXJUYWdzKCksIHVuZGVmaW5lZCApO1xuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcbiAgfSxcbiAgJyNyZW5kZXJUYWdzKCkgaGFuZGxlcyBzdGFuZGFyZCwgbWFwLCBhbmQgQVNHIHRhZyBmb3JtYXRzJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3QgdGFnZ2VkOiBUYWdNYW5hZ2VyW10gPSBbXTtcbiAgICBjb25zdCBzdGFuZGFyZCA9IG5ldyBUYWdNYW5hZ2VyKFRhZ1R5cGUuU3RhbmRhcmQsICdBV1M6OlJlc291cmNlOjpUeXBlJyk7XG4gICAgY29uc3QgYXNnID0gbmV3IFRhZ01hbmFnZXIoVGFnVHlwZS5BdXRvU2NhbGluZ0dyb3VwLCAnQVdTOjpSZXNvdXJjZTo6VHlwZScpO1xuICAgIGNvbnN0IG1hcHBlciA9IG5ldyBUYWdNYW5hZ2VyKFRhZ1R5cGUuTWFwLCAnQVdTOjpSZXNvdXJjZTo6VHlwZScpO1xuICAgIHRhZ2dlZC5wdXNoKHN0YW5kYXJkKTtcbiAgICB0YWdnZWQucHVzaChhc2cpO1xuICAgIHRhZ2dlZC5wdXNoKG1hcHBlcik7XG4gICAgZm9yIChjb25zdCByZXMgb2YgdGFnZ2VkKSB7XG4gICAgICByZXMuc2V0VGFnKCdmb28nLCAnYmFyJyk7XG4gICAgICByZXMuc2V0VGFnKCdhc2cnLCAnb25seScsIHthcHBseVRvTGF1bmNoZWRJbnN0YW5jZXM6IGZhbHNlfSk7XG4gICAgfVxuICAgIHRlc3QuZGVlcEVxdWFsKHN0YW5kYXJkLnJlbmRlclRhZ3MoKSwgW1xuICAgICAge2tleTogJ2ZvbycsIHZhbHVlOiAnYmFyJ30sXG4gICAgICB7a2V5OiAnYXNnJywgdmFsdWU6ICdvbmx5J30sXG4gICAgXSk7XG4gICAgdGVzdC5kZWVwRXF1YWwoYXNnLnJlbmRlclRhZ3MoKSwgW1xuICAgICAge2tleTogJ2ZvbycsIHZhbHVlOiAnYmFyJywgcHJvcGFnYXRlQXRMYXVuY2g6IHRydWV9LFxuICAgICAge2tleTogJ2FzZycsIHZhbHVlOiAnb25seScsIHByb3BhZ2F0ZUF0TGF1bmNoOiBmYWxzZX0sXG4gICAgXSk7XG4gICAgdGVzdC5kZWVwRXF1YWwobWFwcGVyLnJlbmRlclRhZ3MoKSwge1xuICAgICAgZm9vOiAnYmFyJyxcbiAgICAgIGFzZzogJ29ubHknLFxuICAgIH0pO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuICAndGFncyB3aXRoIGhpZ2hlciBvciBlcXVhbCBwcmlvcml0eSBhbHdheXMgdGFrZSBwcmVjZWRlbmNlJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3QgbWdyID0gbmV3IFRhZ01hbmFnZXIoVGFnVHlwZS5TdGFuZGFyZCwgJ0FXUzo6UmVzb3VyY2U6OlR5cGUnKTtcbiAgICBtZ3Iuc2V0VGFnKCdrZXknLCAnbXlWYWwnLCB7XG4gICAgICBwcmlvcml0eTogMixcbiAgICB9KTtcbiAgICBtZ3Iuc2V0VGFnKCdrZXknLCAnbmV3VmFsJywge1xuICAgICAgcHJpb3JpdHk6IDEsXG4gICAgfSk7XG4gICAgbWdyLnJlbW92ZVRhZygna2V5Jywge3ByaW9yaXR5OiAxfSk7XG4gICAgdGVzdC5kZWVwRXF1YWwobWdyLnJlbmRlclRhZ3MoKSwgW1xuICAgICAge2tleTogJ2tleScsIHZhbHVlOiAnbXlWYWwnfSxcbiAgICBdKTtcbiAgICBtZ3IucmVtb3ZlVGFnKCdrZXknLCB7cHJpb3JpdHk6IDJ9KTtcbiAgICB0ZXN0LmRlZXBFcXVhbChtZ3IucmVuZGVyVGFncygpLCB1bmRlZmluZWQpO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuICAnZXhjbHVkZVJlc291cmNlVHlwZXMgb25seSB0YWdzIHJlc291cmNlcyB0aGF0IGRvIG5vdCBtYXRjaCcodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IG1nciA9IG5ldyBUYWdNYW5hZ2VyKFRhZ1R5cGUuU3RhbmRhcmQsICdBV1M6OkZha2U6OlJlc291cmNlJyk7XG4gICAgbWdyLnNldFRhZygna2V5JywgJ3ZhbHVlJywge2V4Y2x1ZGVSZXNvdXJjZVR5cGVzOiBbJ0FXUzo6RmFrZTo6UmVzb3VyY2UnXX0pO1xuICAgIG1nci5zZXRUYWcoJ3N0aWNreScsICd2YWx1ZScsIHtleGNsdWRlUmVzb3VyY2VUeXBlczogWydBV1M6Oldyb25nOjpSZXNvdXJjZSddfSk7XG4gICAgdGVzdC5kZWVwRXF1YWwobWdyLnJlbmRlclRhZ3MoKSwgW3trZXk6ICdzdGlja3knLCB2YWx1ZTogJ3ZhbHVlJ31dKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcbiAgJ2luY2x1ZGVSZXNvdXJjZVR5cGVzIG9ubHkgdGFncyByZXNvdXJjZXMgdGhhdCBtYXRjaCcodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IG1nciA9IG5ldyBUYWdNYW5hZ2VyKFRhZ1R5cGUuU3RhbmRhcmQsICdBV1M6OkZha2U6OlJlc291cmNlJyk7XG4gICAgbWdyLnNldFRhZygna2V5JywgJ3ZhbHVlJywge2luY2x1ZGVSZXNvdXJjZVR5cGVzOiBbJ0FXUzo6RmFrZTo6UmVzb3VyY2UnXX0pO1xuICAgIG1nci5zZXRUYWcoJ3N0aWNreScsICd2YWx1ZScsIHtpbmNsdWRlUmVzb3VyY2VUeXBlczogWydBV1M6Oldyb25nOjpSZXNvdXJjZSddfSk7XG4gICAgdGVzdC5kZWVwRXF1YWwobWdyLnJlbmRlclRhZ3MoKSwgW3trZXk6ICdrZXknLCB2YWx1ZTogJ3ZhbHVlJ31dKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfVxufTtcbiJdfQ==