"use strict";
const lib_1 = require("../../lib");
const util_1 = require("../../lib/core/util");
class SomeToken {
    constructor() {
        this.foo = 60;
        this.goo = 40;
    }
    resolve() {
        return this.foo + this.goo;
    }
}
module.exports = {
    'capitalizeResourceProperties capitalizes all keys of an object (recursively) from camelCase to PascalCase'(test) {
        const c = new lib_1.Root();
        test.equal(util_1.capitalizePropertyNames(c, undefined), undefined);
        test.equal(util_1.capitalizePropertyNames(c, 12), 12);
        test.equal(util_1.capitalizePropertyNames(c, 'hello'), 'hello');
        test.deepEqual(util_1.capitalizePropertyNames(c, ['hello', 88]), ['hello', 88]);
        test.deepEqual(util_1.capitalizePropertyNames(c, { Hello: 'world', hey: 'dude' }), { Hello: 'world', Hey: 'dude' });
        test.deepEqual(util_1.capitalizePropertyNames(c, [1, 2, { three: 3 }]), [1, 2, { Three: 3 }]);
        test.deepEqual(util_1.capitalizePropertyNames(c, { Hello: 'world', recursive: { foo: 123, there: { another: ['hello', { world: 123 }] } } }), { Hello: 'world', Recursive: { Foo: 123, There: { Another: ['hello', { World: 123 }] } } });
        // make sure tokens are resolved and result is also capitalized
        test.deepEqual(util_1.capitalizePropertyNames(c, { hello: { resolve: () => ({ foo: 'bar' }) }, world: new SomeToken() }), { Hello: { Foo: 'bar' }, World: 100 });
        test.done();
    },
    'ignoreEmpty': {
        '[]'(test) {
            const c = new lib_1.Root();
            test.strictEqual(c.node.resolve(util_1.ignoreEmpty([])), undefined);
            test.done();
        },
        '{}'(test) {
            const c = new lib_1.Root();
            test.strictEqual(c.node.resolve(util_1.ignoreEmpty({})), undefined);
            test.done();
        },
        'undefined/null'(test) {
            const c = new lib_1.Root();
            test.strictEqual(c.node.resolve(util_1.ignoreEmpty(undefined)), undefined);
            test.strictEqual(c.node.resolve(util_1.ignoreEmpty(null)), null);
            test.done();
        },
        'primitives'(test) {
            const c = new lib_1.Root();
            test.strictEqual(c.node.resolve(util_1.ignoreEmpty(12)), 12);
            test.strictEqual(c.node.resolve(util_1.ignoreEmpty("12")), "12");
            test.done();
        },
        'non-empty arrays/objects'(test) {
            const c = new lib_1.Root();
            test.deepEqual(c.node.resolve(util_1.ignoreEmpty([1, 2, 3, undefined])), [1, 2, 3]); // undefined array values is cleaned up by "resolve"
            test.deepEqual(c.node.resolve(util_1.ignoreEmpty({ o: 1, b: 2, j: 3 })), { o: 1, b: 2, j: 3 });
            test.done();
        },
        'resolve first'(test) {
            const c = new lib_1.Root();
            test.deepEqual(c.node.resolve(util_1.ignoreEmpty({ xoo: { resolve: () => 123 } })), { xoo: 123 });
            test.strictEqual(c.node.resolve(util_1.ignoreEmpty({ xoo: { resolve: () => undefined } })), undefined);
            test.deepEqual(c.node.resolve(util_1.ignoreEmpty({ xoo: { resolve: () => [] } })), { xoo: [] });
            test.deepEqual(c.node.resolve(util_1.ignoreEmpty({ xoo: { resolve: () => [undefined, undefined] } })), { xoo: [] });
            test.done();
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC51dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxtQ0FBaUM7QUFDakMsOENBQTJFO0FBMEUzRSxNQUFNLFNBQVM7SUFBZjtRQUNTLFFBQUcsR0FBRyxFQUFFLENBQUM7UUFDVCxRQUFHLEdBQUcsRUFBRSxDQUFDO0lBSWxCLENBQUM7SUFIUSxPQUFPO1FBQ1osT0FBTyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDN0IsQ0FBQztDQUNGO0FBOUVELGlCQUFTO0lBQ1AsMkdBQTJHLENBQUMsSUFBVTtRQUNwSCxNQUFNLENBQUMsR0FBRyxJQUFJLFVBQUksRUFBRSxDQUFDO1FBRXJCLElBQUksQ0FBQyxLQUFLLENBQUMsOEJBQXVCLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxLQUFLLENBQUMsOEJBQXVCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxLQUFLLENBQUMsOEJBQXVCLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxTQUFTLENBQUMsOEJBQXVCLENBQUMsQ0FBQyxFQUFFLENBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBRSxPQUFPLEVBQUUsRUFBRSxDQUFFLENBQUMsQ0FBQztRQUM3RSxJQUFJLENBQUMsU0FBUyxDQUFDLDhCQUF1QixDQUFDLENBQUMsRUFDdEMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUNoQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyw4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RSxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUMvRixJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFXLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6RixJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFXLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBRSxTQUFTLEVBQUUsU0FBUyxDQUFFLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzlHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNkLENBQUM7S0FDRjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0IH0gZnJvbSAnbm9kZXVuaXQnO1xuaW1wb3J0IHsgUm9vdCB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgeyBjYXBpdGFsaXplUHJvcGVydHlOYW1lcywgaWdub3JlRW1wdHkgfSBmcm9tICcuLi8uLi9saWIvY29yZS91dGlsJztcblxuZXhwb3J0ID0ge1xuICAnY2FwaXRhbGl6ZVJlc291cmNlUHJvcGVydGllcyBjYXBpdGFsaXplcyBhbGwga2V5cyBvZiBhbiBvYmplY3QgKHJlY3Vyc2l2ZWx5KSBmcm9tIGNhbWVsQ2FzZSB0byBQYXNjYWxDYXNlJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3QgYyA9IG5ldyBSb290KCk7XG5cbiAgICB0ZXN0LmVxdWFsKGNhcGl0YWxpemVQcm9wZXJ0eU5hbWVzKGMsIHVuZGVmaW5lZCksIHVuZGVmaW5lZCk7XG4gICAgdGVzdC5lcXVhbChjYXBpdGFsaXplUHJvcGVydHlOYW1lcyhjLCAxMiksIDEyKTtcbiAgICB0ZXN0LmVxdWFsKGNhcGl0YWxpemVQcm9wZXJ0eU5hbWVzKGMsICdoZWxsbycpLCAnaGVsbG8nKTtcbiAgICB0ZXN0LmRlZXBFcXVhbChjYXBpdGFsaXplUHJvcGVydHlOYW1lcyhjLCBbICdoZWxsbycsIDg4IF0pLCBbICdoZWxsbycsIDg4IF0pO1xuICAgIHRlc3QuZGVlcEVxdWFsKGNhcGl0YWxpemVQcm9wZXJ0eU5hbWVzKGMsXG4gICAgICB7IEhlbGxvOiAnd29ybGQnLCBoZXk6ICdkdWRlJyB9KSxcbiAgICAgIHsgSGVsbG86ICd3b3JsZCcsIEhleTogJ2R1ZGUnIH0pO1xuICAgIHRlc3QuZGVlcEVxdWFsKGNhcGl0YWxpemVQcm9wZXJ0eU5hbWVzKGMsXG4gICAgICBbIDEsIDIsIHsgdGhyZWU6IDMgfV0pLFxuICAgICAgWyAxLCAyLCB7IFRocmVlOiAzIH1dKTtcbiAgICB0ZXN0LmRlZXBFcXVhbChjYXBpdGFsaXplUHJvcGVydHlOYW1lcyhjLFxuICAgICAgeyBIZWxsbzogJ3dvcmxkJywgcmVjdXJzaXZlOiB7IGZvbzogMTIzLCB0aGVyZTogeyBhbm90aGVyOiBbICdoZWxsbycsIHsgd29ybGQ6IDEyMyB9IF19IH0gfSksXG4gICAgICB7IEhlbGxvOiAnd29ybGQnLCBSZWN1cnNpdmU6IHsgRm9vOiAxMjMsIFRoZXJlOiB7IEFub3RoZXI6IFsgJ2hlbGxvJywgeyBXb3JsZDogMTIzIH0gXX0gfSB9KTtcblxuICAgIC8vIG1ha2Ugc3VyZSB0b2tlbnMgYXJlIHJlc29sdmVkIGFuZCByZXN1bHQgaXMgYWxzbyBjYXBpdGFsaXplZFxuICAgIHRlc3QuZGVlcEVxdWFsKGNhcGl0YWxpemVQcm9wZXJ0eU5hbWVzKGMsXG4gICAgICB7IGhlbGxvOiB7IHJlc29sdmU6ICgpID0+ICh7IGZvbzogJ2JhcicgfSkgfSwgd29ybGQ6IG5ldyBTb21lVG9rZW4oKSB9KSxcbiAgICAgIHsgSGVsbG86IHsgRm9vOiAnYmFyJyB9LCBXb3JsZDogMTAwIH0pO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2lnbm9yZUVtcHR5Jzoge1xuXG4gICAgJ1tdJyh0ZXN0OiBUZXN0KSB7XG4gICAgICBjb25zdCBjID0gbmV3IFJvb3QoKTtcbiAgICAgIHRlc3Quc3RyaWN0RXF1YWwoYy5ub2RlLnJlc29sdmUoaWdub3JlRW1wdHkoW10pKSwgdW5kZWZpbmVkKTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAne30nKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IGMgPSBuZXcgUm9vdCgpO1xuICAgICAgdGVzdC5zdHJpY3RFcXVhbChjLm5vZGUucmVzb2x2ZShpZ25vcmVFbXB0eSh7fSkpLCB1bmRlZmluZWQpO1xuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICd1bmRlZmluZWQvbnVsbCcodGVzdDogVGVzdCkge1xuICAgICAgY29uc3QgYyA9IG5ldyBSb290KCk7XG4gICAgICB0ZXN0LnN0cmljdEVxdWFsKGMubm9kZS5yZXNvbHZlKGlnbm9yZUVtcHR5KHVuZGVmaW5lZCkpLCB1bmRlZmluZWQpO1xuICAgICAgdGVzdC5zdHJpY3RFcXVhbChjLm5vZGUucmVzb2x2ZShpZ25vcmVFbXB0eShudWxsKSksIG51bGwpO1xuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICdwcmltaXRpdmVzJyh0ZXN0OiBUZXN0KSB7XG4gICAgICBjb25zdCBjID0gbmV3IFJvb3QoKTtcbiAgICAgIHRlc3Quc3RyaWN0RXF1YWwoYy5ub2RlLnJlc29sdmUoaWdub3JlRW1wdHkoMTIpKSwgMTIpO1xuICAgICAgdGVzdC5zdHJpY3RFcXVhbChjLm5vZGUucmVzb2x2ZShpZ25vcmVFbXB0eShcIjEyXCIpKSwgXCIxMlwiKTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAnbm9uLWVtcHR5IGFycmF5cy9vYmplY3RzJyh0ZXN0OiBUZXN0KSB7XG4gICAgICBjb25zdCBjID0gbmV3IFJvb3QoKTtcbiAgICAgIHRlc3QuZGVlcEVxdWFsKGMubm9kZS5yZXNvbHZlKGlnbm9yZUVtcHR5KFsgMSwgMiwgMywgdW5kZWZpbmVkIF0pKSwgWyAxLCAyLCAzIF0pOyAvLyB1bmRlZmluZWQgYXJyYXkgdmFsdWVzIGlzIGNsZWFuZWQgdXAgYnkgXCJyZXNvbHZlXCJcbiAgICAgIHRlc3QuZGVlcEVxdWFsKGMubm9kZS5yZXNvbHZlKGlnbm9yZUVtcHR5KHsgbzogMSwgYjogMiwgajogMyB9KSksIHsgbzogMSwgYjogMiwgajogMyB9KTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAncmVzb2x2ZSBmaXJzdCcodGVzdDogVGVzdCkge1xuICAgICAgY29uc3QgYyA9IG5ldyBSb290KCk7XG4gICAgICB0ZXN0LmRlZXBFcXVhbChjLm5vZGUucmVzb2x2ZShpZ25vcmVFbXB0eSh7IHhvbzogeyByZXNvbHZlOiAoKSA9PiAxMjMgfX0pKSwgeyB4b286IDEyMyB9KTtcbiAgICAgIHRlc3Quc3RyaWN0RXF1YWwoYy5ub2RlLnJlc29sdmUoaWdub3JlRW1wdHkoeyB4b286IHsgcmVzb2x2ZTogKCkgPT4gdW5kZWZpbmVkIH19KSksIHVuZGVmaW5lZCk7XG4gICAgICB0ZXN0LmRlZXBFcXVhbChjLm5vZGUucmVzb2x2ZShpZ25vcmVFbXB0eSh7IHhvbzogeyByZXNvbHZlOiAoKSA9PiBbIF0gfX0pKSwgeyB4b286IFtdIH0pO1xuICAgICAgdGVzdC5kZWVwRXF1YWwoYy5ub2RlLnJlc29sdmUoaWdub3JlRW1wdHkoeyB4b286IHsgcmVzb2x2ZTogKCkgPT4gWyB1bmRlZmluZWQsIHVuZGVmaW5lZCBdIH19KSksIHsgeG9vOiBbXSB9KTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH1cbiAgfVxufTtcblxuY2xhc3MgU29tZVRva2VuIHtcbiAgcHVibGljIGZvbyA9IDYwO1xuICBwdWJsaWMgZ29vID0gNDA7XG4gIHB1YmxpYyByZXNvbHZlKCkge1xuICAgIHJldHVybiB0aGlzLmZvbyArIHRoaXMuZ29vO1xuICB9XG59XG4iXX0=