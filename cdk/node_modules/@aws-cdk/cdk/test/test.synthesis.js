"use strict";
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs");
const os = require("os");
const path = require("path");
const cdk = require("../lib");
const lib_1 = require("../lib");
const storeTestMatrix = {};
function createModernApp() {
    return new cdk.App({
        [cxapi.DISABLE_LEGACY_MANIFEST_CONTEXT]: 'true',
        [cxapi.DISABLE_VERSION_REPORTING]: 'true',
    });
}
//
// all these tests will be executed for each type of store
//
const storeTests = {
    'writeFile()/readFile()'(test, store) {
        // WHEN
        store.writeFile('bla.txt', 'hello');
        store.writeFile('hey.txt', '1234');
        // THEN
        test.deepEqual(store.readFile('bla.txt').toString(), 'hello');
        test.deepEqual(store.readFile('hey.txt').toString(), '1234');
        test.throws(() => store.writeFile('bla.txt', 'override is forbidden'));
        // WHEN
        store.finalize();
        // THEN
        test.throws(() => store.writeFile('another.txt', 'locked!'));
        test.done();
    },
    'exists() for files'(test, store) {
        // WHEN
        store.writeFile('A.txt', 'aaa');
        // THEN
        test.ok(store.exists('A.txt'));
        test.ok(!store.exists('B.txt'));
        test.done();
    },
    'mkdir'(test, store) {
        // WHEN
        const dir1 = store.mkdir('dir1');
        const dir2 = store.mkdir('dir2');
        // THEN
        test.ok(fs.statSync(dir1).isDirectory());
        test.ok(fs.statSync(dir2).isDirectory());
        test.throws(() => store.mkdir('dir1'));
        // WHEN
        store.finalize();
        test.throws(() => store.mkdir('dir3'));
        test.done();
    },
    'list'(test, store) {
        // WHEN
        store.mkdir('dir1');
        store.writeFile('file1.txt', 'boom1');
        // THEN
        test.deepEqual(store.list(), ['dir1', 'file1.txt']);
        test.done();
    },
    'SynthesisSession'(test, store) {
        // GIVEN
        const session = new lib_1.SynthesisSession({ store });
        const templateFile = 'foo.template.json';
        // WHEN
        session.addArtifact('my-first-artifact', {
            type: cxapi.ArtifactType.AwsCloudFormationStack,
            environment: 'aws://1222344/us-east-1',
            dependencies: ['a', 'b'],
            metadata: {
                foo: { bar: 123 }
            },
            properties: {
                templateFile,
                parameters: {
                    prop1: '1234',
                    prop2: '555'
                }
            },
            missing: {
                foo: {
                    provider: 'context-provider',
                    props: {
                        a: 'A',
                        b: 2
                    }
                }
            }
        });
        session.addArtifact('minimal-artifact', {
            type: cxapi.ArtifactType.AwsCloudFormationStack,
            environment: 'aws://111/helo-world',
            properties: {
                templateFile
            }
        });
        session.store.writeJson(templateFile, {
            Resources: {
                MyTopic: {
                    Type: 'AWS::S3::Topic'
                }
            }
        });
        session.close();
        const manifest = session.store.readJson(cxapi.MANIFEST_FILE);
        // THEN
        delete manifest.runtime; // deterministic tests
        // verify the manifest looks right
        test.deepEqual(manifest, {
            version: cxapi.PROTO_RESPONSE_VERSION,
            artifacts: {
                'my-first-artifact': {
                    type: 'aws:cloudformation:stack',
                    environment: 'aws://1222344/us-east-1',
                    dependencies: ['a', 'b'],
                    metadata: { foo: { bar: 123 } },
                    properties: {
                        templateFile: 'foo.template.json',
                        parameters: {
                            prop1: '1234',
                            prop2: '555'
                        },
                    },
                    missing: {
                        foo: { provider: 'context-provider', props: { a: 'A', b: 2 } }
                    }
                },
                'minimal-artifact': {
                    type: 'aws:cloudformation:stack',
                    environment: 'aws://111/helo-world',
                    properties: { templateFile: 'foo.template.json' }
                }
            }
        });
        // verify we have a template file
        test.deepEqual(session.store.readJson(templateFile), {
            Resources: {
                MyTopic: {
                    Type: 'AWS::S3::Topic'
                }
            }
        });
        test.done();
    },
    'stack.setParameterValue can be used to assign parameters'(test) {
        // GIVEN
        const app = createModernApp();
        const stack = new cdk.Stack(app, 'my-stack');
        const param = new cdk.Parameter(stack, 'MyParam', { type: 'string' });
        // WHEN
        stack.setParameterValue(param, 'Foo');
        // THEN
        const session = app.run();
        const props = (session.manifest.artifacts && session.manifest.artifacts['my-stack'].properties) || {};
        test.deepEqual(props.parameters, {
            MyParam: 'Foo'
        });
        test.done();
    },
    'addBuildStep can be used to produce build.json'(test) {
        // GIVEN
        const app = createModernApp();
        // WHEN
        class BuildMe extends cdk.Construct {
            synthesize(s) {
                s.addBuildStep('step_id', {
                    type: 'build-step-type',
                    parameters: {
                        boom: 123
                    }
                });
            }
        }
        new BuildMe(app, 'hey');
        // THEN
        const session = app.run();
        test.deepEqual(session.store.list(), ['build.json', 'manifest.json']);
        test.deepEqual(session.store.readJson('build.json'), {
            steps: {
                step_id: { type: 'build-step-type', parameters: { boom: 123 } }
            }
        });
        test.done();
    }
};
for (const [name, fn] of Object.entries(storeTests)) {
    const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'synthesis-tests'));
    const fsStore = new lib_1.FileSystemStore({ outdir });
    const memoryStore = new lib_1.InMemoryStore();
    storeTestMatrix[`FileSystemStore - ${name}`] = (test) => fn(test, fsStore);
    storeTestMatrix[`InMemoryStore - ${name}`] = (test) => fn(test, memoryStore);
}
module.exports = {
    'synthesis with an empty app'(test) {
        // GIVEN
        const app = createModernApp();
        // WHEN
        const session = app.run();
        // THEN
        test.same(app.run(), session); // same session if we run() again
        test.deepEqual(session.store.list(), ['manifest.json']);
        test.deepEqual(session.store.readJson('manifest.json').artifacts, {});
        test.done();
    },
    'single empty stack'(test) {
        // GIVEN
        const app = createModernApp();
        new cdk.Stack(app, 'one-stack');
        // WHEN
        const session = app.run();
        // THEN
        test.deepEqual(session.store.list(), [
            'manifest.json',
            'one-stack.template.json'
        ]);
        test.done();
    },
    'some random construct implements "synthesize"'(test) {
        // GIVEN
        const app = createModernApp();
        const stack = new cdk.Stack(app, 'one-stack');
        class MyConstruct extends cdk.Construct {
            synthesize(s) {
                s.store.writeJson('foo.json', { bar: 123 });
                s.addArtifact('my-random-construct', {
                    type: cxapi.ArtifactType.AwsCloudFormationStack,
                    environment: 'aws://12345/bar',
                    properties: {
                        templateFile: 'file://boom'
                    }
                });
            }
        }
        new MyConstruct(stack, 'MyConstruct');
        // WHEN
        const session = app.run();
        // THEN
        test.deepEqual(session.store.list(), [
            'foo.json',
            'manifest.json',
            'one-stack.template.json'
        ]);
        test.deepEqual(session.store.readJson('foo.json'), { bar: 123 });
        test.deepEqual(session.manifest, {
            version: '0.19.0',
            artifacts: {
                'my-random-construct': {
                    type: 'aws:cloudformation:stack',
                    environment: 'aws://12345/bar',
                    properties: { templateFile: 'file://boom' }
                },
                'one-stack': {
                    type: 'aws:cloudformation:stack',
                    environment: 'aws://unknown-account/unknown-region',
                    properties: { templateFile: 'one-stack.template.json' }
                }
            },
        });
        test.done();
    },
    'backwards compatibility: cdk.out contains all synthesized stacks'(test) {
        // GIVEN
        const app = new cdk.App();
        const stack1 = new cdk.Stack(app, 'stack1');
        new cdk.Resource(stack1, 'Resource1', { type: 'AWS::CDK::Resource' });
        new cdk.Resource(stack1, 'Resource2', { type: 'AWS::CDK::Resource' });
        const stack2 = new cdk.Stack(app, 'stack2');
        new cdk.Resource(stack2, 'ResourceA', { type: 'AWS::CDK::Resource' });
        // WHEN
        const session = app.run();
        const legacy = session.store.readJson(cxapi.OUTFILE_NAME);
        // THEN
        const t1 = legacy.stacks.find(s => s.name === 'stack1').template;
        const t2 = legacy.stacks.find(s => s.name === 'stack2').template;
        test.deepEqual(t1, {
            Resources: {
                Resource1: { Type: 'AWS::CDK::Resource' },
                Resource2: { Type: 'AWS::CDK::Resource' }
            }
        });
        test.deepEqual(t2, {
            Resources: {
                ResourceA: { Type: 'AWS::CDK::Resource' }
            }
        });
        test.done();
    },
    'store': storeTestMatrix
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5zeW50aGVzaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LnN5bnRoZXNpcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEseUNBQTBDO0FBQzFDLHlCQUEwQjtBQUUxQix5QkFBMEI7QUFDMUIsNkJBQThCO0FBQzlCLDhCQUErQjtBQUMvQixnQ0FBMEU7QUFFMUUsTUFBTSxlQUFlLEdBQVEsRUFBRSxDQUFDO0FBRWhDLFNBQVMsZUFBZTtJQUN0QixPQUFPLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQztRQUNqQixDQUFDLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxFQUFFLE1BQU07UUFDL0MsQ0FBQyxLQUFLLENBQUMseUJBQXlCLENBQUMsRUFBRSxNQUFNO0tBQzFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFtSEQsRUFBRTtBQUNGLDBEQUEwRDtBQUMxRCxFQUFFO0FBQ0YsTUFBTSxVQUFVLEdBQUc7SUFDakIsd0JBQXdCLENBQUMsSUFBVSxFQUFFLEtBQXdCO1FBQzNELE9BQU87UUFDUCxLQUFLLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNwQyxLQUFLLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVuQyxPQUFPO1FBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLHVCQUF1QixDQUFDLENBQUMsQ0FBQztRQUV2RSxPQUFPO1FBQ1AsS0FBSyxDQUFDLFFBQVEs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LE9BQU8sRUFBRSxlQUFlO0NBQ3pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3hhcGkgPSByZXF1aXJlKCdAYXdzLWNkay9jeC1hcGknKTtcbmltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5pbXBvcnQgeyBUZXN0IH0gZnJvbSAnbm9kZXVuaXQnO1xuaW1wb3J0IG9zID0gcmVxdWlyZSgnb3MnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IGNkayA9IHJlcXVpcmUoJy4uL2xpYicpO1xuaW1wb3J0IHsgRmlsZVN5c3RlbVN0b3JlLCBJbk1lbW9yeVN0b3JlLCBTeW50aGVzaXNTZXNzaW9uIH0gZnJvbSAnLi4vbGliJztcblxuY29uc3Qgc3RvcmVUZXN0TWF0cml4OiBhbnkgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlTW9kZXJuQXBwKCkge1xuICByZXR1cm4gbmV3IGNkay5BcHAoe1xuICAgIFtjeGFwaS5ESVNBQkxFX0xFR0FDWV9NQU5JRkVTVF9DT05URVhUXTogJ3RydWUnLFxuICAgIFtjeGFwaS5ESVNBQkxFX1ZFUlNJT05fUkVQT1JUSU5HXTogJ3RydWUnLCAvLyBmb3IgdGVzdCByZXByb2R1Y2liaWxpdHlcbiAgfSk7XG59XG5cbmV4cG9ydCA9IHtcbiAgJ3N5bnRoZXNpcyB3aXRoIGFuIGVtcHR5IGFwcCcodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgYXBwID0gY3JlYXRlTW9kZXJuQXBwKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3Qgc2Vzc2lvbiA9IGFwcC5ydW4oKTtcblxuICAgIC8vIFRIRU5cbiAgICB0ZXN0LnNhbWUoYXBwLnJ1bigpLCBzZXNzaW9uKTsgLy8gc2FtZSBzZXNzaW9uIGlmIHdlIHJ1bigpIGFnYWluXG4gICAgdGVzdC5kZWVwRXF1YWwoc2Vzc2lvbi5zdG9yZS5saXN0KCksIFsgJ21hbmlmZXN0Lmpzb24nIF0pO1xuICAgIHRlc3QuZGVlcEVxdWFsKHNlc3Npb24uc3RvcmUucmVhZEpzb24oJ21hbmlmZXN0Lmpzb24nKS5hcnRpZmFjdHMsIHt9KTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnc2luZ2xlIGVtcHR5IHN0YWNrJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBhcHAgPSBjcmVhdGVNb2Rlcm5BcHAoKTtcbiAgICBuZXcgY2RrLlN0YWNrKGFwcCwgJ29uZS1zdGFjaycpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHNlc3Npb24gPSBhcHAucnVuKCk7XG5cbiAgICAvLyBUSEVOXG4gICAgdGVzdC5kZWVwRXF1YWwoc2Vzc2lvbi5zdG9yZS5saXN0KCksIFtcbiAgICAgICdtYW5pZmVzdC5qc29uJyxcbiAgICAgICdvbmUtc3RhY2sudGVtcGxhdGUuanNvbidcbiAgICBdKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnc29tZSByYW5kb20gY29uc3RydWN0IGltcGxlbWVudHMgXCJzeW50aGVzaXplXCInKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGFwcCA9IGNyZWF0ZU1vZGVybkFwcCgpO1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdvbmUtc3RhY2snKTtcblxuICAgIGNsYXNzIE15Q29uc3RydWN0IGV4dGVuZHMgY2RrLkNvbnN0cnVjdCBpbXBsZW1lbnRzIGNkay5JU3ludGhlc2l6YWJsZSB7XG4gICAgICBwdWJsaWMgc3ludGhlc2l6ZShzOiBjZGsuSVN5bnRoZXNpc1Nlc3Npb24pIHtcbiAgICAgICAgcy5zdG9yZS53cml0ZUpzb24oJ2Zvby5qc29uJywgeyBiYXI6IDEyMyB9KTtcbiAgICAgICAgcy5hZGRBcnRpZmFjdCgnbXktcmFuZG9tLWNvbnN0cnVjdCcsIHtcbiAgICAgICAgICB0eXBlOiBjeGFwaS5BcnRpZmFjdFR5cGUuQXdzQ2xvdWRGb3JtYXRpb25TdGFjayxcbiAgICAgICAgICBlbnZpcm9ubWVudDogJ2F3czovLzEyMzQ1L2JhcicsXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgdGVtcGxhdGVGaWxlOiAnZmlsZTovL2Jvb20nXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBuZXcgTXlDb25zdHJ1Y3Qoc3RhY2ssICdNeUNvbnN0cnVjdCcpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHNlc3Npb24gPSBhcHAucnVuKCk7XG5cbiAgICAvLyBUSEVOXG4gICAgdGVzdC5kZWVwRXF1YWwoc2Vzc2lvbi5zdG9yZS5saXN0KCksIFtcbiAgICAgICdmb28uanNvbicsXG4gICAgICAnbWFuaWZlc3QuanNvbicsXG4gICAgICAnb25lLXN0YWNrLnRlbXBsYXRlLmpzb24nXG4gICAgXSk7XG4gICAgdGVzdC5kZWVwRXF1YWwoc2Vzc2lvbi5zdG9yZS5yZWFkSnNvbignZm9vLmpzb24nKSwgeyBiYXI6IDEyMyB9KTtcbiAgICB0ZXN0LmRlZXBFcXVhbChzZXNzaW9uLm1hbmlmZXN0LCB7XG4gICAgICB2ZXJzaW9uOiAnMC4xOS4wJyxcbiAgICAgIGFydGlmYWN0czoge1xuICAgICAgICAnbXktcmFuZG9tLWNvbnN0cnVjdCc6IHtcbiAgICAgICAgICB0eXBlOiAnYXdzOmNsb3VkZm9ybWF0aW9uOnN0YWNrJyxcbiAgICAgICAgICBlbnZpcm9ubWVudDogJ2F3czovLzEyMzQ1L2JhcicsXG4gICAgICAgICAgcHJvcGVydGllczogeyB0ZW1wbGF0ZUZpbGU6ICdmaWxlOi8vYm9vbScgfVxuICAgICAgICB9LFxuICAgICAgICAnb25lLXN0YWNrJzoge1xuICAgICAgICAgIHR5cGU6ICdhd3M6Y2xvdWRmb3JtYXRpb246c3RhY2snLFxuICAgICAgICAgIGVudmlyb25tZW50OiAnYXdzOi8vdW5rbm93bi1hY2NvdW50L3Vua25vd24tcmVnaW9uJyxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7IHRlbXBsYXRlRmlsZTogJ29uZS1zdGFjay50ZW1wbGF0ZS5qc29uJyB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2JhY2t3YXJkcyBjb21wYXRpYmlsaXR5OiBjZGsub3V0IGNvbnRhaW5zIGFsbCBzeW50aGVzaXplZCBzdGFja3MnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG4gICAgY29uc3Qgc3RhY2sxID0gbmV3IGNkay5TdGFjayhhcHAsICdzdGFjazEnKTtcbiAgICBuZXcgY2RrLlJlc291cmNlKHN0YWNrMSwgJ1Jlc291cmNlMScsIHsgdHlwZTogJ0FXUzo6Q0RLOjpSZXNvdXJjZScgfSk7XG4gICAgbmV3IGNkay5SZXNvdXJjZShzdGFjazEsICdSZXNvdXJjZTInLCB7IHR5cGU6ICdBV1M6OkNESzo6UmVzb3VyY2UnIH0pO1xuICAgIGNvbnN0IHN0YWNrMiA9IG5ldyBjZGsuU3RhY2soYXBwLCAnc3RhY2syJyk7XG4gICAgbmV3IGNkay5SZXNvdXJjZShzdGFjazIsICdSZXNvdXJjZUEnLCB7IHR5cGU6ICdBV1M6OkNESzo6UmVzb3VyY2UnIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHNlc3Npb24gPSBhcHAucnVuKCk7XG4gICAgY29uc3QgbGVnYWN5OiBjeGFwaS5TeW50aGVzaXplUmVzcG9uc2UgPSBzZXNzaW9uLnN0b3JlLnJlYWRKc29uKGN4YXBpLk9VVEZJTEVfTkFNRSk7XG5cbiAgICAvLyBUSEVOXG4gICAgY29uc3QgdDEgPSBsZWdhY3kuc3RhY2tzLmZpbmQocyA9PiBzLm5hbWUgPT09ICdzdGFjazEnKSEudGVtcGxhdGU7XG4gICAgY29uc3QgdDIgPSBsZWdhY3kuc3RhY2tzLmZpbmQocyA9PiBzLm5hbWUgPT09ICdzdGFjazInKSEudGVtcGxhdGU7XG5cbiAgICB0ZXN0LmRlZXBFcXVhbCh0MSwge1xuICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgIFJlc291cmNlMTogeyBUeXBlOiAnQVdTOjpDREs6OlJlc291cmNlJyB9LFxuICAgICAgICBSZXNvdXJjZTI6IHsgVHlwZTogJ0FXUzo6Q0RLOjpSZXNvdXJjZScgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHRlc3QuZGVlcEVxdWFsKHQyLCB7XG4gICAgICBSZXNvdXJjZXM6IHtcbiAgICAgICAgUmVzb3VyY2VBOiB7IFR5cGU6ICdBV1M6OkNESzo6UmVzb3VyY2UnIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnc3RvcmUnOiBzdG9yZVRlc3RNYXRyaXhcbn07XG5cbi8vXG4vLyBhbGwgdGhlc2UgdGVzdHMgd2lsbCBiZSBleGVjdXRlZCBmb3IgZWFjaCB0eXBlIG9mIHN0b3JlXG4vL1xuY29uc3Qgc3RvcmVUZXN0cyA9IHtcbiAgJ3dyaXRlRmlsZSgpL3JlYWRGaWxlKCknKHRlc3Q6IFRlc3QsIHN0b3JlOiBjZGsuSVNlc3Npb25TdG9yZSkge1xuICAgIC8vIFdIRU5cbiAgICBzdG9yZS53cml0ZUZpbGUoJ2JsYS50eHQnLCAnaGVsbG8nKTtcbiAgICBzdG9yZS53cml0ZUZpbGUoJ2hleS50eHQnLCAnMTIzNCcpO1xuXG4gICAgLy8gVEhFTlxuICAgIHRlc3QuZGVlcEVxdWFsKHN0b3JlLnJlYWRGaWxlKCdibGEudHh0JykudG9TdHJpbmcoKSwgJ2hlbGxvJyk7XG4gICAgdGVzdC5kZWVwRXF1YWwoc3RvcmUucmVhZEZpbGUoJ2hleS50eHQnKS50b1N0cmluZygpLCAnMTIzNCcpO1xuICAgIHRlc3QudGhyb3dzKCgpID0+IHN0b3JlLndyaXRlRmlsZSgnYmxhLnR4dCcsICdvdmVycmlkZSBpcyBmb3JiaWRkZW4nKSk7XG5cbiAgICAvLyBXSEVOXG4gICAgc3RvcmUuZmluYWxpemUoKTtcblxuICAgIC8vIFRIRU5cbiAgICB0ZXN0LnRocm93cygoKSA9PiBzdG9yZS53cml0ZUZpbGUoJ2Fub3RoZXIudHh0JywgJ2xvY2tlZCEnKSk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2V4aXN0cygpIGZvciBmaWxlcycodGVzdDogVGVzdCwgc3RvcmU6IGNkay5JU2Vzc2lvblN0b3JlKSB7XG4gICAgLy8gV0hFTlxuICAgIHN0b3JlLndyaXRlRmlsZSgnQS50eHQnLCAnYWFhJyk7XG5cbiAgICAvLyBUSEVOXG4gICAgdGVzdC5vayhzdG9yZS5leGlzdHMoJ0EudHh0JykpO1xuICAgIHRlc3Qub2soIXN0b3JlLmV4aXN0cygnQi50eHQnKSk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ21rZGlyJyh0ZXN0OiBUZXN0LCBzdG9yZTogY2RrLklTZXNzaW9uU3RvcmUpIHtcbiAgICAvLyBXSEVOXG4gICAgY29uc3QgZGlyMSA9IHN0b3JlLm1rZGlyKCdkaXIxJyk7XG4gICAgY29uc3QgZGlyMiA9IHN0b3JlLm1rZGlyKCdkaXIyJyk7XG5cbiAgICAvLyBUSEVOXG4gICAgdGVzdC5vayhmcy5zdGF0U3luYyhkaXIxKS5pc0RpcmVjdG9yeSgpKTtcbiAgICB0ZXN0Lm9rKGZzLnN0YXRTeW5jKGRpcjIpLmlzRGlyZWN0b3J5KCkpO1xuICAgIHRlc3QudGhyb3dzKCgpID0+IHN0b3JlLm1rZGlyKCdkaXIxJykpO1xuXG4gICAgLy8gV0hFTlxuICAgIHN0b3JlLmZpbmFsaXplKCk7XG4gICAgdGVzdC50aHJvd3MoKCkgPT4gc3RvcmUubWtkaXIoJ2RpcjMnKSk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2xpc3QnKHRlc3Q6IFRlc3QsIHN0b3JlOiBjZGsuSVNlc3Npb25TdG9yZSkge1xuICAgIC8vIFdIRU5cbiAgICBzdG9yZS5ta2RpcignZGlyMScpO1xuICAgIHN0b3JlLndyaXRlRmlsZSgnZmlsZTEudHh0JywgJ2Jvb20xJyk7XG5cbiAgICAvLyBUSEVOXG4gICAgdGVzdC5kZWVwRXF1YWwoc3RvcmUubGlzdCgpLCBbJ2RpcjEnLCAnZmlsZTEudHh0J10pO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdTeW50aGVzaXNTZXNzaW9uJyh0ZXN0OiBUZXN0LCBzdG9yZTogY2RrLklTZXNzaW9uU3RvcmUpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHNlc3Npb24gPSBuZXcgU3ludGhlc2lzU2Vzc2lvbih7IHN0b3JlIH0pO1xuICAgIGNvbnN0IHRlbXBsYXRlRmlsZSA9ICdmb28udGVtcGxhdGUuanNvbic7XG5cbiAgICAvLyBXSEVOXG4gICAgc2Vzc2lvbi5hZGRBcnRpZmFjdCgnbXktZmlyc3QtYXJ0aWZhY3QnLCB7XG4gICAgICB0eXBlOiBjeGFwaS5BcnRpZmFjdFR5cGUuQXdzQ2xvdWRGb3JtYXRpb25TdGFjayxcbiAgICAgIGVudmlyb25tZW50OiAnYXdzOi8vMTIyMjM0NC91cy1lYXN0LTEnLFxuICAgICAgZGVwZW5kZW5jaWVzOiBbJ2EnLCAnYiddLFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgZm9vOiB7IGJhcjogMTIzIH1cbiAgICAgIH0sXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHRlbXBsYXRlRmlsZSxcbiAgICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICAgIHByb3AxOiAnMTIzNCcsXG4gICAgICAgICAgcHJvcDI6ICc1NTUnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBtaXNzaW5nOiB7XG4gICAgICAgIGZvbzoge1xuICAgICAgICAgIHByb3ZpZGVyOiAnY29udGV4dC1wcm92aWRlcicsXG4gICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGE6ICdBJyxcbiAgICAgICAgICAgIGI6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHNlc3Npb24uYWRkQXJ0aWZhY3QoJ21pbmltYWwtYXJ0aWZhY3QnLCB7XG4gICAgICB0eXBlOiBjeGFwaS5BcnRpZmFjdFR5cGUuQXdzQ2xvdWRGb3JtYXRpb25TdGFjayxcbiAgICAgIGVudmlyb25tZW50OiAnYXdzOi8vMTExL2hlbG8td29ybGQnLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICB0ZW1wbGF0ZUZpbGVcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHNlc3Npb24uc3RvcmUud3JpdGVKc29uKHRlbXBsYXRlRmlsZSwge1xuICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgIE15VG9waWM6IHtcbiAgICAgICAgICBUeXBlOiAnQVdTOjpTMzo6VG9waWMnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHNlc3Npb24uY2xvc2UoKTtcblxuICAgIGNvbnN0IG1hbmlmZXN0ID0gc2Vzc2lvbi5zdG9yZS5yZWFkSnNvbihjeGFwaS5NQU5JRkVTVF9GSUxFKTtcblxuICAgIC8vIFRIRU5cbiAgICBkZWxldGUgbWFuaWZlc3QucnVudGltZTsgLy8gZGV0ZXJtaW5pc3RpYyB0ZXN0c1xuXG4gICAgLy8gdmVyaWZ5IHRoZSBtYW5pZmVzdCBsb29rcyByaWdodFxuICAgIHRlc3QuZGVlcEVxdWFsKG1hbmlmZXN0LCB7XG4gICAgICB2ZXJzaW9uOiBjeGFwaS5QUk9UT19SRVNQT05TRV9WRVJTSU9OLFxuICAgICAgYXJ0aWZhY3RzOiB7XG4gICAgICAgICdteS1maXJzdC1hcnRpZmFjdCc6IHtcbiAgICAgICAgICB0eXBlOiAnYXdzOmNsb3VkZm9ybWF0aW9uOnN0YWNrJyxcbiAgICAgICAgICBlbnZpcm9ubWVudDogJ2F3czovLzEyMjIzNDQvdXMtZWFzdC0xJyxcbiAgICAgICAgICBkZXBlbmRlbmNpZXM6IFsnYScsICdiJ10sXG4gICAgICAgICAgbWV0YWRhdGE6IHsgZm9vOiB7IGJhcjogMTIzIH0gfSxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZUZpbGU6ICdmb28udGVtcGxhdGUuanNvbicsXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgICAgIHByb3AxOiAnMTIzNCcsXG4gICAgICAgICAgICAgIHByb3AyOiAnNTU1J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1pc3Npbmc6IHtcbiAgICAgICAgICAgIGZvbzogeyBwcm92aWRlcjogJ2NvbnRleHQtcHJvdmlkZXInLCBwcm9wczogeyBhOiAnQScsIGI6IDIgfSB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnbWluaW1hbC1hcnRpZmFjdCc6IHtcbiAgICAgICAgICB0eXBlOiAnYXdzOmNsb3VkZm9ybWF0aW9uOnN0YWNrJyxcbiAgICAgICAgICBlbnZpcm9ubWVudDogJ2F3czovLzExMS9oZWxvLXdvcmxkJyxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7IHRlbXBsYXRlRmlsZTogJ2Zvby50ZW1wbGF0ZS5qc29uJyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIHZlcmlmeSB3ZSBoYXZlIGEgdGVtcGxhdGUgZmlsZVxuICAgIHRlc3QuZGVlcEVxdWFsKHNlc3Npb24uc3RvcmUucmVhZEpzb24odGVtcGxhdGVGaWxlKSwge1xuICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgIE15VG9waWM6IHtcbiAgICAgICAgICBUeXBlOiAnQVdTOjpTMzo6VG9waWMnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdzdGFjay5zZXRQYXJhbWV0ZXJWYWx1ZSBjYW4gYmUgdXNlZCB0byBhc3NpZ24gcGFyYW1ldGVycycodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgYXBwID0gY3JlYXRlTW9kZXJuQXBwKCk7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ215LXN0YWNrJyk7XG4gICAgY29uc3QgcGFyYW0gPSBuZXcgY2RrLlBhcmFtZXRlcihzdGFjaywgJ015UGFyYW0nLCB7IHR5cGU6ICdzdHJpbmcnIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIHN0YWNrLnNldFBhcmFtZXRlclZhbHVlKHBhcmFtLCAnRm9vJyk7XG5cbiAgICAvLyBUSEVOXG4gICAgY29uc3Qgc2Vzc2lvbiA9IGFwcC5ydW4oKTtcbiAgICBjb25zdCBwcm9wcyA9IChzZXNzaW9uLm1hbmlmZXN0LmFydGlmYWN0cyAmJiBzZXNzaW9uLm1hbmlmZXN0LmFydGlmYWN0c1snbXktc3RhY2snXS5wcm9wZXJ0aWVzKSB8fCB7fTtcbiAgICB0ZXN0LmRlZXBFcXVhbChwcm9wcy5wYXJhbWV0ZXJzLCB7XG4gICAgICBNeVBhcmFtOiAnRm9vJ1xuICAgIH0pO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdhZGRCdWlsZFN0ZXAgY2FuIGJlIHVzZWQgdG8gcHJvZHVjZSBidWlsZC5qc29uJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBhcHAgPSBjcmVhdGVNb2Rlcm5BcHAoKTtcblxuICAgIC8vIFdIRU5cbiAgICBjbGFzcyBCdWlsZE1lIGV4dGVuZHMgY2RrLkNvbnN0cnVjdCBpbXBsZW1lbnRzIGNkay5JU3ludGhlc2l6YWJsZSB7XG4gICAgICBwdWJsaWMgc3ludGhlc2l6ZShzOiBjZGsuSVN5bnRoZXNpc1Nlc3Npb24pIHtcbiAgICAgICAgcy5hZGRCdWlsZFN0ZXAoJ3N0ZXBfaWQnLCB7XG4gICAgICAgICAgdHlwZTogJ2J1aWxkLXN0ZXAtdHlwZScsXG4gICAgICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICAgICAgYm9vbTogMTIzXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBuZXcgQnVpbGRNZShhcHAsICdoZXknKTtcblxuICAgIC8vIFRIRU5cbiAgICBjb25zdCBzZXNzaW9uICA9IGFwcC5ydW4oKTtcbiAgICB0ZXN0LmRlZXBFcXVhbChzZXNzaW9uLnN0b3JlLmxpc3QoKSwgWyAnYnVpbGQuanNvbicsICdtYW5pZmVzdC5qc29uJyBdKTtcbiAgICB0ZXN0LmRlZXBFcXVhbChzZXNzaW9uLnN0b3JlLnJlYWRKc29uKCdidWlsZC5qc29uJyksIHtcbiAgICAgIHN0ZXBzOiB7XG4gICAgICAgIHN0ZXBfaWQ6IHsgdHlwZTogJ2J1aWxkLXN0ZXAtdHlwZScsIHBhcmFtZXRlcnM6IHsgYm9vbTogMTIzIH0gfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9XG59O1xuXG5mb3IgKGNvbnN0IFtuYW1lLCBmbl0gb2YgT2JqZWN0LmVudHJpZXMoc3RvcmVUZXN0cykpIHtcbiAgY29uc3Qgb3V0ZGlyID0gZnMubWtkdGVtcFN5bmMocGF0aC5qb2luKG9zLnRtcGRpcigpLCAnc3ludGhlc2lzLXRlc3RzJykpO1xuICBjb25zdCBmc1N0b3JlID0gbmV3IEZpbGVTeXN0ZW1TdG9yZSh7IG91dGRpciB9KTtcbiAgY29uc3QgbWVtb3J5U3RvcmUgPSBuZXcgSW5NZW1vcnlTdG9yZSgpO1xuICBzdG9yZVRlc3RNYXRyaXhbYEZpbGVTeXN0ZW1TdG9yZSAtICR7bmFtZX1gXSA9ICh0ZXN0OiBUZXN0KSA9PiBmbih0ZXN0LCBmc1N0b3JlKTtcbiAgc3RvcmVUZXN0TWF0cml4W2BJbk1lbW9yeVN0b3JlIC0gJHtuYW1lfWBdID0gKHRlc3Q6IFRlc3QpID0+IGZuKHRlc3QsIG1lbW9yeVN0b3JlKTtcbn1cbiJdfQ==