"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs");
const os = require("os");
const path = require("path");
const runtime_info_1 = require("./runtime-info");
class SynthesisSession {
    constructor(options) {
        this.artifacts = {};
        this.buildSteps = {};
        this.store = options.store;
        this.legacyManifest = options.legacyManifest !== undefined ? options.legacyManifest : false;
        this.runtimeInfo = options.runtimeInformation !== undefined ? options.runtimeInformation : true;
    }
    /**
     * @returns true if `obj` implements `ISynthesizable`.
     */
    static isSynthesizable(obj) {
        return 'synthesize' in obj;
    }
    get manifest() {
        if (!this._manifest) {
            throw new Error(`Cannot read assembly manifest before the session has been finalized`);
        }
        return this._manifest;
    }
    addArtifact(id, artifact) {
        cxapi.validateArtifact(artifact);
        this.artifacts[id] = artifact;
    }
    tryGetArtifact(id) {
        return this.artifacts[id];
    }
    addBuildStep(id, step) {
        if (id in this.buildSteps) {
            throw new Error(`Build step ${id} already exists`);
        }
        this.buildSteps[id] = step;
    }
    close() {
        const manifest = this._manifest = {
            version: cxapi.PROTO_RESPONSE_VERSION,
            artifacts: this.artifacts,
        };
        if (this.runtimeInfo) {
            manifest.runtime = runtime_info_1.collectRuntimeInformation();
        }
        this.store.writeFile(cxapi.MANIFEST_FILE, JSON.stringify(manifest, undefined, 2));
        // write build manifest if we have build steps
        if (Object.keys(this.buildSteps).length > 0) {
            const buildManifest = {
                steps: this.buildSteps
            };
            this.store.writeFile(cxapi.BUILD_FILE, JSON.stringify(buildManifest, undefined, 2));
        }
        if (this.legacyManifest) {
            const legacy = Object.assign({}, manifest, { stacks: renderLegacyStacks(this.artifacts, this.store) });
            // render the legacy manifest (cdk.out) which also contains a "stacks" attribute with all the rendered stacks.
            this.store.writeFile(cxapi.OUTFILE_NAME, JSON.stringify(legacy, undefined, 2));
        }
        return manifest;
    }
}
exports.SynthesisSession = SynthesisSession;
/**
 * Can be used to prepare and emit synthesis artifacts into an output directory.
 */
class FileSystemStore {
    constructor(options) {
        this.locked = false;
        this.outdir = options.outdir;
        return;
    }
    writeFile(fileName, data) {
        this.canWrite(fileName);
        const p = this.pathForArtifact(fileName);
        fs.writeFileSync(p, data);
    }
    writeJson(fileName, json) {
        this.writeFile(fileName, JSON.stringify(json, undefined, 2));
    }
    readFile(fileName) {
        const p = this.pathForArtifact(fileName);
        if (!fs.existsSync(p)) {
            throw new Error(`File not found: ${p}`);
        }
        return fs.readFileSync(p);
    }
    readJson(fileName) {
        return JSON.parse(this.readFile(fileName).toString());
    }
    exists(name) {
        const p = this.pathForArtifact(name);
        return fs.existsSync(p);
    }
    mkdir(directoryName) {
        this.canWrite(directoryName);
        const p = this.pathForArtifact(directoryName);
        fs.mkdirSync(p);
        return p;
    }
    readdir(directoryName) {
        if (!this.exists(directoryName)) {
            throw new Error(`${directoryName} not found`);
        }
        const p = this.pathForArtifact(directoryName);
        return fs.readdirSync(p);
    }
    list() {
        return fs.readdirSync(this.outdir).sort();
    }
    finalize() {
        this.locked = true;
    }
    pathForArtifact(id) {
        return path.join(this.outdir, id);
    }
    canWrite(artifactName) {
        if (this.exists(artifactName)) {
            throw new Error(`An artifact named ${artifactName} was already written to this session`);
        }
        if (this.locked) {
            throw new Error('Session has already been finalized');
        }
    }
}
exports.FileSystemStore = FileSystemStore;
class InMemoryStore {
    constructor() {
        this.files = {};
        this.dirs = {}; // value is path to a temporary directory
        this.locked = false;
    }
    writeFile(fileName, data) {
        this.canWrite(fileName);
        this.files[fileName] = data;
    }
    writeJson(fileName, json) {
        this.writeFile(fileName, JSON.stringify(json, undefined, 2));
    }
    readFile(fileName) {
        if (!(fileName in this.files)) {
            throw new Error(`${fileName} not found`);
        }
        return this.files[fileName];
    }
    readJson(fileName) {
        return JSON.parse(this.readFile(fileName).toString());
    }
    exists(name) {
        return name in this.files || name in this.dirs;
    }
    mkdir(directoryName) {
        this.canWrite(directoryName);
        const p = fs.mkdtempSync(path.join(os.tmpdir(), directoryName));
        this.dirs[directoryName] = p;
        return p;
    }
    readdir(directoryName) {
        if (!this.exists(directoryName)) {
            throw new Error(`${directoryName} not found`);
        }
        const p = this.dirs[directoryName];
        return fs.readdirSync(p);
    }
    list() {
        return [...Object.keys(this.files), ...Object.keys(this.dirs)].sort();
    }
    finalize() {
        this.locked = true;
    }
    canWrite(artifactName) {
        if (this.exists(artifactName)) {
            throw new Error(`An artifact named ${artifactName} was already written to this session`);
        }
        if (this.locked) {
            throw new Error('Session has already been finalized');
        }
    }
}
exports.InMemoryStore = InMemoryStore;
function renderLegacyStacks(artifacts, store) {
    // special case for backwards compat. build a list of stacks for the manifest
    const stacks = new Array();
    for (const [id, artifact] of Object.entries(artifacts)) {
        if (artifact.type === cxapi.ArtifactType.AwsCloudFormationStack) {
            const templateFile = artifact.properties && artifact.properties.templateFile;
            if (!templateFile) {
                throw new Error(`Invalid cloudformation artifact. Missing "template" property`);
            }
            const template = store.readJson(templateFile);
            const match = cxapi.AWS_ENV_REGEX.exec(artifact.environment);
            if (!match) {
                throw new Error(`"environment" must match regex: ${cxapi.AWS_ENV_REGEX}`);
            }
            const synthStack = {
                name: id,
                environment: { name: artifact.environment.substr('aws://'.length), account: match[1], region: match[2] },
                template,
                metadata: artifact.metadata || {},
            };
            if (artifact.dependencies && artifact.dependencies.length > 0) {
                synthStack.dependsOn = artifact.dependencies;
            }
            if (artifact.missing) {
                synthStack.missing = artifact.missing;
            }
            stacks.push(synthStack);
        }
    }
    return stacks;
}
//# sourceMappingURL=data:application/json;base64,