import { ITaggable } from '../cloudformation/resource';
import { IConstruct } from '../core/construct';
import { TagProps } from '../core/tag-manager';
import { IAspect } from './aspect';
/**
 * The common functionality for Tag and Remove Tag Aspects
 */
export declare abstract class TagBase implements IAspect {
    /**
     * The string key for the tag
     */
    readonly key: string;
    protected readonly props: TagProps;
    constructor(key: string, props?: TagProps);
    visit(construct: IConstruct): void;
    protected abstract applyTag(resource: ITaggable): void;
}
/**
 * The Tag Aspect will handle adding a tag to this node and cascading tags to children
 */
export declare class Tag extends TagBase {
    /**
     * The string value of the tag
     */
    readonly value: string;
    constructor(key: string, value: string, props?: TagProps);
    protected applyTag(resource: ITaggable): void;
}
/**
 * The RemoveTag Aspect will handle removing tags from this node and children
 */
export declare class RemoveTag extends TagBase {
    constructor(key: string, props?: TagProps);
    protected applyTag(resource: ITaggable): void;
}
