"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const construct_1 = require("./core/construct");
const synthesis_1 = require("./synthesis");
/**
 * Represents a CDK program.
 */
class App extends construct_1.Root {
    /**
     * Initializes a CDK application.
     * @param request Optional toolkit request (e.g. for tests)
     */
    constructor(context) {
        super();
        this.loadContext(context);
        // both are reverse logic
        this.legacyManifest = this.node.getContext(cxapi.DISABLE_LEGACY_MANIFEST_CONTEXT) ? false : true;
        this.runtimeInformation = this.node.getContext(cxapi.DISABLE_VERSION_REPORTING) ? false : true;
    }
    /**
     * Runs the program. Output is written to output directory as specified in the request.
     */
    run() {
        // this app has already been executed, no-op for you
        if (this._session) {
            return this._session;
        }
        const outdir = process.env[cxapi.OUTDIR_ENV];
        let store;
        if (outdir) {
            store = new synthesis_1.FileSystemStore({ outdir });
        }
        else {
            store = new synthesis_1.InMemoryStore();
        }
        const session = this._session = new synthesis_1.SynthesisSession({
            store,
            legacyManifest: this.legacyManifest,
            runtimeInformation: this.runtimeInformation
        });
        // the three holy phases of synthesis: prepare, validate and synthesize
        // prepare
        this.node.prepareTree();
        // validate
        const errors = this.node.validateTree();
        if (errors.length > 0) {
            const errorList = errors.map(e => `[${e.source.node.path}] ${e.message}`).join('\n  ');
            throw new Error(`Validation failed with the following errors:\n  ${errorList}`);
        }
        // synthesize (leaves first)
        for (const c of this.node.findAll(construct_1.ConstructOrder.PostOrder)) {
            if (synthesis_1.SynthesisSession.isSynthesizable(c)) {
                c.synthesize(session);
            }
        }
        // write session manifest and lock store
        session.close();
        return session;
    }
    /**
     * Synthesize and validate a single stack.
     * @param stackName The name of the stack to synthesize
     * @deprecated This method is going to be deprecated in a future version of the CDK
     */
    synthesizeStack(stackName) {
        if (!this.legacyManifest) {
            throw new Error('No legacy manifest available, return an old-style stack output');
        }
        const session = this.run();
        const legacy = session.store.readJson(cxapi.OUTFILE_NAME);
        const res = legacy.stacks.find(s => s.name === stackName);
        if (!res) {
            throw new Error(`Stack "${stackName}" not found`);
        }
        return res;
    }
    /**
     * Synthesizes multiple stacks
     * @deprecated This method is going to be deprecated in a future version of the CDK
     */
    synthesizeStacks(stackNames) {
        const ret = [];
        for (const stackName of stackNames) {
            ret.push(this.synthesizeStack(stackName));
        }
        return ret;
    }
    loadContext(defaults = {}) {
        // prime with defaults passed through constructor
        for (const [k, v] of Object.entries(defaults)) {
            this.node.setContext(k, v);
        }
        // read from environment
        const contextJson = process.env[cxapi.CONTEXT_ENV];
        const contextFromEnvironment = contextJson
            ? JSON.parse(contextJson)
            : {};
        for (const [k, v] of Object.entries(contextFromEnvironment)) {
            this.node.setContext(k, v);
        }
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,