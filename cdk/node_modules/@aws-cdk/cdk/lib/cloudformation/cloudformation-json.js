"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tokens_1 = require("../core/tokens");
const resolve_1 = require("../core/tokens/resolve");
const instrinsics_1 = require("./instrinsics");
/**
 * Class for JSON routines that are framework-aware
 */
class CloudFormationJSON {
    /**
     * Turn an arbitrary structure potentially containing Tokens into a JSON string.
     *
     * Returns a Token which will evaluate to CloudFormation expression that
     * will be evaluated by CloudFormation to the JSON representation of the
     * input structure.
     *
     * All Tokens substituted in this way must return strings, or the evaluation
     * in CloudFormation will fail.
     *
     * @param obj The object to stringify
     * @param context The Construct from which to resolve any Tokens found in the object
     */
    static stringify(obj, context) {
        return new tokens_1.Token(() => {
            // Resolve inner value first so that if they evaluate to literals, we
            // maintain the type (and discard 'undefined's).
            //
            // Then replace intrinsics with a special subclass of Token that
            // overrides toJSON() to the marker string, so if we resolve() the
            // strings again it evaluates to the right string. It also
            // deep-escapes any strings inside the intrinsic, so that if literal
            // strings are used in {Fn::Join} or something, they will end up
            // escaped in the final JSON output.
            const resolved = resolve_1.resolve(obj, {
                scope: context,
                prefix: []
            });
            // We can just directly return this value, since resolve() will be called
            // on our return value anyway.
            return JSON.stringify(deepReplaceIntrinsics(resolved));
        }).toString();
        /**
         * Recurse into a structure, replace all intrinsics with IntrinsicTokens.
         */
        function deepReplaceIntrinsics(x) {
            if (x == null) {
                return x;
            }
            if (instrinsics_1.isIntrinsic(x)) {
                return wrapIntrinsic(x);
            }
            if (Array.isArray(x)) {
                return x.map(deepReplaceIntrinsics);
            }
            if (typeof x === 'object') {
                for (const key of Object.keys(x)) {
                    x[key] = deepReplaceIntrinsics(x[key]);
                }
            }
            return x;
        }
        function wrapIntrinsic(intrinsic) {
            return new IntrinsicToken(() => deepQuoteStringsForJSON(intrinsic));
        }
    }
}
exports.CloudFormationJSON = CloudFormationJSON;
/**
 * Token that also stringifies in the toJSON() operation.
 */
class IntrinsicToken extends tokens_1.Token {
    /**
     * Special handler that gets called when JSON.stringify() is used.
     */
    toJSON() {
        return this.toString();
    }
}
/**
 * Deep escape strings for use in a JSON context
 */
function deepQuoteStringsForJSON(x) {
    if (typeof x === 'string') {
        // Whenever we escape a string we strip off the outermost quotes
        // since we're already in a quoted context.
        const stringified = JSON.stringify(x);
        return stringified.substring(1, stringified.length - 1);
    }
    if (Array.isArray(x)) {
        return x.map(deepQuoteStringsForJSON);
    }
    if (typeof x === 'object') {
        for (const key of Object.keys(x)) {
            x[key] = deepQuoteStringsForJSON(x[key]);
        }
    }
    return x;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRmb3JtYXRpb24tanNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNsb3VkZm9ybWF0aW9uLWpzb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwyQ0FBdUM7QUFDdkMsb0RBQWlEO0FBQ2pELCtDQUE0QztBQUU1Qzs7R0FFRztBQUNILE1BQWEsa0JBQWtCO0lBQzdCOzs7Ozs7Ozs7Ozs7T0FZRztJQUNJLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBUSxFQUFFLE9BQW1CO1FBQ25ELE9BQU8sSUFBSSxjQUFLLENBQUMsR0FBRyxFQUFFO1lBQ3BCLHFFQUFxRTtZQUNyRSxnREFBZ0Q7WUFDaEQsRUFBRTtZQUNGLGdFQUFnRTtZQUNoRSxrRUFBa0U7WUFDbEUsMERBQTBEO1lBQzFELG9FQUFvRTtZQUNwRSxnRUFBZ0U7WUFDaEUsb0NBQW9DO1lBQ3BDLE1BQU0sUUFBUSxHQUFHLGlCQUFPLENBQUMsR0FBRyxFQUFFO2dCQUM1QixLQUFLLEVBQUUsT0FBTztnQkFDZCxNQUFNLEVBQUUsRUFBRTthQUNYLENBQUMsQ0FBQztZQUVILHlFQUF5RTtZQUN6RSw4QkFBOEI7WUFDOUIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFZDs7V0FFRztRQUNILFNBQVMscUJBQXFCLENBQUMsQ0FBTTtZQUNuQyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7Z0JBQUUsT0FBTyxDQUFDLENBQUM7YUFBRTtZQUU1QixJQUFJLHlCQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2xCLE9BQU8sYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3pCO1lBRUQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNwQixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQzthQUNyQztZQUVELElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO2dCQUN6QixLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2hDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDeEM7YUFDRjtZQUVELE9BQU8sQ0FBQyxDQUFDO1FBQ1gsQ0FBQztRQUVELFNBQVMsYUFBYSxDQUFDLFNBQWM7WUFDbkMsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUE5REQsZ0RBOERDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLGNBQWUsU0FBUSxjQUFLO0lBQ2hDOztPQUVHO0lBQ0ksTUFBTTtRQUNYLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pCLENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsU0FBUyx1QkFBdUIsQ0FBQyxDQUFNO0lBQ3JDLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQ3pCLGdFQUFnRTtRQUNoRSwyQ0FBMkM7UUFDM0MsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxPQUFPLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDekQ7SUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDcEIsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7S0FDdkM7SUFFRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUN6QixLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDaEMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzFDO0tBQ0Y7SUFFRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQ29uc3RydWN0IH0gZnJvbSBcIi4uL2NvcmUvY29uc3RydWN0XCI7XG5pbXBvcnQgeyBUb2tlbiB9IGZyb20gXCIuLi9jb3JlL3Rva2Vuc1wiO1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCIuLi9jb3JlL3Rva2Vucy9yZXNvbHZlXCI7XG5pbXBvcnQgeyBpc0ludHJpbnNpYyB9IGZyb20gXCIuL2luc3RyaW5zaWNzXCI7XG5cbi8qKlxuICogQ2xhc3MgZm9yIEpTT04gcm91dGluZXMgdGhhdCBhcmUgZnJhbWV3b3JrLWF3YXJlXG4gKi9cbmV4cG9ydCBjbGFzcyBDbG91ZEZvcm1hdGlvbkpTT04ge1xuICAvKipcbiAgICogVHVybiBhbiBhcmJpdHJhcnkgc3RydWN0dXJlIHBvdGVudGlhbGx5IGNvbnRhaW5pbmcgVG9rZW5zIGludG8gYSBKU09OIHN0cmluZy5cbiAgICpcbiAgICogUmV0dXJucyBhIFRva2VuIHdoaWNoIHdpbGwgZXZhbHVhdGUgdG8gQ2xvdWRGb3JtYXRpb24gZXhwcmVzc2lvbiB0aGF0XG4gICAqIHdpbGwgYmUgZXZhbHVhdGVkIGJ5IENsb3VkRm9ybWF0aW9uIHRvIHRoZSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZVxuICAgKiBpbnB1dCBzdHJ1Y3R1cmUuXG4gICAqXG4gICAqIEFsbCBUb2tlbnMgc3Vic3RpdHV0ZWQgaW4gdGhpcyB3YXkgbXVzdCByZXR1cm4gc3RyaW5ncywgb3IgdGhlIGV2YWx1YXRpb25cbiAgICogaW4gQ2xvdWRGb3JtYXRpb24gd2lsbCBmYWlsLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqIFRoZSBvYmplY3QgdG8gc3RyaW5naWZ5XG4gICAqIEBwYXJhbSBjb250ZXh0IFRoZSBDb25zdHJ1Y3QgZnJvbSB3aGljaCB0byByZXNvbHZlIGFueSBUb2tlbnMgZm91bmQgaW4gdGhlIG9iamVjdFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzdHJpbmdpZnkob2JqOiBhbnksIGNvbnRleHQ6IElDb25zdHJ1Y3QpOiBzdHJpbmcge1xuICAgIHJldHVybiBuZXcgVG9rZW4oKCkgPT4ge1xuICAgICAgLy8gUmVzb2x2ZSBpbm5lciB2YWx1ZSBmaXJzdCBzbyB0aGF0IGlmIHRoZXkgZXZhbHVhdGUgdG8gbGl0ZXJhbHMsIHdlXG4gICAgICAvLyBtYWludGFpbiB0aGUgdHlwZSAoYW5kIGRpc2NhcmQgJ3VuZGVmaW5lZCdzKS5cbiAgICAgIC8vXG4gICAgICAvLyBUaGVuIHJlcGxhY2UgaW50cmluc2ljcyB3aXRoIGEgc3BlY2lhbCBzdWJjbGFzcyBvZiBUb2tlbiB0aGF0XG4gICAgICAvLyBvdmVycmlkZXMgdG9KU09OKCkgdG8gdGhlIG1hcmtlciBzdHJpbmcsIHNvIGlmIHdlIHJlc29sdmUoKSB0aGVcbiAgICAgIC8vIHN0cmluZ3MgYWdhaW4gaXQgZXZhbHVhdGVzIHRvIHRoZSByaWdodCBzdHJpbmcuIEl0IGFsc29cbiAgICAgIC8vIGRlZXAtZXNjYXBlcyBhbnkgc3RyaW5ncyBpbnNpZGUgdGhlIGludHJpbnNpYywgc28gdGhhdCBpZiBsaXRlcmFsXG4gICAgICAvLyBzdHJpbmdzIGFyZSB1c2VkIGluIHtGbjo6Sm9pbn0gb3Igc29tZXRoaW5nLCB0aGV5IHdpbGwgZW5kIHVwXG4gICAgICAvLyBlc2NhcGVkIGluIHRoZSBmaW5hbCBKU09OIG91dHB1dC5cbiAgICAgIGNvbnN0IHJlc29sdmVkID0gcmVzb2x2ZShvYmosIHtcbiAgICAgICAgc2NvcGU6IGNvbnRleHQsXG4gICAgICAgIHByZWZpeDogW11cbiAgICAgIH0pO1xuXG4gICAgICAvLyBXZSBjYW4ganVzdCBkaXJlY3RseSByZXR1cm4gdGhpcyB2YWx1ZSwgc2luY2UgcmVzb2x2ZSgpIHdpbGwgYmUgY2FsbGVkXG4gICAgICAvLyBvbiBvdXIgcmV0dXJuIHZhbHVlIGFueXdheS5cbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkZWVwUmVwbGFjZUludHJpbnNpY3MocmVzb2x2ZWQpKTtcbiAgICB9KS50b1N0cmluZygpO1xuXG4gICAgLyoqXG4gICAgICogUmVjdXJzZSBpbnRvIGEgc3RydWN0dXJlLCByZXBsYWNlIGFsbCBpbnRyaW5zaWNzIHdpdGggSW50cmluc2ljVG9rZW5zLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlZXBSZXBsYWNlSW50cmluc2ljcyh4OiBhbnkpOiBhbnkge1xuICAgICAgaWYgKHggPT0gbnVsbCkgeyByZXR1cm4geDsgfVxuXG4gICAgICBpZiAoaXNJbnRyaW5zaWMoeCkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBJbnRyaW5zaWMoeCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHgpKSB7XG4gICAgICAgIHJldHVybiB4Lm1hcChkZWVwUmVwbGFjZUludHJpbnNpY3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHggPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHgpKSB7XG4gICAgICAgICAgeFtrZXldID0gZGVlcFJlcGxhY2VJbnRyaW5zaWNzKHhba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd3JhcEludHJpbnNpYyhpbnRyaW5zaWM6IGFueSk6IEludHJpbnNpY1Rva2VuIHtcbiAgICAgIHJldHVybiBuZXcgSW50cmluc2ljVG9rZW4oKCkgPT4gZGVlcFF1b3RlU3RyaW5nc0ZvckpTT04oaW50cmluc2ljKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVG9rZW4gdGhhdCBhbHNvIHN0cmluZ2lmaWVzIGluIHRoZSB0b0pTT04oKSBvcGVyYXRpb24uXG4gKi9cbmNsYXNzIEludHJpbnNpY1Rva2VuIGV4dGVuZHMgVG9rZW4ge1xuICAvKipcbiAgICogU3BlY2lhbCBoYW5kbGVyIHRoYXQgZ2V0cyBjYWxsZWQgd2hlbiBKU09OLnN0cmluZ2lmeSgpIGlzIHVzZWQuXG4gICAqL1xuICBwdWJsaWMgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWVwIGVzY2FwZSBzdHJpbmdzIGZvciB1c2UgaW4gYSBKU09OIGNvbnRleHRcbiAqL1xuZnVuY3Rpb24gZGVlcFF1b3RlU3RyaW5nc0ZvckpTT04oeDogYW55KTogYW55IHtcbiAgaWYgKHR5cGVvZiB4ID09PSAnc3RyaW5nJykge1xuICAgIC8vIFdoZW5ldmVyIHdlIGVzY2FwZSBhIHN0cmluZyB3ZSBzdHJpcCBvZmYgdGhlIG91dGVybW9zdCBxdW90ZXNcbiAgICAvLyBzaW5jZSB3ZSdyZSBhbHJlYWR5IGluIGEgcXVvdGVkIGNvbnRleHQuXG4gICAgY29uc3Qgc3RyaW5naWZpZWQgPSBKU09OLnN0cmluZ2lmeSh4KTtcbiAgICByZXR1cm4gc3RyaW5naWZpZWQuc3Vic3RyaW5nKDEsIHN0cmluZ2lmaWVkLmxlbmd0aCAtIDEpO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcbiAgICByZXR1cm4geC5tYXAoZGVlcFF1b3RlU3RyaW5nc0ZvckpTT04pO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB4ID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHgpKSB7XG4gICAgICB4W2tleV0gPSBkZWVwUXVvdGVTdHJpbmdzRm9ySlNPTih4W2tleV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB4O1xufVxuIl19