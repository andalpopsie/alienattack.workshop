"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tokens_1 = require("../core/tokens");
/**
 * A Token that represents a CloudFormation reference to another resource
 *
 * If these references are used in a different stack from where they are
 * defined, appropriate CloudFormation `Export`s and `Fn::ImportValue`s will be
 * synthesized automatically instead of the regular CloudFormation references.
 *
 * Additionally, the dependency between the stacks will be recorded, and the toolkit
 * will make sure to deploy producing stack before the consuming stack.
 *
 * This magic happens in the prepare() phase, where consuming stacks will call
 * `consumeFromStack` on these Tokens and if they happen to be exported by a different
 * Stack, we'll register the dependency.
 */
class CfnReference extends tokens_1.Token {
    /**
     * Check whether this is actually a CfnReference
     */
    static isCfnReference(x) {
        return x.consumeFromStack !== undefined;
    }
    constructor(value, displayName, scope) {
        if (typeof (value) === 'function') {
            throw new Error('CfnReference can only hold CloudFormation intrinsics (not a function)');
        }
        // prepend scope path to display name
        if (displayName && scope) {
            displayName = `${scope.node.path}.${displayName}`;
        }
        super(value, displayName);
        this.replacementTokens = new Map();
        this.isReference = true;
        if (scope !== undefined) {
            this.producingStack = scope.node.stack;
        }
    }
    resolve(context) {
        // If we have a special token for this consuming stack, resolve that. Otherwise resolve as if
        // we are in the same stack.
        const token = this.replacementTokens.get(context.scope.node.stack);
        if (token) {
            return token.resolve(context);
        }
        else {
            return super.resolve(context);
        }
    }
    /**
     * Register a stack this references is being consumed from.
     */
    consumeFromStack(consumingStack) {
        if (this.producingStack && this.producingStack !== consumingStack && !this.replacementTokens.has(consumingStack)) {
            // We're trying to resolve a cross-stack reference
            consumingStack.addDependency(this.producingStack);
            this.replacementTokens.set(consumingStack, this.exportValue(this, consumingStack));
        }
    }
    /**
     * Export a Token value for use in another stack
     *
     * Works by mutating the producing stack in-place.
     */
    exportValue(tokenValue, consumingStack) {
        const producingStack = this.producingStack;
        if (producingStack.env.account !== consumingStack.env.account || producingStack.env.region !== consumingStack.env.region) {
            throw new Error('Can only reference cross stacks in the same region and account.');
        }
        // Ensure a singleton "Exports" scoping Construct
        // This mostly exists to trigger LogicalID munging, which would be
        // disabled if we parented constructs directly under Stack.
        // Also it nicely prevents likely construct name clashes
        const exportsName = 'Exports';
        let stackExports = producingStack.node.tryFindChild(exportsName);
        if (stackExports === undefined) {
            stackExports = new construct_1.Construct(producingStack, exportsName);
        }
        // Ensure a singleton Output for this value
        const resolved = producingStack.node.resolve(tokenValue);
        const id = 'Output' + JSON.stringify(resolved);
        let output = stackExports.node.tryFindChild(id);
        if (!output) {
            output = new output_1.Output(stackExports, id, { value: tokenValue });
        }
        // We want to return an actual FnImportValue Token here, but Fn.importValue() returns a 'string',
        // so construct one in-place.
        return new tokens_1.Token({ 'Fn::ImportValue': output.obtainExportName() });
    }
}
exports.CfnReference = CfnReference;
const construct_1 = require("../core/construct");
const output_1 = require("./output");
//# sourceMappingURL=data:application/json;base64,