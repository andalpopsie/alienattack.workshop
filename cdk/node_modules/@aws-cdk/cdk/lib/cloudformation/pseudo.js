"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tokens_1 = require("../core/tokens");
const cfn_tokens_1 = require("./cfn-tokens");
/**
 * Accessor for pseudo parameters
 *
 * Since pseudo parameters need to be anchored to a stack somewhere in the
 * construct tree, this class takes an scope parameter; the pseudo parameter
 * values can be obtained as properties from an scoped object.
 */
class Aws {
    constructor() {
    }
    static get accountId() {
        return new AwsAccountId(undefined).toString();
    }
    static get urlSuffix() {
        return new AwsURLSuffix(undefined).toString();
    }
    static get notificationArns() {
        return new AwsNotificationARNs(undefined).toList();
    }
    static get partition() {
        return new AwsPartition(undefined).toString();
    }
    static get region() {
        return new AwsRegion(undefined).toString();
    }
    static get stackId() {
        return new AwsStackId(undefined).toString();
    }
    static get stackName() {
        return new AwsStackName(undefined).toString();
    }
    static get noValue() {
        return new AwsNoValue().toString();
    }
}
exports.Aws = Aws;
/**
 * Accessor for scoped pseudo parameters
 *
 * These pseudo parameters are anchored to a stack somewhere in the construct
 * tree, and their values will be exported automatically.
 */
class ScopedAws {
    constructor(scope) {
        this.scope = scope;
    }
    get accountId() {
        return new AwsAccountId(this.scope).toString();
    }
    get urlSuffix() {
        return new AwsURLSuffix(this.scope).toString();
    }
    get notificationArns() {
        return new AwsNotificationARNs(this.scope).toList();
    }
    get partition() {
        return new AwsPartition(this.scope).toString();
    }
    get region() {
        return new AwsRegion(this.scope).toString();
    }
    get stackId() {
        return new AwsStackId(this.scope).toString();
    }
    get stackName() {
        return new AwsStackName(this.scope).toString();
    }
}
exports.ScopedAws = ScopedAws;
class PseudoParameter extends cfn_tokens_1.CfnReference {
    constructor(name, scope) {
        super({ Ref: name }, name, scope);
    }
}
class AwsAccountId extends PseudoParameter {
    constructor(scope) {
        super('AWS::AccountId', scope);
    }
}
class AwsURLSuffix extends PseudoParameter {
    constructor(scope) {
        super('AWS::URLSuffix', scope);
    }
}
class AwsNotificationARNs extends PseudoParameter {
    constructor(scope) {
        super('AWS::NotificationARNs', scope);
    }
}
class AwsNoValue extends tokens_1.Token {
    constructor() {
        super({ Ref: 'AWS::NoValue' });
    }
}
exports.AwsNoValue = AwsNoValue;
class AwsPartition extends PseudoParameter {
    constructor(scope) {
        super('AWS::Partition', scope);
    }
}
class AwsRegion extends PseudoParameter {
    constructor(scope) {
        super('AWS::Region', scope);
    }
}
class AwsStackId extends PseudoParameter {
    constructor(scope) {
        super('AWS::StackId', scope);
    }
}
class AwsStackName extends PseudoParameter {
    constructor(scope) {
        super('AWS::StackName', scope);
    }
}
//# sourceMappingURL=data:application/json;base64,