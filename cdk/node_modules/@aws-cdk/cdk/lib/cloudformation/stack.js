"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const app_1 = require("../app");
const construct_1 = require("../core/construct");
const cfn_tokens_1 = require("./cfn-tokens");
const logical_id_1 = require("./logical-id");
/**
 * A root construct which represents a single CloudFormation stack.
 */
class Stack extends construct_1.Construct {
    /**
     * Creates a new stack.
     *
     * @param scope Parent of this stack, usually a Program instance.
     * @param name The name of the CloudFormation stack. Defaults to "Stack".
     * @param props Stack properties.
     */
    constructor(scope, name, props) {
        // For unit test convenience parents are optional, so bypass the type check when calling the parent.
        super(scope, name);
        this.props = props;
        /**
         * Lists all missing contextual information.
         * This is returned when the stack is synthesized under the 'missing' attribute
         * and allows tooling to obtain the context and re-synthesize.
         */
        this.missingContext = {};
        /**
         * Options for CloudFormation template (like version, transform, description).
         */
        this.templateOptions = {};
        /*
         * Used to determine if this construct is a stack.
         */
        this._isStack = true;
        /**
         * Other stacks this stack depends on
         */
        this.stackDependencies = new Set();
        /**
         * Values set for parameters in cloud assembly.
         */
        this.parameterValues = {};
        if (name && !Stack.VALID_STACK_NAME_REGEX.test(name)) {
            throw new Error(`Stack name must match the regular expression: ${Stack.VALID_STACK_NAME_REGEX.toString()}, got '${name}'`);
        }
        this.env = this.parseEnvironment(props);
        this.logicalIds = new logical_id_1.LogicalIDs(props && props.namingScheme ? props.namingScheme : new logical_id_1.HashedAddressingScheme());
        this.name = this.node.id;
    }
    /**
     * Adds a metadata annotation "aws:cdk:physical-name" to the construct if physicalName
     * is non-null. This can be used later by tools and aspects to determine if resources
     * have been created with physical names.
     */
    static annotatePhysicalName(construct, physicalName) {
        if (physicalName == null) {
            return;
        }
        construct.node.addMetadata('aws:cdk:physical-name', physicalName);
    }
    /**
     * Return whether the given object is a Stack.
     *
     * We do attribute detection since we can't reliably use 'instanceof'.
     */
    static isStack(construct) {
        return construct._isStack;
    }
    /**
     * Returns the environment specification for this stack (aws://account/region).
     */
    get environment() {
        const account = this.env.account || 'unknown-account';
        const region = this.env.region || 'unknown-region';
        return `aws://${account}/${region}`;
    }
    /**
     * Looks up a resource by path.
     *
     * @returns The Resource or undefined if not found
     */
    findResource(path) {
        const r = this.node.findChild(path);
        if (!r) {
            return undefined;
        }
        // found an element, check if it's a resource (duck-type)
        if (!('resourceType' in r)) {
            throw new Error(`Found a stack element for ${path} but it is not a resource: ${r.toString()}`);
        }
        return r;
    }
    /**
     * Returns the CloudFormation template for this stack by traversing
     * the tree and invoking toCloudFormation() on all Entity objects.
     */
    toCloudFormation() {
        // before we begin synthesis, we shall lock this stack, so children cannot be added
        this.node.lock();
        try {
            const template = {
                Description: this.templateOptions.description,
                Transform: this.templateOptions.transform,
                AWSTemplateFormatVersion: this.templateOptions.templateFormatVersion,
                Metadata: this.templateOptions.metadata
            };
            const elements = stackElements(this);
            const fragments = elements.map(e => this.node.resolve(e.toCloudFormation()));
            // merge in all CloudFormation fragments collected from the tree
            for (const fragment of fragments) {
                merge(template, fragment);
            }
            // resolve all tokens and remove all empties
            const ret = this.node.resolve(template) || {};
            this.logicalIds.assertAllRenamesApplied();
            return ret;
        }
        finally {
            // allow mutations after synthesis is finished.
            this.node.unlock();
        }
    }
    /**
     * @param why more information about why region is required.
     * @returns The region in which this stack is deployed. Throws if region is not defined.
     */
    requireRegion(why) {
        if (!this.env.region) {
            throw new Error(`${why ? why + '. ' : ''}Stack requires region information. It can be either supplied via the "env" property, ` +
                `via the "${cxapi.DEFAULT_REGION_CONTEXT_KEY}" context parameters or using "aws configure"`);
        }
        return this.env.region;
    }
    /**
     * Returns the AWS account ID of this Stack,
     * or throws an exception if the account ID is not set in the environment.
     *
     * @param why more information about why is the account ID required
     * @returns the AWS account ID of this Stack
     */
    requireAccountId(why) {
        if (!this.env.account) {
            throw new Error(`${why ? why + '. ' : ''}Stack requires account information. ` +
                'It can be supplied either via the "env" property when creating the Stack, or by using "aws configure"');
        }
        return this.env.account;
    }
    parentApp() {
        const parent = this.node.scope;
        return parent instanceof app_1.App
            ? parent
            : undefined;
    }
    /**
     * Indicate that a context key was expected
     *
     * Contains instructions on how the key should be supplied.
     * @param key Key that uniquely identifies this missing context.
     * @param details The set of parameters needed to obtain the context (specific to context provider).
     */
    reportMissingContext(key, details) {
        this.missingContext[key] = details;
    }
    /**
     * Rename a generated logical identities
     */
    renameLogical(oldId, newId) {
        if (this.node.children.length > 0) {
            throw new Error("All renames must be set up before adding elements to the stack");
        }
        this.logicalIds.renameLogical(oldId, newId);
    }
    /**
     * Add a dependency between this stack and another stack
     */
    addDependency(stack) {
        if (stack.dependsOnStack(this)) {
            // tslint:disable-next-line:max-line-length
            throw new Error(`Stack '${this.name}' already depends on stack '${stack.name}'. Adding this dependency would create a cyclic reference.`);
        }
        this.stackDependencies.add(stack);
    }
    /**
     * Return the stacks this stack depends on
     */
    dependencies() {
        return Array.from(this.stackDependencies.values());
    }
    /**
     * The account in which this stack is defined
     *
     * Either returns the literal account for this stack if it was specified
     * literally upon Stack construction, or a symbolic value that will evaluate
     * to the correct account at deployment time.
     */
    get accountId() {
        if (this.props && this.props.env && this.props.env.account) {
            return this.props.env.account;
        }
        // Does not need to be scoped, the only situation in which
        // Export/Fn::ImportValue would work if { Ref: "AWS::AccountId" } is the
        // same for provider and consumer anyway.
        return pseudo_1.Aws.accountId;
    }
    /**
     * The region in which this stack is defined
     *
     * Either returns the literal region for this stack if it was specified
     * literally upon Stack construction, or a symbolic value that will evaluate
     * to the correct region at deployment time.
     */
    get region() {
        if (this.props && this.props.env && this.props.env.region) {
            return this.props.env.region;
        }
        // Does not need to be scoped, the only situation in which
        // Export/Fn::ImportValue would work if { Ref: "AWS::AccountId" } is the
        // same for provider and consumer anyway.
        return pseudo_1.Aws.region;
    }
    /**
     * The partition in which this stack is defined
     */
    get partition() {
        // Always return a non-scoped partition intrinsic. These will usually
        // be used to construct an ARN, but there are no cross-partition
        // calls anyway.
        return pseudo_1.Aws.partition;
    }
    /**
     * The Amazon domain suffix for the region in which this stack is defined
     */
    get urlSuffix() {
        return new pseudo_1.ScopedAws(this).urlSuffix;
    }
    /**
     * The ID of the stack
     *
     * @example After resolving, looks like arn:aws:cloudformation:us-west-2:123456789012:stack/teststack/51af3dc0-da77-11e4-872e-1234567db123
     */
    get stackId() {
        return new pseudo_1.ScopedAws(this).stackId;
    }
    /**
     * The name of the stack currently being deployed
     *
     * Only available at deployment time.
     */
    get stackName() {
        return new pseudo_1.ScopedAws(this).stackName;
    }
    /**
     * Returns the list of notification Amazon Resource Names (ARNs) for the current stack.
     */
    get notificationArns() {
        return new pseudo_1.ScopedAws(this).notificationArns;
    }
    /**
     * Creates an ARN from components.
     *
     * If `partition`, `region` or `account` are not specified, the stack's
     * partition, region and account will be used.
     *
     * If any component is the empty string, an empty string will be inserted
     * into the generated ARN at the location that component corresponds to.
     *
     * The ARN will be formatted as follows:
     *
     *   arn:{partition}:{service}:{region}:{account}:{resource}{sep}}{resource-name}
     *
     * The required ARN pieces that are omitted will be taken from the stack that
     * the 'scope' is attached to. If all ARN pieces are supplied, the supplied scope
     * can be 'undefined'.
     */
    formatArn(components) {
        return arn_1.arnFromComponents(components, this);
    }
    /**
     * Given an ARN, parses it and returns components.
     *
     * If the ARN is a concrete string, it will be parsed and validated. The
     * separator (`sep`) will be set to '/' if the 6th component includes a '/',
     * in which case, `resource` will be set to the value before the '/' and
     * `resourceName` will be the rest. In case there is no '/', `resource` will
     * be set to the 6th components and `resourceName` will be set to the rest
     * of the string.
     *
     * If the ARN includes tokens (or is a token), the ARN cannot be validated,
     * since we don't have the actual value yet at the time of this function
     * call. You will have to know the separator and the type of ARN. The
     * resulting `ArnComponents` object will contain tokens for the
     * subexpressions of the ARN, not string literals. In this case this
     * function cannot properly parse the complete final resourceName (path) out
     * of ARNs that use '/' to both separate the 'resource' from the
     * 'resourceName' AND to subdivide the resourceName further. For example, in
     * S3 ARNs:
     *
     *    arn:aws:s3:::my_corporate_bucket/path/to/exampleobject.png
     *
     * After parsing the resourceName will not contain
     * 'path/to/exampleobject.png' but simply 'path'. This is a limitation
     * because there is no slicing functionality in CloudFormation templates.
     *
     * @param sep The separator used to separate resource from resourceName
     * @param hasName Whether there is a name component in the ARN at all. For
     * example, SNS Topics ARNs have the 'resource' component contain the topic
     * name, and no 'resourceName' component.
     *
     * @returns an ArnComponents object which allows access to the various
     * components of the ARN.
     *
     * @returns an ArnComponents object which allows access to the various
     *      components of the ARN.
     */
    parseArn(arn, sepIfToken = '/', hasName = true) {
        return arn_1.parseArn(arn, sepIfToken, hasName);
    }
    /**
     * Sets the value of a CloudFormation parameter.
     * @param parameter The parameter to set the value for
     * @param value The value, can use `${}` notation to reference other assembly block attributes.
     */
    setParameterValue(parameter, value) {
        this.parameterValues[parameter.logicalId] = value;
    }
    /**
     * Validate stack name
     *
     * CloudFormation stack names can include dashes in addition to the regular identifier
     * character classes, and we don't allow one of the magic markers.
     */
    _validateId(name) {
        if (name && !Stack.VALID_STACK_NAME_REGEX.test(name)) {
            throw new Error(`Stack name must match the regular expression: ${Stack.VALID_STACK_NAME_REGEX.toString()}, got '${name}'`);
        }
    }
    /**
     * Prepare stack
     *
     * Find all CloudFormation references and tell them we're consuming them.
     *
     * Find all dependencies as well and add the appropriate DependsOn fields.
     */
    prepare() {
        // References
        for (const ref of this.node.findReferences()) {
            if (cfn_tokens_1.CfnReference.isCfnReference(ref)) {
                ref.consumeFromStack(this);
            }
        }
        // Resource dependencies
        for (const dependency of this.node.findDependencies()) {
            const theirStack = dependency.target.node.stack;
            if (theirStack !== undefined && theirStack !== this) {
                this.addDependency(theirStack);
            }
            else {
                for (const target of findResources([dependency.target])) {
                    for (const source of findResources([dependency.source])) {
                        source.addDependsOn(target);
                    }
                }
            }
        }
    }
    synthesize(session) {
        const template = `${this.node.id}.template.json`;
        // write the CloudFormation template as a JSON file
        session.store.writeJson(template, this.toCloudFormation());
        const artifact = {
            type: cxapi.ArtifactType.AwsCloudFormationStack,
            environment: this.environment,
            properties: {
                templateFile: template,
            }
        };
        if (Object.keys(this.parameterValues).length > 0) {
            artifact.properties = artifact.properties || {};
            artifact.properties.parameters = this.node.resolve(this.parameterValues);
        }
        const deps = this.dependencies().map(s => s.node.id);
        if (deps.length > 0) {
            artifact.dependencies = deps;
        }
        const meta = this.collectMetadata();
        if (Object.keys(meta).length > 0) {
            artifact.metadata = meta;
        }
        if (this.missingContext && Object.keys(this.missingContext).length > 0) {
            artifact.missing = this.missingContext;
        }
        // add an artifact that represents this stack
        session.addArtifact(this.node.id, artifact);
    }
    /**
     * Applied defaults to environment attributes.
     */
    parseEnvironment(props) {
        // start with `env`.
        const env = (props && props.env) || {};
        // if account is not specified, attempt to read from context.
        if (!env.account) {
            env.account = this.node.getContext(cxapi.DEFAULT_ACCOUNT_CONTEXT_KEY);
        }
        // if region is not specified, attempt to read from context.
        if (!env.region) {
            env.region = this.node.getContext(cxapi.DEFAULT_REGION_CONTEXT_KEY);
        }
        return env;
    }
    /**
     * Check whether this stack has a (transitive) dependency on another stack
     */
    dependsOnStack(other) {
        if (this === other) {
            return true;
        }
        for (const dep of this.stackDependencies) {
            if (dep.dependsOnStack(other)) {
                return true;
            }
        }
        return false;
    }
    collectMetadata() {
        const output = {};
        visit(this);
        const app = this.parentApp();
        if (app && app.node.metadata.length > 0) {
            output[construct_1.PATH_SEP] = app.node.metadata;
        }
        return output;
        function visit(node) {
            if (node.node.metadata.length > 0) {
                // Make the path absolute
                output[construct_1.PATH_SEP + node.node.path] = node.node.metadata.map(md => node.node.resolve(md));
            }
            for (const child of node.node.children) {
                visit(child);
            }
        }
    }
}
Stack.VALID_STACK_NAME_REGEX = /^[A-Za-z][A-Za-z0-9-]*$/;
exports.Stack = Stack;
function merge(template, part) {
    for (const section of Object.keys(part)) {
        const src = part[section];
        // create top-level section if it doesn't exist
        let dest = template[section];
        if (!dest) {
            template[section] = dest = src;
        }
        else {
            // add all entities from source section to destination section
            for (const id of Object.keys(src)) {
                if (id in dest) {
                    throw new Error(`section '${section}' already contains '${id}'`);
                }
                dest[id] = src[id];
            }
        }
    }
}
/**
 * Collect all StackElements from a construct
 *
 * @param node Root node to collect all StackElements from
 * @param into Array to append StackElements to
 * @returns The same array as is being collected into
 */
function stackElements(node, into = []) {
    if (stack_element_1.StackElement.isStackElement(node)) {
        into.push(node);
    }
    for (const child of node.node.children) {
        stackElements(child, into);
    }
    return into;
}
// These imports have to be at the end to prevent circular imports
const arn_1 = require("./arn");
const pseudo_1 = require("./pseudo");
const resource_1 = require("./resource");
const stack_element_1 = require("./stack-element");
/**
 * Find all resources in a set of constructs
 */
function findResources(roots) {
    const ret = new Array();
    for (const root of roots) {
        ret.push(...root.node.findAll().filter(resource_1.Resource.isResource));
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,