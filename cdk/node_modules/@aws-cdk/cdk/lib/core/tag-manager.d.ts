import { TagType } from '../cloudformation/resource';
/**
 * Properties for a tag
 */
export interface TagProps {
    /**
     * Handles AutoScalingGroup PropagateAtLaunch property
     */
    applyToLaunchedInstances?: boolean;
    /**
     * An array of Resource Types that will not receive this tag
     *
     * An empty array will allow this tag to be applied to all resources. A
     * non-empty array will apply this tag only if the Resource type is not in
     * this array.
     * @default []
     */
    excludeResourceTypes?: string[];
    /**
     * An array of Resource Types that will receive this tag
     *
     * An empty array will match any Resource. A non-empty array will apply this
     * tag only to Resource types that are included in this array.
     * @default []
     */
    includeResourceTypes?: string[];
    /**
     * Higher or equal priority tags will take precedence
     *
     * Setting priority will enable the user to control tags when they need to not
     * follow the default precedence pattern of last applied and closest to the
     * construct in the tree.
     * @default 0 for Tag 1 for RemoveTag
     */
    priority?: number;
}
/**
 * TagManager facilitates a common implementation of tagging for Constructs.
 */
export declare class TagManager {
    private readonly tagType;
    private readonly resourceTypeName;
    private readonly tags;
    private readonly removedTags;
    constructor(tagType: TagType, resourceTypeName: string);
    /**
     * Adds the specified tag to the array of tags
     *
     * @param key The key value of the tag
     * @param value The value value of the tag
     * @param props A `TagProps` defaulted to applyToLaunchInstances true
     */
    setTag(key: string, value: string, props?: TagProps): void;
    /**
     * Removes the specified tag from the array if it exists
     *
     * @param key The key of the tag to remove
     */
    removeTag(key: string, props?: TagProps): void;
    /**
     * Renders tags into the proper format based on TagType
     */
    renderTags(): any;
    private canApplyTag;
}
