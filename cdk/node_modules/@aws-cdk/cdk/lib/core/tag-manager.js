"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../cloudformation/resource");
/**
 * TagManager facilitates a common implementation of tagging for Constructs.
 */
class TagManager {
    constructor(tagType, resourceTypeName) {
        this.tagType = tagType;
        this.resourceTypeName = resourceTypeName;
        this.tags = {};
        this.removedTags = {};
    }
    /**
     * Adds the specified tag to the array of tags
     *
     * @param key The key value of the tag
     * @param value The value value of the tag
     * @param props A `TagProps` defaulted to applyToLaunchInstances true
     */
    setTag(key, value, props) {
        const tagProps = props || {};
        if (!this.canApplyTag(key, tagProps)) {
            // tag is blocked by a remove
            return;
        }
        tagProps.applyToLaunchedInstances = tagProps.applyToLaunchedInstances !== false;
        this.tags[key] = { value, props: tagProps };
        // ensure nothing is left in removeTags
        delete this.removedTags[key];
    }
    /**
     * Removes the specified tag from the array if it exists
     *
     * @param key The key of the tag to remove
     */
    removeTag(key, props) {
        const tagProps = props || {};
        const priority = tagProps.priority === undefined ? 0 : tagProps.priority;
        if (!this.canApplyTag(key, tagProps)) {
            // tag is blocked by a remove
            return;
        }
        delete this.tags[key];
        this.removedTags[key] = priority;
    }
    /**
     * Renders tags into the proper format based on TagType
     */
    renderTags() {
        const keys = Object.keys(this.tags);
        switch (this.tagType) {
            case resource_1.TagType.Standard: {
                const tags = [];
                for (const key of keys) {
                    tags.push({ key, value: this.tags[key].value });
                }
                return tags.length === 0 ? undefined : tags;
            }
            case resource_1.TagType.AutoScalingGroup: {
                const tags = [];
                for (const key of keys) {
                    tags.push({
                        key,
                        value: this.tags[key].value,
                        propagateAtLaunch: this.tags[key].props.applyToLaunchedInstances !== false
                    });
                }
                return tags.length === 0 ? undefined : tags;
            }
            case resource_1.TagType.Map: {
                const tags = {};
                for (const key of keys) {
                    tags[key] = this.tags[key].value;
                }
                return Object.keys(tags).length === 0 ? undefined : tags;
            }
            case resource_1.TagType.NotTaggable: {
                return undefined;
            }
        }
    }
    canApplyTag(key, props) {
        const include = props.includeResourceTypes || [];
        const exclude = props.excludeResourceTypes || [];
        const priority = props.priority === undefined ? 0 : props.priority;
        if (exclude.length !== 0 &&
            exclude.indexOf(this.resourceTypeName) !== -1) {
            return false;
        }
        if (include.length !== 0 &&
            include.indexOf(this.resourceTypeName) === -1) {
            return false;
        }
        if (this.tags[key]) {
            if (this.tags[key].props.priority !== undefined) {
                return priority >= this.tags[key].props.priority;
            }
        }
        if (this.removedTags[key]) {
            return priority >= this.removedTags[key];
        }
        return true;
    }
}
exports.TagManager = TagManager;
//# sourceMappingURL=data:application/json;base64,