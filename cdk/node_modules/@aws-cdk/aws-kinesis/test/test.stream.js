"use strict";
const assert_1 = require("@aws-cdk/assert");
const iam = require("@aws-cdk/aws-iam");
const kms = require("@aws-cdk/aws-kms");
const cdk = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
module.exports = {
    'default stream'(test) {
        const stack = new cdk.Stack();
        new lib_1.Stream(stack, 'MyStream');
        assert_1.expect(stack).toMatch({
            "Resources": {
                "MyStream5C050E93": {
                    "Type": "AWS::Kinesis::Stream",
                    "Properties": {
                        "RetentionPeriodHours": 24,
                        "ShardCount": 1
                    }
                }
            }
        });
        test.done();
    },
    "uses explicit shard count"(test) {
        const stack = new cdk.Stack();
        new lib_1.Stream(stack, 'MyStream', {
            shardCount: 2
        });
        assert_1.expect(stack).toMatch({
            "Resources": {
                "MyStream5C050E93": {
                    "Type": "AWS::Kinesis::Stream",
                    "Properties": {
                        "RetentionPeriodHours": 24,
                        "ShardCount": 2
                    }
                }
            }
        });
        test.done();
    },
    "uses explicit retention period"(test) {
        const stack = new cdk.Stack();
        new lib_1.Stream(stack, 'MyStream', {
            retentionPeriodHours: 168
        });
        assert_1.expect(stack).toMatch({
            "Resources": {
                "MyStream5C050E93": {
                    "Type": "AWS::Kinesis::Stream",
                    "Properties": {
                        "RetentionPeriodHours": 168,
                        "ShardCount": 1
                    }
                }
            }
        });
        test.done();
    },
    "retention period must be between 24 and 168 hours"(test) {
        test.throws({
            block: () => {
                new lib_1.Stream(new cdk.Stack(), 'MyStream', {
                    retentionPeriodHours: 169
                });
            },
            message: "retentionPeriodHours must be between 24 and 168 hours"
        });
        test.throws({
            block: () => {
                new lib_1.Stream(new cdk.Stack(), 'MyStream', {
                    retentionPeriodHours: 23
                });
            },
            message: "retentionPeriodHours must be between 24 and 168 hours"
        });
        test.done();
    },
    "auto-creates KMS key if encryption type is KMS but no key is provided"(test) {
        const stack = new cdk.Stack();
        new lib_1.Stream(stack, 'MyStream', {
            encryption: lib_1.StreamEncryption.Kms
        });
        assert_1.expect(stack).toMatch({
            "Resources": {
                "MyStreamKey76F3300E": {
                    "Type": "AWS::KMS::Key",
                    "Properties": {
                        "Description": "Created by MyStream",
                        "KeyPolicy": {
                            "Statement": [
                                {
                                    "Action": [
                                        "kms:Create*",
                                        "kms:Describe*",
                                        "kms:Enable*",
                                        "kms:List*",
                                        "kms:Put*",
                                        "kms:Update*",
                                        "kms:Revoke*",
                                        "kms:Disable*",
                                        "kms:Get*",
                                        "kms:Delete*",
                                        "kms:ScheduleKeyDeletion",
                                        "kms:CancelKeyDeletion"
                                    ],
                                    "Effect": "Allow",
                                    "Principal": {
                                        "AWS": {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:",
                                                    {
                                                        "Ref": "AWS::Partition"
                                                    },
                                                    ":iam::",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":root"
                                                ]
                                            ]
                                        }
                                    },
                                    "Resource": "*"
                                }
                            ],
                            "Version": "2012-10-17"
                        }
                    },
                    "DeletionPolicy": "Retain"
                },
                "MyStream5C050E93": {
                    "Type": "AWS::Kinesis::Stream",
                    "Properties": {
                        "RetentionPeriodHours": 24,
                        "ShardCount": 1,
                        "StreamEncryption": {
                            "EncryptionType": "KMS",
                            "KeyId": {
                                "Fn::GetAtt": [
                                    "MyStreamKey76F3300E",
                                    "Arn"
                                ]
                            }
                        }
                    }
                }
            }
        });
        test.done();
    },
    "uses explicit KMS key if encryption type is KMS and a key is provided"(test) {
        const stack = new cdk.Stack();
        const explicitKey = new kms.EncryptionKey(stack, 'ExplicitKey', {
            description: `Explicit Key`
        });
        new lib_1.Stream(stack, 'MyStream', {
            encryption: lib_1.StreamEncryption.Kms,
            encryptionKey: explicitKey
        });
        assert_1.expect(stack).toMatch({
            "Resources": {
                "ExplicitKey7DF42F37": {
                    "Type": "AWS::KMS::Key",
                    "Properties": {
                        "Description": "Explicit Key",
                        "KeyPolicy": {
                            "Statement": [
                                {
                                    "Action": [
                                        "kms:Create*",
                                        "kms:Describe*",
                                        "kms:Enable*",
                                        "kms:List*",
                                        "kms:Put*",
                                        "kms:Update*",
                                        "kms:Revoke*",
                                        "kms:Disable*",
                                        "kms:Get*",
                                        "kms:Delete*",
                                        "kms:ScheduleKeyDeletion",
                                        "kms:CancelKeyDeletion"
                                    ],
                                    "Effect": "Allow",
                                    "Principal": {
                                        "AWS": {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:",
                                                    {
                                                        "Ref": "AWS::Partition"
                                                    },
                                                    ":iam::",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":root"
                                                ]
                                            ]
                                        }
                                    },
                                    "Resource": "*"
                                }
                            ],
                            "Version": "2012-10-17"
                        }
                    },
                    "DeletionPolicy": "Retain"
                },
                "MyStream5C050E93": {
                    "Type": "AWS::Kinesis::Stream",
                    "Properties": {
                        "RetentionPeriodHours": 24,
                        "ShardCount": 1,
                        "StreamEncryption": {
                            "EncryptionType": "KMS",
                            "KeyId": {
                                "Fn::GetAtt": [
                                    "ExplicitKey7DF42F37",
                                    "Arn"
                                ]
                            }
                        }
                    }
                }
            }
        });
        test.done();
    },
    "permissions": {
        "with encryption": {
            "grantRead creates and attaches a policy with read only access to Stream and EncryptionKey"(test) {
                const stack = new cdk.Stack();
                const stream = new lib_1.Stream(stack, 'MyStream', {
                    encryption: lib_1.StreamEncryption.Kms
                });
                const user = new iam.User(stack, "MyUser");
                stream.grantRead(user);
                assert_1.expect(stack).toMatch({
                    "Resources": {
                        "MyStreamKey76F3300E": {
                            "Type": "AWS::KMS::Key",
                            "Properties": {
                                "Description": "Created by MyStream",
                                "KeyPolicy": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kms:Create*",
                                                "kms:Describe*",
                                                "kms:Enable*",
                                                "kms:List*",
                                                "kms:Put*",
                                                "kms:Update*",
                                                "kms:Revoke*",
                                                "kms:Disable*",
                                                "kms:Get*",
                                                "kms:Delete*",
                                                "kms:ScheduleKeyDeletion",
                                                "kms:CancelKeyDeletion"
                                            ],
                                            "Effect": "Allow",
                                            "Principal": {
                                                "AWS": {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:",
                                                            {
                                                                "Ref": "AWS::Partition"
                                                            },
                                                            ":iam::",
                                                            {
                                                                "Ref": "AWS::AccountId"
                                                            },
                                                            ":root"
                                                        ]
                                                    ]
                                                }
                                            },
                                            "Resource": "*"
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                }
                            },
                            "DeletionPolicy": "Retain"
                        },
                        "MyStream5C050E93": {
                            "Type": "AWS::Kinesis::Stream",
                            "Properties": {
                                "RetentionPeriodHours": 24,
                                "ShardCount": 1,
                                "StreamEncryption": {
                                    "EncryptionType": "KMS",
                                    "KeyId": {
                                        "Fn::GetAtt": [
                                            "MyStreamKey76F3300E",
                                            "Arn"
                                        ]
                                    }
                                }
                            }
                        },
                        "MyUserDC45028B": {
                            "Type": "AWS::IAM::User"
                        },
                        "MyUserDefaultPolicy7B897426": {
                            "Type": "AWS::IAM::Policy",
                            "Properties": {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kinesis:DescribeStream",
                                                "kinesis:GetRecords",
                                                "kinesis:GetShardIterator"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStream5C050E93",
                                                    "Arn"
                                                ]
                                            }
                                        },
                                        {
                                            "Action": "kms:Decrypt",
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStreamKey76F3300E",
                                                    "Arn"
                                                ]
                                            }
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": "MyUserDefaultPolicy7B897426",
                                "Users": [
                                    {
                                        "Ref": "MyUserDC45028B"
                                    }
                                ]
                            }
                        }
                    }
                });
                test.done();
            },
            "grantWrite creates and attaches a policy with write only access to Stream and EncryptionKey"(test) {
                const stack = new cdk.Stack();
                const stream = new lib_1.Stream(stack, 'MyStream', {
                    encryption: lib_1.StreamEncryption.Kms
                });
                const user = new iam.User(stack, "MyUser");
                stream.grantWrite(user);
                assert_1.expect(stack).toMatch({
                    "Resources": {
                        "MyStreamKey76F3300E": {
                            "Type": "AWS::KMS::Key",
                            "Properties": {
                                "Description": "Created by MyStream",
                                "KeyPolicy": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kms:Create*",
                                                "kms:Describe*",
                                                "kms:Enable*",
                                                "kms:List*",
                                                "kms:Put*",
                                                "kms:Update*",
                                                "kms:Revoke*",
                                                "kms:Disable*",
                                                "kms:Get*",
                                                "kms:Delete*",
                                                "kms:ScheduleKeyDeletion",
                                                "kms:CancelKeyDeletion"
                                            ],
                                            "Effect": "Allow",
                                            "Principal": {
                                                "AWS": {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:",
                                                            {
                                                                "Ref": "AWS::Partition"
                                                            },
                                                            ":iam::",
                                                            {
                                                                "Ref": "AWS::AccountId"
                                                            },
                                                            ":root"
                                                        ]
                                                    ]
                                                }
                                            },
                                            "Resource": "*"
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                }
                            },
                            "DeletionPolicy": "Retain"
                        },
                        "MyStream5C050E93": {
                            "Type": "AWS::Kinesis::Stream",
                            "Properties": {
                                "RetentionPeriodHours": 24,
                                "ShardCount": 1,
                                "StreamEncryption": {
                                    "EncryptionType": "KMS",
                                    "KeyId": {
                                        "Fn::GetAtt": [
                                            "MyStreamKey76F3300E",
                                            "Arn"
                                        ]
                                    }
                                }
                            }
                        },
                        "MyUserDC45028B": {
                            "Type": "AWS::IAM::User"
                        },
                        "MyUserDefaultPolicy7B897426": {
                            "Type": "AWS::IAM::Policy",
                            "Properties": {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kinesis:DescribeStream",
                                                "kinesis:PutRecord",
                                                "kinesis:PutRecords"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStream5C050E93",
                                                    "Arn"
                                                ]
                                            }
                                        },
                                        {
                                            "Action": [
                                                "kms:GenerateDataKey",
                                                "kms:Encrypt"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStreamKey76F3300E",
                                                    "Arn"
                                                ]
                                            }
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": "MyUserDefaultPolicy7B897426",
                                "Users": [
                                    {
                                        "Ref": "MyUserDC45028B"
                                    }
                                ]
                            }
                        }
                    }
                });
                test.done();
            },
            "grantReadWrite creates and attaches a policy with access to Stream and EncryptionKey"(test) {
                const stack = new cdk.Stack();
                const stream = new lib_1.Stream(stack, 'MyStream', {
                    encryption: lib_1.StreamEncryption.Kms
                });
                const user = new iam.User(stack, "MyUser");
                stream.grantReadWrite(user);
                assert_1.expect(stack).toMatch({
                    "Resources": {
                        "MyStreamKey76F3300E": {
                            "Type": "AWS::KMS::Key",
                            "Properties": {
                                "Description": "Created by MyStream",
                                "KeyPolicy": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kms:Create*",
                                                "kms:Describe*",
                                                "kms:Enable*",
                                                "kms:List*",
                                                "kms:Put*",
                                                "kms:Update*",
                                                "kms:Revoke*",
                                                "kms:Disable*",
                                                "kms:Get*",
                                                "kms:Delete*",
                                                "kms:ScheduleKeyDeletion",
                                                "kms:CancelKeyDeletion"
                                            ],
                                            "Effect": "Allow",
                                            "Principal": {
                                                "AWS": {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:",
                                                            {
                                                                "Ref": "AWS::Partition"
                                                            },
                                                            ":iam::",
                                                            {
                                                                "Ref": "AWS::AccountId"
                                                            },
                                                            ":root"
                                                        ]
                                                    ]
                                                }
                                            },
                                            "Resource": "*"
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                }
                            },
                            "DeletionPolicy": "Retain"
                        },
                        "MyStream5C050E93": {
                            "Type": "AWS::Kinesis::Stream",
                            "Properties": {
                                "RetentionPeriodHours": 24,
                                "ShardCount": 1,
                                "StreamEncryption": {
                                    "EncryptionType": "KMS",
                                    "KeyId": {
                                        "Fn::GetAtt": [
                                            "MyStreamKey76F3300E",
                                            "Arn"
                                        ]
                                    }
                                }
                            }
                        },
                        "MyUserDC45028B": {
                            "Type": "AWS::IAM::User"
                        },
                        "MyUserDefaultPolicy7B897426": {
                            "Type": "AWS::IAM::Policy",
                            "Properties": {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kinesis:DescribeStream",
                                                "kinesis:GetRecords",
                                                "kinesis:GetShardIterator",
                                                "kinesis:PutRecord",
                                                "kinesis:PutRecords"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStream5C050E93",
                                                    "Arn"
                                                ]
                                            }
                                        },
                                        {
                                            "Action": [
                                                "kms:Decrypt",
                                                "kms:GenerateDataKey",
                                                "kms:Encrypt"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStreamKey76F3300E",
                                                    "Arn"
                                                ]
                                            }
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": "MyUserDefaultPolicy7B897426",
                                "Users": [
                                    {
                                        "Ref": "MyUserDC45028B"
                                    }
                                ]
                            }
                        }
                    }
                });
                test.done();
            }
        },
        "with no encryption": {
            "grantRead creates and associates a policy with read only access to Stream"(test) {
                const stack = new cdk.Stack();
                const stream = new lib_1.Stream(stack, 'MyStream');
                const user = new iam.User(stack, "MyUser");
                stream.grantRead(user);
                assert_1.expect(stack).toMatch({
                    "Resources": {
                        "MyStream5C050E93": {
                            "Type": "AWS::Kinesis::Stream",
                            "Properties": {
                                "RetentionPeriodHours": 24,
                                "ShardCount": 1
                            }
                        },
                        "MyUserDC45028B": {
                            "Type": "AWS::IAM::User"
                        },
                        "MyUserDefaultPolicy7B897426": {
                            "Type": "AWS::IAM::Policy",
                            "Properties": {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kinesis:DescribeStream",
                                                "kinesis:GetRecords",
                                                "kinesis:GetShardIterator"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStream5C050E93",
                                                    "Arn"
                                                ]
                                            }
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": "MyUserDefaultPolicy7B897426",
                                "Users": [
                                    {
                                        "Ref": "MyUserDC45028B"
                                    }
                                ]
                            }
                        }
                    }
                });
                test.done();
            },
            "grantWrite creates and attaches a policy with write only access to Stream"(test) {
                const stack = new cdk.Stack();
                const stream = new lib_1.Stream(stack, 'MyStream');
                const user = new iam.User(stack, "MyUser");
                stream.grantWrite(user);
                assert_1.expect(stack).toMatch({
                    "Resources": {
                        "MyStream5C050E93": {
                            "Type": "AWS::Kinesis::Stream",
                            "Properties": {
                                "RetentionPeriodHours": 24,
                                "ShardCount": 1
                            }
                        },
                        "MyUserDC45028B": {
                            "Type": "AWS::IAM::User"
                        },
                        "MyUserDefaultPolicy7B897426": {
                            "Type": "AWS::IAM::Policy",
                            "Properties": {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kinesis:DescribeStream",
                                                "kinesis:PutRecord",
                                                "kinesis:PutRecords"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStream5C050E93",
                                                    "Arn"
                                                ]
                                            }
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": "MyUserDefaultPolicy7B897426",
                                "Users": [
                                    {
                                        "Ref": "MyUserDC45028B"
                                    }
                                ]
                            }
                        }
                    }
                });
                test.done();
            },
            "greatReadWrite creates and attaches a policy with write only access to Stream"(test) {
                const stack = new cdk.Stack();
                const stream = new lib_1.Stream(stack, 'MyStream');
                const user = new iam.User(stack, "MyUser");
                stream.grantReadWrite(user);
                assert_1.expect(stack).toMatch({
                    "Resources": {
                        "MyStream5C050E93": {
                            "Type": "AWS::Kinesis::Stream",
                            "Properties": {
                                "RetentionPeriodHours": 24,
                                "ShardCount": 1
                            }
                        },
                        "MyUserDC45028B": {
                            "Type": "AWS::IAM::User"
                        },
                        "MyUserDefaultPolicy7B897426": {
                            "Type": "AWS::IAM::Policy",
                            "Properties": {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kinesis:DescribeStream",
                                                "kinesis:GetRecords",
                                                "kinesis:GetShardIterator",
                                                "kinesis:PutRecord",
                                                "kinesis:PutRecords"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStream5C050E93",
                                                    "Arn"
                                                ]
                                            }
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": "MyUserDefaultPolicy7B897426",
                                "Users": [
                                    {
                                        "Ref": "MyUserDC45028B"
                                    }
                                ]
                            }
                        }
                    }
                });
                test.done();
            }
        }
    },
    "cross-stack permissions": {
        "no encryption"(test) {
            const stackA = new cdk.Stack();
            const streamFromStackA = new lib_1.Stream(stackA, 'MyStream');
            const refToStreamFromStackA = streamFromStackA.export();
            const stackB = new cdk.Stack();
            const user = new iam.User(stackB, 'UserWhoNeedsAccess');
            const theStreamFromStackAAsARefInStackB = lib_1.Stream.import(stackB, 'RefToStreamFromStackA', refToStreamFromStackA);
            theStreamFromStackAAsARefInStackB.grantRead(user);
            assert_1.expect(stackA).toMatch({
                "Resources": {
                    "MyStream5C050E93": {
                        "Type": "AWS::Kinesis::Stream",
                        "Properties": {
                            "RetentionPeriodHours": 24,
                            "ShardCount": 1
                        }
                    }
                },
                "Outputs": {
                    "MyStreamStreamArn495BAFC1": {
                        "Value": {
                            "Fn::GetAtt": [
                                "MyStream5C050E93",
                                "Arn"
                            ]
                        },
                        "Export": {
                            "Name": "MyStreamStreamArn495BAFC1"
                        }
                    }
                }
            });
            assert_1.expect(stackB).toMatch({
                "Resources": {
                    "UserWhoNeedsAccessF8959C3D": {
                        "Type": "AWS::IAM::User"
                    },
                    "UserWhoNeedsAccessDefaultPolicy6A9EB530": {
                        "Type": "AWS::IAM::Policy",
                        "Properties": {
                            "PolicyDocument": {
                                "Statement": [
                                    {
                                        "Action": [
                                            "kinesis:DescribeStream",
                                            "kinesis:GetRecords",
                                            "kinesis:GetShardIterator"
                                        ],
                                        "Effect": "Allow",
                                        "Resource": {
                                            "Fn::ImportValue": "MyStreamStreamArn495BAFC1"
                                        }
                                    }
                                ],
                                "Version": "2012-10-17"
                            },
                            "PolicyName": "UserWhoNeedsAccessDefaultPolicy6A9EB530",
                            "Users": [
                                {
                                    "Ref": "UserWhoNeedsAccessF8959C3D"
                                }
                            ]
                        }
                    }
                }
            });
            test.done();
        },
        "with encryption"(test) {
            const stackA = new cdk.Stack();
            const streamFromStackA = new lib_1.Stream(stackA, 'MyStream', {
                encryption: lib_1.StreamEncryption.Kms
            });
            const refToStreamFromStackA = streamFromStackA.export();
            const stackB = new cdk.Stack();
            const user = new iam.User(stackB, 'UserWhoNeedsAccess');
            const theStreamFromStackAAsARefInStackB = lib_1.Stream.import(stackB, 'RefToStreamFromStackA', refToStreamFromStackA);
            theStreamFromStackAAsARefInStackB.grantRead(user);
            assert_1.expect(stackA).toMatch({
                "Resources": {
                    "MyStreamKey76F3300E": {
                        "Type": "AWS::KMS::Key",
                        "Properties": {
                            "Description": "Created by MyStream",
                            "KeyPolicy": {
                                "Statement": [
                                    {
                                        "Action": [
                                            "kms:Create*",
                                            "kms:Describe*",
                                            "kms:Enable*",
                                            "kms:List*",
                                            "kms:Put*",
                                            "kms:Update*",
                                            "kms:Revoke*",
                                            "kms:Disable*",
                                            "kms:Get*",
                                            "kms:Delete*",
                                            "kms:ScheduleKeyDeletion",
                                            "kms:CancelKeyDeletion"
                                        ],
                                        "Effect": "Allow",
                                        "Principal": {
                                            "AWS": {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "arn:",
                                                        {
                                                            "Ref": "AWS::Partition"
                                                        },
                                                        ":iam::",
                                                        {
                                                            "Ref": "AWS::AccountId"
                                                        },
                                                        ":root"
                                                    ]
                                                ]
                                            }
                                        },
                                        "Resource": "*"
                                    }
                                ],
                                "Version": "2012-10-17"
                            }
                        },
                        "DeletionPolicy": "Retain"
                    },
                    "MyStream5C050E93": {
                        "Type": "AWS::Kinesis::Stream",
                        "Properties": {
                            "RetentionPeriodHours": 24,
                            "ShardCount": 1,
                            "StreamEncryption": {
                                "EncryptionType": "KMS",
                                "KeyId": {
                                    "Fn::GetAtt": [
                                        "MyStreamKey76F3300E",
                                        "Arn"
                                    ]
                                }
                            }
                        }
                    }
                },
                "Outputs": {
                    "MyStreamKeyKeyArn967BCB03": {
                        "Value": {
                            "Fn::GetAtt": [
                                "MyStreamKey76F3300E",
                                "Arn"
                            ]
                        },
                        "Export": {
                            "Name": "MyStreamKeyKeyArn967BCB03"
                        }
                    },
                    "MyStreamStreamArn495BAFC1": {
                        "Value": {
                            "Fn::GetAtt": [
                                "MyStream5C050E93",
                                "Arn"
                            ]
                        },
                        "Export": {
                            "Name": "MyStreamStreamArn495BAFC1"
                        }
                    }
                }
            });
            assert_1.expect(stackB).toMatch({
                "Resources": {
                    "UserWhoNeedsAccessF8959C3D": {
                        "Type": "AWS::IAM::User"
                    },
                    "UserWhoNeedsAccessDefaultPolicy6A9EB530": {
                        "Type": "AWS::IAM::Policy",
                        "Properties": {
                            "PolicyDocument": {
                                "Statement": [
                                    {
                                        "Action": [
                                            "kinesis:DescribeStream",
                                            "kinesis:GetRecords",
                                            "kinesis:GetShardIterator"
                                        ],
                                        "Effect": "Allow",
                                        "Resource": {
                                            "Fn::ImportValue": "MyStreamStreamArn495BAFC1"
                                        }
                                    },
                                    {
                                        "Action": "kms:Decrypt",
                                        "Effect": "Allow",
                                        "Resource": {
                                            "Fn::ImportValue": "MyStreamKeyKeyArn967BCB03"
                                        }
                                    }
                                ],
                                "Version": "2012-10-17"
                            },
                            "PolicyName": "UserWhoNeedsAccessDefaultPolicy6A9EB530",
                            "Users": [
                                {
                                    "Ref": "UserWhoNeedsAccessF8959C3D"
                                }
                            ]
                        }
                    }
                }
            });
            test.done();
        }
    }
};
//# sourceMappingURL=data:application/json;base64,