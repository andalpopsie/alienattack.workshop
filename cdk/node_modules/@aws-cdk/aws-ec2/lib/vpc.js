"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const cdk_1 = require("@aws-cdk/cdk");
const ec2_generated_1 = require("./ec2.generated");
const ec2_generated_2 = require("./ec2.generated");
const network_util_1 = require("./network-util");
const util_1 = require("./util");
const vpc_network_provider_1 = require("./vpc-network-provider");
const vpc_ref_1 = require("./vpc-ref");
const vpn_1 = require("./vpn");
/**
 * Name tag constant
 */
const NAME_TAG = 'Name';
/**
 * The default tenancy of instances launched into the VPC.
 */
var DefaultInstanceTenancy;
(function (DefaultInstanceTenancy) {
    /**
     * Instances can be launched with any tenancy.
     */
    DefaultInstanceTenancy["Default"] = "default";
    /**
     * Any instance launched into the VPC automatically has dedicated tenancy, unless you launch it with the default tenancy.
     */
    DefaultInstanceTenancy["Dedicated"] = "dedicated";
})(DefaultInstanceTenancy = exports.DefaultInstanceTenancy || (exports.DefaultInstanceTenancy = {}));
/**
 * VpcNetwork deploys an AWS VPC, with public and private subnets per Availability Zone.
 * For example:
 *
 * import { VpcNetwork } from '@aws-cdk/aws-ec2'
 *
 * const vpc = new VpcNetwork(this, {
 *   cidr: "10.0.0.0/16"
 * })
 *
 * // Iterate the public subnets
 * for (let subnet of vpc.publicSubnets) {
 *
 * }
 *
 * // Iterate the private subnets
 * for (let subnet of vpc.privateSubnets) {
 *
 * }
 */
class VpcNetwork extends vpc_ref_1.VpcNetworkBase {
    /**
     * VpcNetwork creates a VPC that spans a whole region.
     * It will automatically divide the provided VPC CIDR range, and create public and private subnets per Availability Zone.
     * Network routing for the public subnets will be configured to allow outbound access directly via an Internet Gateway.
     * Network routing for the private subnets will be configured to allow outbound access via a set of resilient NAT Gateways (one per AZ).
     */
    constructor(scope, id, props = {}) {
        super(scope, id);
        /**
         * List of public subnets in this VPC
         */
        this.publicSubnets = [];
        /**
         * List of private subnets in this VPC
         */
        this.privateSubnets = [];
        /**
         * List of isolated subnets in this VPC
         */
        this.isolatedSubnets = [];
        /**
         * Mapping of NatGateway by AZ
         */
        this.natGatewayByAZ = {};
        /**
         * Subnet configurations for this VPC
         */
        this.subnetConfiguration = [];
        // Can't have enabledDnsHostnames without enableDnsSupport
        if (props.enableDnsHostnames && !props.enableDnsSupport) {
            throw new Error('To use DNS Hostnames, DNS Support must be enabled, however, it was explicitly disabled.');
        }
        const cidrBlock = ifUndefined(props.cidr, VpcNetwork.DEFAULT_CIDR_RANGE);
        this.networkBuilder = new network_util_1.NetworkBuilder(cidrBlock);
        const enableDnsHostnames = props.enableDnsHostnames == null ? true : props.enableDnsHostnames;
        const enableDnsSupport = props.enableDnsSupport == null ? true : props.enableDnsSupport;
        const instanceTenancy = props.defaultInstanceTenancy || 'default';
        // Define a VPC using the provided CIDR range
        this.resource = new ec2_generated_2.CfnVPC(this, 'Resource', {
            cidrBlock,
            enableDnsHostnames,
            enableDnsSupport,
            instanceTenancy,
        });
        this.node.apply(new cdk.Tag(NAME_TAG, this.node.path));
        this.availabilityZones = new cdk.AvailabilityZoneProvider(this).availabilityZones;
        this.availabilityZones.sort();
        const maxAZs = props.maxAZs !== undefined ? props.maxAZs : 3;
        this.availabilityZones = this.availabilityZones.slice(0, maxAZs);
        this.vpcId = this.resource.vpcId;
        this.subnetConfiguration = ifUndefined(props.subnetConfiguration, VpcNetwork.DEFAULT_SUBNETS);
        // subnetConfiguration and natGateways must be set before calling createSubnets
        this.createSubnets();
        const allowOutbound = this.subnetConfiguration.filter(subnet => (subnet.subnetType !== vpc_ref_1.SubnetType.Isolated)).length > 0;
        // Create an Internet Gateway and attach it if necessary
        if (allowOutbound) {
            const igw = new ec2_generated_1.CfnInternetGateway(this, 'IGW', {});
            this.internetDependencies.push(igw);
            const att = new ec2_generated_2.CfnVPCGatewayAttachment(this, 'VPCGW', {
                internetGatewayId: igw.ref,
                vpcId: this.resource.ref
            });
            this.publicSubnets.forEach(publicSubnet => {
                publicSubnet.addDefaultIGWRouteEntry(igw, att);
            });
            // if gateways are needed create them
            this.createNatGateways(props.natGateways, props.natGatewayPlacement);
            this.privateSubnets.forEach((privateSubnet, i) => {
                let ngwId = this.natGatewayByAZ[privateSubnet.availabilityZone];
                if (ngwId === undefined) {
                    const ngwArray = Array.from(Object.values(this.natGatewayByAZ));
                    // round robin the available NatGW since one is not in your AZ
                    ngwId = ngwArray[i % ngwArray.length];
                }
                privateSubnet.addDefaultNatRouteEntry(ngwId);
            });
        }
        if ((props.vpnConnections || props.vpnGatewayAsn) && props.vpnGateway === false) {
            throw new Error('Cannot specify `vpnConnections` or `vpnGatewayAsn` when `vpnGateway` is set to false.');
        }
        if (props.vpnGateway || props.vpnConnections || props.vpnGatewayAsn) {
            const vpnGateway = new ec2_generated_1.CfnVPNGateway(this, 'VpnGateway', {
                amazonSideAsn: props.vpnGatewayAsn,
                type: vpn_1.VpnConnectionType.IPsec1
            });
            const attachment = new ec2_generated_2.CfnVPCGatewayAttachment(this, 'VPCVPNGW', {
                vpcId: this.vpcId,
                vpnGatewayId: vpnGateway.vpnGatewayName
            });
            this.vpnGatewayId = vpnGateway.vpnGatewayName;
            // Propagate routes on route tables associated with the right subnets
            const vpnRoutePropagation = props.vpnRoutePropagation || [vpc_ref_1.SubnetType.Private];
            let subnets = [];
            if (vpnRoutePropagation.includes(vpc_ref_1.SubnetType.Public)) {
                subnets = [...subnets, ...this.publicSubnets];
            }
            if (vpnRoutePropagation.includes(vpc_ref_1.SubnetType.Private)) {
                subnets = [...subnets, ...this.privateSubnets];
            }
            if (vpnRoutePropagation.includes(vpc_ref_1.SubnetType.Isolated)) {
                subnets = [...subnets, ...this.isolatedSubnets];
            }
            const routePropagation = new ec2_generated_1.CfnVPNGatewayRoutePropagation(this, 'RoutePropagation', {
                routeTableIds: subnets.map(subnet => subnet.routeTableId),
                vpnGatewayId: this.vpnGatewayId
            });
            // The AWS::EC2::VPNGatewayRoutePropagation resource cannot use the VPN gateway
            // until it has successfully attached to the VPC.
            // See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-gatewayrouteprop.html
            routePropagation.node.addDependency(attachment);
            const vpnConnections = props.vpnConnections || {};
            for (const [connectionId, connection] of Object.entries(vpnConnections)) {
                this.addVpnConnection(connectionId, connection);
            }
        }
    }
    /**
     * @returns The IPv4 CidrBlock as returned by the VPC
     */
    get cidr() {
        return this.resource.getAtt("CidrBlock").toString();
    }
    /**
     * Import an exported VPC
     */
    static import(scope, id, props) {
        return new ImportedVpcNetwork(scope, id, props);
    }
    /**
     * Import an existing VPC from context
     */
    static importFromContext(scope, id, props) {
        return VpcNetwork.import(scope, id, new vpc_network_provider_1.VpcNetworkProvider(scope, props).vpcProps);
    }
    /**
     * Export this VPC from the stack
     */
    export() {
        const pub = new util_1.ExportSubnetGroup(this, 'PublicSubnetIDs', this.publicSubnets, vpc_ref_1.SubnetType.Public, this.availabilityZones.length);
        const priv = new util_1.ExportSubnetGroup(this, 'PrivateSubnetIDs', this.privateSubnets, vpc_ref_1.SubnetType.Private, this.availabilityZones.length);
        const iso = new util_1.ExportSubnetGroup(this, 'IsolatedSubnetIDs', this.isolatedSubnets, vpc_ref_1.SubnetType.Isolated, this.availabilityZones.length);
        return {
            vpcId: new cdk.Output(this, 'VpcId', { value: this.vpcId }).makeImportValue().toString(),
            vpnGatewayId: new cdk.Output(this, 'VpnGatewayId', { value: this.vpnGatewayId }).makeImportValue().toString(),
            availabilityZones: this.availabilityZones,
            publicSubnetIds: pub.ids,
            publicSubnetNames: pub.names,
            privateSubnetIds: priv.ids,
            privateSubnetNames: priv.names,
            isolatedSubnetIds: iso.ids,
            isolatedSubnetNames: iso.names,
        };
    }
    createNatGateways(gateways, placement) {
        const useNatGateway = this.subnetConfiguration.filter(subnet => (subnet.subnetType === vpc_ref_1.SubnetType.Private)).length > 0;
        const natCount = ifUndefined(gateways, useNatGateway ? this.availabilityZones.length : 0);
        let natSubnets;
        if (placement) {
            const subnets = this.subnets(placement);
            for (const sub of subnets) {
                if (!this.isPublicSubnet(sub)) {
                    throw new Error(`natGatewayPlacement ${placement} contains non public subnet ${sub}`);
                }
            }
            natSubnets = subnets;
        }
        else {
            natSubnets = this.publicSubnets;
        }
        natSubnets = natSubnets.slice(0, natCount);
        for (const sub of natSubnets) {
            const gateway = sub.addNatGateway();
            this.natGatewayByAZ[sub.availabilityZone] = gateway.natGatewayId;
            this.natDependencies.push(gateway);
        }
    }
    /**
     * createSubnets creates the subnets specified by the subnet configuration
     * array or creates the `DEFAULT_SUBNETS` configuration
     */
    createSubnets() {
        const remainingSpaceSubnets = [];
        // Calculate number of public/private subnets based on number of AZs
        const zones = new cdk.AvailabilityZoneProvider(this).availabilityZones;
        zones.sort();
        for (const subnet of this.subnetConfiguration) {
            if (subnet.cidrMask === undefined) {
                remainingSpaceSubnets.push(subnet);
                continue;
            }
            this.createSubnetResources(subnet, subnet.cidrMask);
        }
        const totalRemaining = remainingSpaceSubnets.length * this.availabilityZones.length;
        const cidrMaskForRemaing = this.networkBuilder.maskForRemainingSubnets(totalRemaining);
        for (const subnet of remainingSpaceSubnets) {
            this.createSubnetResources(subnet, cidrMaskForRemaing);
        }
    }
    createSubnetResources(subnetConfig, cidrMask) {
        this.availabilityZones.forEach((zone, index) => {
            const name = util_1.subnetId(subnetConfig.name, index);
            const subnetProps = {
                availabilityZone: zone,
                vpcId: this.vpcId,
                cidrBlock: this.networkBuilder.addSubnet(cidrMask),
                mapPublicIpOnLaunch: (subnetConfig.subnetType === vpc_ref_1.SubnetType.Public),
            };
            let subnet;
            switch (subnetConfig.subnetType) {
                case vpc_ref_1.SubnetType.Public:
                    const publicSubnet = new VpcPublicSubnet(this, name, subnetProps);
                    this.publicSubnets.push(publicSubnet);
                    subnet = publicSubnet;
                    break;
                case vpc_ref_1.SubnetType.Private:
                    const privateSubnet = new VpcPrivateSubnet(this, name, subnetProps);
                    this.privateSubnets.push(privateSubnet);
                    subnet = privateSubnet;
                    break;
                case vpc_ref_1.SubnetType.Isolated:
                    const isolatedSubnet = new VpcPrivateSubnet(this, name, subnetProps);
                    this.isolatedSubnets.push(isolatedSubnet);
                    subnet = isolatedSubnet;
                    break;
                default:
                    throw new Error(`Unrecognized subnet type: ${subnetConfig.subnetType}`);
            }
            // These values will be used to recover the config upon provider import
            const includeResourceTypes = [ec2_generated_2.CfnSubnet.resourceTypeName];
            subnet.node.apply(new cdk.Tag(SUBNETNAME_TAG, subnetConfig.name, { includeResourceTypes }));
            subnet.node.apply(new cdk.Tag(SUBNETTYPE_TAG, subnetTypeTagValue(subnetConfig.subnetType), { includeResourceTypes }));
        });
    }
}
/**
 * The default CIDR range used when creating VPCs.
 * This can be overridden using VpcNetworkProps when creating a VPCNetwork resource.
 * e.g. new VpcResource(this, { cidr: '192.168.0.0./16' })
 */
VpcNetwork.DEFAULT_CIDR_RANGE = '10.0.0.0/16';
/**
 * The default subnet configuration
 *
 * 1 Public and 1 Private subnet per AZ evenly split
 */
VpcNetwork.DEFAULT_SUBNETS = [
    {
        subnetType: vpc_ref_1.SubnetType.Public,
        name: util_1.DEFAULT_SUBNET_NAME[vpc_ref_1.SubnetType.Public],
    },
    {
        subnetType: vpc_ref_1.SubnetType.Private,
        name: util_1.DEFAULT_SUBNET_NAME[vpc_ref_1.SubnetType.Private],
    }
];
exports.VpcNetwork = VpcNetwork;
const SUBNETTYPE_TAG = 'aws-cdk:subnet-type';
const SUBNETNAME_TAG = 'aws-cdk:subnet-name';
function subnetTypeTagValue(type) {
    switch (type) {
        case vpc_ref_1.SubnetType.Public: return 'Public';
        case vpc_ref_1.SubnetType.Private: return 'Private';
        case vpc_ref_1.SubnetType.Isolated: return 'Isolated';
    }
}
/**
 * Represents a new VPC subnet resource
 */
class VpcSubnet extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        /**
         * Parts of this VPC subnet
         */
        this.dependencyElements = [];
        this.internetDependencies = new cdk_1.ConcreteDependable();
        this.node.apply(new cdk.Tag(NAME_TAG, this.node.path));
        this.availabilityZone = props.availabilityZone;
        const subnet = new ec2_generated_2.CfnSubnet(this, 'Subnet', {
            vpcId: props.vpcId,
            cidrBlock: props.cidrBlock,
            availabilityZone: props.availabilityZone,
            mapPublicIpOnLaunch: props.mapPublicIpOnLaunch,
        });
        this.subnetId = subnet.subnetId;
        const table = new ec2_generated_2.CfnRouteTable(this, 'RouteTable', {
            vpcId: props.vpcId,
        });
        this.routeTableId = table.ref;
        // Associate the public route table for this subnet, to this subnet
        new ec2_generated_2.CfnSubnetRouteTableAssociation(this, 'RouteTableAssociation', {
            subnetId: this.subnetId,
            routeTableId: table.ref
        });
    }
    static import(scope, id, props) {
        return new ImportedVpcSubnet(scope, id, props);
    }
    export() {
        return {
            availabilityZone: new cdk.Output(this, 'AvailabilityZone', { value: this.availabilityZone }).makeImportValue().toString(),
            subnetId: new cdk.Output(this, 'VpcSubnetId', { value: this.subnetId }).makeImportValue().toString(),
        };
    }
    get internetConnectivityEstablished() {
        return this.internetDependencies;
    }
    addDefaultRouteToNAT(natGatewayId) {
        const route = new ec2_generated_1.CfnRoute(this, `DefaultRoute`, {
            routeTableId: this.routeTableId,
            destinationCidrBlock: '0.0.0.0/0',
            natGatewayId
        });
        this.internetDependencies.add(route);
    }
    /**
     * Create a default route that points to a passed IGW, with a dependency
     * on the IGW's attachment to the VPC.
     */
    addDefaultRouteToIGW(gateway, gatewayAttachment) {
        const route = new ec2_generated_1.CfnRoute(this, `DefaultRoute`, {
            routeTableId: this.routeTableId,
            destinationCidrBlock: '0.0.0.0/0',
            gatewayId: gateway.ref
        });
        route.node.addDependency(gatewayAttachment);
        // Since the 'route' depends on the gateway attachment, just
        // depending on the route is enough.
        this.internetDependencies.add(route);
    }
}
exports.VpcSubnet = VpcSubnet;
/**
 * Represents a public VPC subnet resource
 */
class VpcPublicSubnet extends VpcSubnet {
    constructor(scope, id, props) {
        super(scope, id, props);
    }
    /**
     * Create a default route that points to a passed IGW, with a dependency
     * on the IGW's attachment to the VPC.
     */
    addDefaultIGWRouteEntry(gateway, gatewayAttachment) {
        this.addDefaultRouteToIGW(gateway, gatewayAttachment);
    }
    /**
     * Creates a new managed NAT gateway attached to this public subnet.
     * Also adds the EIP for the managed NAT.
     * @returns A ref to the the NAT Gateway ID
     */
    addNatGateway() {
        // Create a NAT Gateway in this public subnet
        const ngw = new ec2_generated_1.CfnNatGateway(this, `NATGateway`, {
            subnetId: this.subnetId,
            allocationId: new ec2_generated_1.CfnEIP(this, `EIP`, {
                domain: 'vpc'
            }).eipAllocationId,
        });
        return ngw;
    }
}
exports.VpcPublicSubnet = VpcPublicSubnet;
/**
 * Represents a private VPC subnet resource
 */
class VpcPrivateSubnet extends VpcSubnet {
    constructor(scope, id, props) {
        super(scope, id, props);
    }
    /**
     * Adds an entry to this subnets route table that points to the passed NATGatwayId
     */
    addDefaultNatRouteEntry(natGatewayId) {
        this.addDefaultRouteToNAT(natGatewayId);
    }
}
exports.VpcPrivateSubnet = VpcPrivateSubnet;
function ifUndefined(value, defaultValue) {
    return value !== undefined ? value : defaultValue;
}
class ImportedVpcNetwork extends vpc_ref_1.VpcNetworkBase {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        this.vpcId = props.vpcId;
        this.availabilityZones = props.availabilityZones;
        this.vpnGatewayId = props.vpnGatewayId;
        // tslint:disable:max-line-length
        const pub = new util_1.ImportSubnetGroup(props.publicSubnetIds, props.publicSubnetNames, vpc_ref_1.SubnetType.Public, this.availabilityZones, 'publicSubnetIds', 'publicSubnetNames');
        const priv = new util_1.ImportSubnetGroup(props.privateSubnetIds, props.privateSubnetNames, vpc_ref_1.SubnetType.Private, this.availabilityZones, 'privateSubnetIds', 'privateSubnetNames');
        const iso = new util_1.ImportSubnetGroup(props.isolatedSubnetIds, props.isolatedSubnetNames, vpc_ref_1.SubnetType.Isolated, this.availabilityZones, 'isolatedSubnetIds', 'isolatedSubnetNames');
        // tslint:enable:max-line-length
        this.publicSubnets = pub.import(this);
        this.privateSubnets = priv.import(this);
        this.isolatedSubnets = iso.import(this);
    }
    export() {
        return this.props;
    }
}
class ImportedVpcSubnet extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        this.internetConnectivityEstablished = new cdk.ConcreteDependable();
        this.subnetId = props.subnetId;
        this.availabilityZone = props.availabilityZone;
    }
    export() {
        return this.props;
    }
}
//# sourceMappingURL=data:application/json;base64,