"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_1 = require("@aws-cdk/cdk");
/**
 * Select the latest version of the indicated Windows version
 *
 * The AMI ID is selected using the values published to the SSM parameter store.
 *
 * https://aws.amazon.com/blogs/mt/query-for-the-latest-windows-ami-using-systems-manager-parameter-store/
 */
class WindowsImage {
    constructor(version) {
        this.version = version;
    }
    /**
     * Return the image to use in the given context
     */
    getImage(scope) {
        const ssmProvider = new cdk_1.SSMParameterProvider(scope, {
            parameterName: this.imageParameterName(this.version),
        });
        const ami = ssmProvider.parameterValue();
        return new MachineImage(ami, new WindowsOS());
    }
    /**
     * Construct the SSM parameter name for the given Windows image
     */
    imageParameterName(version) {
        return '/aws/service/ami-windows-latest/' + version;
    }
}
exports.WindowsImage = WindowsImage;
/**
 * Selects the latest version of Amazon Linux
 *
 * The AMI ID is selected using the values published to the SSM parameter store.
 */
class AmazonLinuxImage {
    constructor(props) {
        this.generation = (props && props.generation) || AmazonLinuxGeneration.AmazonLinux;
        this.edition = (props && props.edition) || AmazonLinuxEdition.Standard;
        this.virtualization = (props && props.virtualization) || AmazonLinuxVirt.HVM;
        this.storage = (props && props.storage) || AmazonLinuxStorage.GeneralPurpose;
    }
    /**
     * Return the image to use in the given context
     */
    getImage(scope) {
        const parts = [
            this.generation,
            'ami',
            this.edition !== AmazonLinuxEdition.Standard ? this.edition : undefined,
            this.virtualization,
            'x86_64',
            this.storage
        ].filter(x => x !== undefined); // Get rid of undefineds
        const parameterName = '/aws/service/ami-amazon-linux-latest/' + parts.join('-');
        const ssmProvider = new cdk_1.SSMParameterProvider(scope, {
            parameterName,
        });
        const ami = ssmProvider.parameterValue();
        return new MachineImage(ami, new LinuxOS());
    }
}
exports.AmazonLinuxImage = AmazonLinuxImage;
/**
 * What generation of Amazon Linux to use
 */
var AmazonLinuxGeneration;
(function (AmazonLinuxGeneration) {
    /**
     * Amazon Linux
     */
    AmazonLinuxGeneration["AmazonLinux"] = "amzn";
    /**
     * Amazon Linux 2
     */
    AmazonLinuxGeneration["AmazonLinux2"] = "amzn2";
})(AmazonLinuxGeneration = exports.AmazonLinuxGeneration || (exports.AmazonLinuxGeneration = {}));
/**
 * Amazon Linux edition
 */
var AmazonLinuxEdition;
(function (AmazonLinuxEdition) {
    /**
     * Standard edition
     */
    AmazonLinuxEdition["Standard"] = "standard";
    /**
     * Minimal edition
     */
    AmazonLinuxEdition["Minimal"] = "minimal";
})(AmazonLinuxEdition = exports.AmazonLinuxEdition || (exports.AmazonLinuxEdition = {}));
/**
 * Virtualization type for Amazon Linux
 */
var AmazonLinuxVirt;
(function (AmazonLinuxVirt) {
    /**
     * HVM virtualization (recommended)
     */
    AmazonLinuxVirt["HVM"] = "hvm";
    /**
     * PV virtualization
     */
    AmazonLinuxVirt["PV"] = "pv";
})(AmazonLinuxVirt = exports.AmazonLinuxVirt || (exports.AmazonLinuxVirt = {}));
var AmazonLinuxStorage;
(function (AmazonLinuxStorage) {
    /**
     * EBS-backed storage
     */
    AmazonLinuxStorage["EBS"] = "ebs";
    /**
     * S3-backed storage
     */
    AmazonLinuxStorage["S3"] = "ebs";
    /**
     * General Purpose-based storage (recommended)
     */
    AmazonLinuxStorage["GeneralPurpose"] = "gp2";
})(AmazonLinuxStorage = exports.AmazonLinuxStorage || (exports.AmazonLinuxStorage = {}));
/**
 * Construct a Linux machine image from an AMI map
 *
 * Linux images IDs are not published to SSM parameter store yet, so you'll have to
 * manually specify an AMI map.
 */
class GenericLinuxImage {
    constructor(amiMap) {
        this.amiMap = amiMap;
    }
    getImage(scope) {
        const region = scope.node.stack.requireRegion('AMI cannot be determined');
        const ami = region !== 'test-region' ? this.amiMap[region] : 'ami-12345';
        if (!ami) {
            throw new Error(`Unable to find AMI in AMI map: no AMI specified for region '${region}'`);
        }
        return new MachineImage(ami, new LinuxOS());
    }
}
exports.GenericLinuxImage = GenericLinuxImage;
/**
 * The Windows version to use for the WindowsImage
 */
var WindowsVersion;
(function (WindowsVersion) {
    WindowsVersion["WindowsServer2016TurksihFullBase"] = "Windows_Server-2016-Turkish-Full-Base";
    WindowsVersion["WindowsServer2016SwedishFullBase"] = "Windows_Server-2016-Swedish-Full-Base";
    WindowsVersion["WindowsServer2016SpanishFullBase"] = "Windows_Server-2016-Spanish-Full-Base";
    WindowsVersion["WindowsServer2016RussianFullBase"] = "Windows_Server-2016-Russian-Full-Base";
    WindowsVersion["WindowsServer2016PortuguesePortugalFullBase"] = "Windows_Server-2016-Portuguese_Portugal-Full-Base";
    WindowsVersion["WindowsServer2016PortugueseBrazilFullBase"] = "Windows_Server-2016-Portuguese_Brazil-Full-Base";
    WindowsVersion["WindowsServer2016PolishFullBase"] = "Windows_Server-2016-Polish-Full-Base";
    WindowsVersion["WindowsServer2016KoreanFullSQL2016Base"] = "Windows_Server-2016-Korean-Full-SQL_2016_SP1_Standard";
    WindowsVersion["WindowsServer2016KoreanFullBase"] = "Windows_Server-2016-Korean-Full-Base";
    WindowsVersion["WindowsServer2016JapaneseFullSQL2016Web"] = "Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Web";
    WindowsVersion["WindowsServer2016JapaneseFullSQL2016Standard"] = "Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Standard";
    WindowsVersion["WindowsServer2016JapaneseFullSQL2016Express"] = "Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Express";
    WindowsVersion["WindowsServer2016JapaneseFullSQL2016Enterprise"] = "Windows_Server-2016-Japanese-Full-SQL_2016_SP1_Enterprise";
    WindowsVersion["WindowsServer2016JapaneseFullBase"] = "Windows_Server-2016-Japanese-Full-Base";
    WindowsVersion["WindowsServer2016ItalianFullBase"] = "Windows_Server-2016-Italian-Full-Base";
    WindowsVersion["WindowsServer2016HungarianFullBase"] = "Windows_Server-2016-Hungarian-Full-Base";
    WindowsVersion["WindowsServer2016GermanFullBase"] = "Windows_Server-2016-German-Full-Base";
    WindowsVersion["WindowsServer2016FrenchFullBase"] = "Windows_Server-2016-French-Full-Base";
    WindowsVersion["WindowsServer2016EnglishNanoBase"] = "Windows_Server-2016-English-Nano-Base";
    WindowsVersion["WindowsServer2016EnglishFullSQL2017Web"] = "Windows_Server-2016-English-Full-SQL_2017_Web";
    WindowsVersion["WindowsServer2016EnglishFullSQL2017Standard"] = "Windows_Server-2016-English-Full-SQL_2017_Standard";
    WindowsVersion["WindowsServer2016EnglishFullSQL2017Express"] = "Windows_Server-2016-English-Full-SQL_2017_Express";
    WindowsVersion["WindowsServer2016EnglishFullSQL2017Enterprise"] = "Windows_Server-2016-English-Full-SQL_2017_Enterprise";
})(WindowsVersion = exports.WindowsVersion || (exports.WindowsVersion = {}));
/**
 * Representation of a machine to be launched
 *
 * Combines an AMI ID with an OS.
 */
class MachineImage {
    constructor(imageId, os) {
        this.imageId = imageId;
        this.os = os;
    }
}
exports.MachineImage = MachineImage;
/**
 * The OS type of a particular image
 */
var OperatingSystemType;
(function (OperatingSystemType) {
    OperatingSystemType[OperatingSystemType["Linux"] = 0] = "Linux";
    OperatingSystemType[OperatingSystemType["Windows"] = 1] = "Windows";
})(OperatingSystemType = exports.OperatingSystemType || (exports.OperatingSystemType = {}));
/**
 * Abstraction of OS features we need to be aware of
 */
class OperatingSystem {
}
exports.OperatingSystem = OperatingSystem;
/**
 * OS features specialized for Windows
 */
class WindowsOS extends OperatingSystem {
    createUserData(scripts) {
        return `<powershell>${scripts.join('\n')}</powershell>`;
    }
    get type() {
        return OperatingSystemType.Windows;
    }
}
exports.WindowsOS = WindowsOS;
/**
 * OS features specialized for Linux
 */
class LinuxOS extends OperatingSystem {
    createUserData(scripts) {
        return '#!/bin/bash\n' + scripts.join('\n');
    }
    get type() {
        return OperatingSystemType.Linux;
    }
}
exports.LinuxOS = LinuxOS;
//# sourceMappingURL=data:application/json;base64,