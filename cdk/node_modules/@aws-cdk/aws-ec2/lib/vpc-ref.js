"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_1 = require("@aws-cdk/cdk");
const util_1 = require("./util");
const vpn_1 = require("./vpn");
/**
 * The type of Subnet
 */
var SubnetType;
(function (SubnetType) {
    /**
     * Isolated Subnets do not route Outbound traffic
     *
     * This can be good for subnets with RDS or
     * Elasticache endpoints
     */
    SubnetType[SubnetType["Isolated"] = 1] = "Isolated";
    /**
     * Subnet that routes to the internet, but not vice versa.
     *
     * Instances in a private subnet can connect to the Internet, but will not
     * allow connections to be initiated from the Internet.
     *
     * Outbound traffic will be routed via a NAT Gateway. Preference being in
     * the same AZ, but if not available will use another AZ (control by
     * specifing `maxGateways` on VpcNetwork). This might be used for
     * experimental cost conscious accounts or accounts where HA outbound
     * traffic is not needed.
     */
    SubnetType[SubnetType["Private"] = 2] = "Private";
    /**
     * Subnet connected to the Internet
     *
     * Instances in a Public subnet can connect to the Internet and can be
     * connected to from the Internet as long as they are launched with public
     * IPs (controlled on the AutoScalingGroup or other constructs that launch
     * instances).
     *
     * Public subnets route outbound traffic via an Internet Gateway.
     */
    SubnetType[SubnetType["Public"] = 3] = "Public";
})(SubnetType = exports.SubnetType || (exports.SubnetType = {}));
/**
 * A new or imported VPC
 */
class VpcNetworkBase extends cdk_1.Construct {
    constructor() {
        super(...arguments);
        /**
         * Dependencies for internet connectivity
         */
        this.internetDependencies = new Array();
        /**
         * Dependencies for NAT connectivity
         */
        this.natDependencies = new Array();
    }
    /**
     * Return the subnets appropriate for the placement strategy
     */
    subnets(placement = {}) {
        if (placement.subnetsToUse !== undefined && placement.subnetName !== undefined) {
            throw new Error('At most one of subnetsToUse and subnetName can be supplied');
        }
        // Select by name
        if (placement.subnetName !== undefined) {
            const allSubnets = this.privateSubnets.concat(this.publicSubnets).concat(this.isolatedSubnets);
            const selectedSubnets = allSubnets.filter(s => util_1.subnetName(s) === placement.subnetName);
            if (selectedSubnets.length === 0) {
                throw new Error(`No subnets with name: ${placement.subnetName}`);
            }
            return selectedSubnets;
        }
        // Select by type
        if (placement.subnetsToUse === undefined) {
            return this.privateSubnets;
        }
        return {
            [SubnetType.Isolated]: this.isolatedSubnets,
            [SubnetType.Private]: this.privateSubnets,
            [SubnetType.Public]: this.publicSubnets,
        }[placement.subnetsToUse];
    }
    /**
     * Adds a new VPN connection to this VPC
     */
    addVpnConnection(id, options) {
        return new vpn_1.VpnConnection(this, id, Object.assign({ vpc: this }, options));
    }
    /**
     * Return whether the given subnet is one of this VPC's public subnets.
     *
     * The subnet must literally be one of the subnet object obtained from
     * this VPC. A subnet that merely represents the same subnet will
     * never return true.
     */
    isPublicSubnet(subnet) {
        return this.publicSubnets.indexOf(subnet) > -1;
    }
    /**
     * The region where this VPC is defined
     */
    get vpcRegion() {
        return this.node.stack.region;
    }
}
exports.VpcNetworkBase = VpcNetworkBase;
//# sourceMappingURL=data:application/json;base64,