"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("@aws-cdk/aws-ec2");
const cdk = require("@aws-cdk/cdk");
const elasticloadbalancingv2_generated_1 = require("../elasticloadbalancingv2.generated");
const util_1 = require("./util");
/**
 * Base class for both Application and Network Load Balancers
 */
class BaseLoadBalancer extends cdk.Construct {
    constructor(scope, id, baseProps, additionalProps) {
        super(scope, id);
        /**
         * Attributes set on this load balancer
         */
        this.attributes = {};
        const internetFacing = util_1.ifUndefined(baseProps.internetFacing, false);
        const subnets = baseProps.vpc.subnets(util_1.ifUndefined(baseProps.vpcPlacement, { subnetsToUse: internetFacing ? ec2.SubnetType.Public : ec2.SubnetType.Private }));
        this.vpc = baseProps.vpc;
        const resource = new elasticloadbalancingv2_generated_1.CfnLoadBalancer(this, 'Resource', Object.assign({ name: baseProps.loadBalancerName, subnets: subnets.map(s => s.subnetId), scheme: internetFacing ? 'internet-facing' : 'internal', loadBalancerAttributes: new cdk.Token(() => util_1.renderAttributes(this.attributes)) }, additionalProps));
        if (internetFacing) {
            resource.node.addDependency(...subnets.map(s => s.internetConnectivityEstablished));
        }
        if (baseProps.deletionProtection) {
            this.setAttribute('deletion_protection.enabled', 'true');
        }
        this.canonicalHostedZoneId = resource.loadBalancerCanonicalHostedZoneId;
        this.dnsName = resource.loadBalancerDnsName;
        this.fullName = resource.loadBalancerFullName;
        this.loadBalancerName = resource.loadBalancerName;
        this.loadBalancerArn = resource.ref;
    }
    /**
     * Set a non-standard attribute on the load balancer
     *
     * @see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes
     */
    setAttribute(key, value) {
        this.attributes[key] = value;
    }
    /**
     * Remove an attribute from the load balancer
     */
    removeAttribute(key) {
        this.setAttribute(key, undefined);
    }
    asAliasRecordTarget() {
        return {
            hostedZoneId: this.canonicalHostedZoneId,
            dnsName: this.dnsName
        };
    }
}
exports.BaseLoadBalancer = BaseLoadBalancer;
//# sourceMappingURL=data:application/json;base64,