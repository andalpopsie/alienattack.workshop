"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const colors = require("colors/safe");
const minimatch = require("minimatch");
const contextproviders = require("../../context-providers");
const logging_1 = require("../../logging");
const renames_1 = require("../../renames");
const cdkUtil = require("../../util");
const toposort_1 = require("../util/toposort");
/**
 * Routines to get stacks from an app
 *
 * In a class because it shares some global state
 */
class AppStacks {
    constructor(props) {
        this.props = props;
        this.renames = props.renames || new renames_1.Renames({});
    }
    /**
     * List all stacks in the CX and return the selected ones
     *
     * It's an error if there are no stacks to select, or if one of the requested parameters
     * refers to a nonexistant stack.
     */
    async selectStacks(selectors, extendedSelection) {
        selectors = selectors.filter(s => s != null); // filter null/undefined
        const stacks = await this.listStacks();
        if (stacks.length === 0) {
            throw new Error('This app contains no stacks');
        }
        if (selectors.length === 0) {
            logging_1.debug('Stack name not specified, so defaulting to all available stacks: ' + listStackNames(stacks));
            return this.applyRenames(stacks);
        }
        const allStacks = new Map();
        for (const stack of stacks) {
            allStacks.set(stack.name, stack);
        }
        // For every selector argument, pick stacks from the list.
        const selectedStacks = new Map();
        for (const pattern of selectors) {
            let found = false;
            for (const stack of stacks) {
                if (minimatch(stack.name, pattern) && !selectedStacks.has(stack.name)) {
                    selectedStacks.set(stack.name, stack);
                    found = true;
                }
            }
            if (!found) {
                throw new Error(`No stack found matching '${pattern}'. Use "list" to print manifest`);
            }
        }
        switch (extendedSelection) {
            case ExtendedStackSelection.Downstream:
                includeDownstreamStacks(selectedStacks, allStacks);
                break;
            case ExtendedStackSelection.Upstream:
                includeUpstreamStacks(selectedStacks, allStacks);
                break;
        }
        // Filter original array because it is in the right order
        const selectedList = stacks.filter(s => selectedStacks.has(s.name));
        // Only check selected stacks for errors
        this.processMessages(selectedList);
        return this.applyRenames(selectedList);
    }
    /**
     * Return all stacks in the CX
     *
     * If the stacks have dependencies between them, they will be returned in
     * topologically sorted order. If there are dependencies that are not in the
     * set, they will be ignored; it is the user's responsibility that the
     * non-selected stacks have already been deployed previously.
     *
     * Renames are *NOT* applied in list mode.
     */
    async listStacks() {
        const response = await this.synthesizeStacks();
        return toposort_1.topologicalSort(response.stacks, s => s.name, s => s.dependsOn || []);
    }
    /**
     * Synthesize a single stack
     */
    async synthesizeStack(stackName) {
        const resp = await this.synthesizeStacks();
        const stack = resp.stacks.find(s => s.name === stackName);
        if (!stack) {
            throw new Error(`Stack ${stackName} not found`);
        }
        return this.applyRenames([stack])[0];
    }
    /**
     * Synthesize a set of stacks
     */
    async synthesizeStacks() {
        if (this.cachedResponse) {
            return this.cachedResponse;
        }
        const trackVersions = this.props.configuration.settings.get(['versionReporting']);
        // We may need to run the cloud executable multiple times in order to satisfy all missing context
        while (true) {
            const response = await this.props.synthesizer(this.props.aws, this.props.configuration);
            const allMissing = cdkUtil.deepMerge(...response.stacks.map(s => s.missing));
            if (!cdkUtil.isEmpty(allMissing)) {
                logging_1.debug(`Some context information is missing. Fetching...`);
                await contextproviders.provideContextValues(allMissing, this.props.configuration.context, this.props.aws);
                // Cache the new context to disk
                await this.props.configuration.saveContext();
                continue;
            }
            if (trackVersions && response.runtime) {
                const modules = formatModules(response.runtime);
                for (const stack of response.stacks) {
                    if (!stack.template.Resources) {
                        stack.template.Resources = {};
                    }
                    if (!stack.template.Resources.CDKMetadata) {
                        stack.template.Resources.CDKMetadata = {
                            Type: 'AWS::CDK::Metadata',
                            Properties: {
                                Modules: modules
                            }
                        };
                    }
                    else {
                        logging_1.warning(`The stack ${stack.name} already includes a CDKMetadata resource`);
                    }
                }
            }
            // All good, return
            this.cachedResponse = response;
            return response;
            function formatModules(runtime) {
                const modules = new Array();
                // inject toolkit version to list of modules
                const toolkitVersion = require('../../../package.json').version;
                modules.push(`aws-cdk=${toolkitVersion}`);
                for (const key of Object.keys(runtime.libraries).sort()) {
                    modules.push(`${key}=${runtime.libraries[key]}`);
                }
                return modules.join(',');
            }
        }
    }
    /**
     * Extracts 'aws:cdk:warning|info|error' metadata entries from the stack synthesis
     */
    processMessages(stacks) {
        let warnings = false;
        let errors = false;
        for (const stack of stacks) {
            for (const id of Object.keys(stack.metadata)) {
                const metadata = stack.metadata[id];
                for (const entry of metadata) {
                    switch (entry.type) {
                        case cxapi.WARNING_METADATA_KEY:
                            warnings = true;
                            this.printMessage(logging_1.warning, 'Warning', id, entry);
                            break;
                        case cxapi.ERROR_METADATA_KEY:
                            errors = true;
                            this.printMessage(logging_1.error, 'Error', id, entry);
                            break;
                        case cxapi.INFO_METADATA_KEY:
                            this.printMessage(logging_1.print, 'Info', id, entry);
                            break;
                    }
                }
            }
        }
        if (errors && !this.props.ignoreErrors) {
            throw new Error('Found errors');
        }
        if (this.props.strict && warnings) {
            throw new Error('Found warnings (--strict mode)');
        }
    }
    printMessage(logFn, prefix, id, entry) {
        logFn(`[${prefix} at ${id}] ${entry.data}`);
        if (this.props.verbose) {
            logFn(`  ${entry.trace.join('\n  ')}`);
        }
    }
    applyRenames(stacks) {
        this.renames.validateSelectedStacks(stacks);
        const ret = [];
        for (const stack of stacks) {
            ret.push(Object.assign({}, stack, { originalName: stack.name, name: this.renames.finalName(stack.name) }));
        }
        return ret;
    }
}
exports.AppStacks = AppStacks;
/**
 * Combine the names of a set of stacks using a comma
 */
function listStackNames(stacks) {
    return stacks.map(s => s.name).join(', ');
}
exports.listStackNames = listStackNames;
/**
 * When selecting stacks, what other stacks to include because of dependencies
 */
var ExtendedStackSelection;
(function (ExtendedStackSelection) {
    /**
     * Don't select any extra stacks
     */
    ExtendedStackSelection[ExtendedStackSelection["None"] = 0] = "None";
    /**
     * Include stacks that this stack depends on
     */
    ExtendedStackSelection[ExtendedStackSelection["Upstream"] = 1] = "Upstream";
    /**
     * Include stacks that depend on this stack
     */
    ExtendedStackSelection[ExtendedStackSelection["Downstream"] = 2] = "Downstream";
})(ExtendedStackSelection = exports.ExtendedStackSelection || (exports.ExtendedStackSelection = {}));
/**
 * Include stacks that depend on the stacks already in the set
 *
 * Modifies `selectedStacks` in-place.
 */
function includeDownstreamStacks(selectedStacks, allStacks) {
    const added = new Array();
    let madeProgress = true;
    while (madeProgress) {
        madeProgress = false;
        for (const [name, stack] of allStacks) {
            // Select this stack if it's not selected yet AND it depends on a stack that's in the selected set
            if (!selectedStacks.has(name) && (stack.dependsOn || []).some(dependencyName => selectedStacks.has(dependencyName))) {
                selectedStacks.set(name, stack);
                added.push(name);
                madeProgress = true;
            }
        }
    }
    if (added.length > 0) {
        logging_1.print('Including depending stacks: %s', colors.bold(added.join(', ')));
    }
}
/**
 * Include stacks that that stacks in the set depend on
 *
 * Modifies `selectedStacks` in-place.
 */
function includeUpstreamStacks(selectedStacks, allStacks) {
    const added = new Array();
    let madeProgress = true;
    while (madeProgress) {
        madeProgress = false;
        for (const stack of selectedStacks.values()) {
            // Select an additional stack if it's not selected yet and a dependency of a selected stack (and exists, obviously)
            for (const dependencyName of (stack.dependsOn || [])) {
                if (!selectedStacks.has(dependencyName) && allStacks.has(dependencyName)) {
                    added.push(dependencyName);
                    selectedStacks.set(dependencyName, allStacks.get(dependencyName));
                    madeProgress = true;
                }
            }
        }
    }
    if (added.length > 0) {
        logging_1.print('Including dependency stacks: %s', colors.bold(added.join(', ')));
    }
}
//# sourceMappingURL=data:application/json;base64,