"use strict";
const cxapi = require("@aws-cdk/cx-api");
const lib_1 = require("../../lib");
const stacks_1 = require("../../lib/api/cxapp/stacks");
const renames_1 = require("../../lib/renames");
const settings_1 = require("../../lib/settings");
const FIXED_RESULT = {
    version: '1',
    stacks: [
        {
            name: 'withouterrors',
            template: { resource: 'noerrorresource' },
            environment: { name: 'dev', account: '12345', region: 'here' },
            metadata: {},
        },
        {
            name: 'witherrors',
            template: { resource: 'errorresource' },
            environment: { name: 'dev', account: '12345', region: 'here' },
            metadata: {
                '/resource': [
                    {
                        type: cxapi.ERROR_METADATA_KEY,
                        data: 'this is an error',
                        trace: []
                    }
                ]
            }
        }
    ]
};
module.exports = {
    async 'do not throw when selecting stack without errors'(test) {
        // GIVEN
        const stacks = new stacks_1.AppStacks({
            configuration: new settings_1.Configuration(),
            aws: new lib_1.SDK(),
            synthesizer: async () => FIXED_RESULT,
        });
        // WHEN
        const selected = await stacks.selectStacks(['withouterrors'], stacks_1.ExtendedStackSelection.None);
        // THEN
        test.equal(selected[0].template.resource, 'noerrorresource');
        test.done();
    },
    async 'do throw when selecting stack with errors'(test) {
        // GIVEN
        const stacks = new stacks_1.AppStacks({
            configuration: new settings_1.Configuration(),
            aws: new lib_1.SDK(),
            synthesizer: async () => FIXED_RESULT,
        });
        // WHEN
        try {
            await stacks.selectStacks(['witherrors'], stacks_1.ExtendedStackSelection.None);
            test.ok(false, 'Did not get exception');
        }
        catch (e) {
            test.ok(/Found errors/.test(e.toString()), 'Wrong error');
        }
        test.done();
    },
    async 'renames get applied when stacks are selected'(test) {
        // GIVEN
        const stacks = new stacks_1.AppStacks({
            configuration: new settings_1.Configuration(),
            aws: new lib_1.SDK(),
            synthesizer: async () => FIXED_RESULT,
            renames: new renames_1.Renames({ withouterrors: 'withoutbananas' }),
        });
        // WHEN
        const synthed = await stacks.selectStacks(['withouterrors'], stacks_1.ExtendedStackSelection.None);
        // THEN
        test.equal(synthed[0].name, 'withoutbananas');
        test.equal(synthed[0].originalName, 'withouterrors');
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5zdGFja3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LnN0YWNrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEseUNBQTBDO0FBRTFDLG1DQUFnQztBQUNoQyx1REFBK0U7QUFDL0UsK0NBQTRDO0FBQzVDLGlEQUFtRDtBQUVuRCxNQUFNLFlBQVksR0FBNkI7SUFDN0MsT0FBTyxFQUFFLEdBQUc7SUFDWixNQUFNLEVBQUU7UUFDTjtZQUNFLElBQUksRUFBRSxlQUFlO1lBQ3JCLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRTtZQUN6QyxXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtZQUM5RCxRQUFRLEVBQUUsRUFBRTtTQUNiO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsWUFBWTtZQUNsQixRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFO1lBQ3ZDLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO1lBQzlELFFBQVEsRUFBRTtnQkFDUixXQUFXLEVBQUU7b0JBQ1g7d0JBQ0UsSUFBSSxFQUFFLEtBQUssQ0FBQyxrQkFBa0I7d0JBQzlCLElBQUksRUFBRSxrQkFBa0I7d0JBQ3hCLEtBQUssRUFBRSxFQUFFO3FCQUNWO2lCQUNGO2FBQ0Y7U0FDRjtLQUNGO0NBQ0YsQ0FBQztBQUVGLGlCQUFTO0lBQ1AsS0FBSyxDQUFDLGtEQUFrRCxDQUFDLElBQVU7UUFDakUsUUFBUTtRQUNSLE1BQU0sTUFBTSxHQUFHLElBQUksa0JBQVMsQ0FBQztZQUMzQixhQUFhLEVBQUUsSUFBSSx3QkFBYSxFQUFFO1lBQ2xDLEdBQUcsRUFBRSxJQUFJLFNBQUcsRUFBRTtZQUNkLFdBQVcsRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLFlBQVk7U0FDdEMsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxFQUFFLCtCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTNGLE9BQU87UUFDUCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFFN0QsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxJQUFVO1FBQzFELFFBQVE7UUFDUixNQUFNLE1BQU0sR0FBRyxJQUFJLGtCQUFTLENBQUM7WUFDM0IsYUFBYSxFQUFFLElBQUksd0JBQWEsRUFBRTtZQUNsQyxHQUFHLEVBQUUsSUFBSSxTQUFHLEVBQUU7WUFDZCxXQUFXLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxZQUFZO1NBQ3RDLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxJQUFJO1lBQ0YsTUFBTSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsK0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztTQUN6QztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxJQUFVO1FBQzdELFFBQVE7UUFDUixNQUFNLE1BQU0sR0FBRyxJQUFJLGtCQUFTLENBQUM7WUFDM0IsYUFBYSxFQUFFLElBQUksd0JBQWEsRUFBRTtZQUNsQyxHQUFHLEVBQUUsSUFBSSxTQUFHLEVBQUU7WUFDZCxXQUFXLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxZQUFZO1lBQ3JDLE9BQU8sRUFBRSxJQUFJLGlCQUFPLENBQUMsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQztTQUMxRCxDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxPQUFPLEdBQUcsTUFBTSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsZUFBZSxDQUFDLEVBQUUsK0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFMUYsT0FBTztRQUNQLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsQ0FBQztRQUVyRCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjeGFwaSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2N4LWFwaScpO1xuaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IFNESyB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgeyBBcHBTdGFja3MsIEV4dGVuZGVkU3RhY2tTZWxlY3Rpb24gfSBmcm9tICcuLi8uLi9saWIvYXBpL2N4YXBwL3N0YWNrcyc7XG5pbXBvcnQgeyBSZW5hbWVzIH0gZnJvbSAnLi4vLi4vbGliL3JlbmFtZXMnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uLy4uL2xpYi9zZXR0aW5ncyc7XG5cbmNvbnN0IEZJWEVEX1JFU1VMVDogY3hhcGkuU3ludGhlc2l6ZVJlc3BvbnNlID0ge1xuICB2ZXJzaW9uOiAnMScsXG4gIHN0YWNrczogW1xuICAgIHtcbiAgICAgIG5hbWU6ICd3aXRob3V0ZXJyb3JzJyxcbiAgICAgIHRlbXBsYXRlOiB7IHJlc291cmNlOiAnbm9lcnJvcnJlc291cmNlJyB9LFxuICAgICAgZW52aXJvbm1lbnQ6IHsgbmFtZTogJ2RldicsIGFjY291bnQ6ICcxMjM0NScsIHJlZ2lvbjogJ2hlcmUnIH0sXG4gICAgICBtZXRhZGF0YToge30sXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnd2l0aGVycm9ycycsXG4gICAgICB0ZW1wbGF0ZTogeyByZXNvdXJjZTogJ2Vycm9ycmVzb3VyY2UnIH0sXG4gICAgICBlbnZpcm9ubWVudDogeyBuYW1lOiAnZGV2JywgYWNjb3VudDogJzEyMzQ1JywgcmVnaW9uOiAnaGVyZScgfSxcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICcvcmVzb3VyY2UnOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogY3hhcGkuRVJST1JfTUVUQURBVEFfS0VZLFxuICAgICAgICAgICAgZGF0YTogJ3RoaXMgaXMgYW4gZXJyb3InLFxuICAgICAgICAgICAgdHJhY2U6IFtdXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfVxuICBdXG59O1xuXG5leHBvcnQgPSB7XG4gIGFzeW5jICdkbyBub3QgdGhyb3cgd2hlbiBzZWxlY3Rpbmcgc3RhY2sgd2l0aG91dCBlcnJvcnMnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrcyA9IG5ldyBBcHBTdGFja3Moe1xuICAgICAgY29uZmlndXJhdGlvbjogbmV3IENvbmZpZ3VyYXRpb24oKSxcbiAgICAgIGF3czogbmV3IFNESygpLFxuICAgICAgc3ludGhlc2l6ZXI6IGFzeW5jICgpID0+IEZJWEVEX1JFU1VMVCxcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBzZWxlY3RlZCA9IGF3YWl0IHN0YWNrcy5zZWxlY3RTdGFja3MoWyd3aXRob3V0ZXJyb3JzJ10sIEV4dGVuZGVkU3RhY2tTZWxlY3Rpb24uTm9uZSk7XG5cbiAgICAvLyBUSEVOXG4gICAgdGVzdC5lcXVhbChzZWxlY3RlZFswXS50ZW1wbGF0ZS5yZXNvdXJjZSwgJ25vZXJyb3JyZXNvdXJjZScpO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgYXN5bmMgJ2RvIHRocm93IHdoZW4gc2VsZWN0aW5nIHN0YWNrIHdpdGggZXJyb3JzJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFja3MgPSBuZXcgQXBwU3RhY2tzKHtcbiAgICAgIGNvbmZpZ3VyYXRpb246IG5ldyBDb25maWd1cmF0aW9uKCksXG4gICAgICBhd3M6IG5ldyBTREsoKSxcbiAgICAgIHN5bnRoZXNpemVyOiBhc3luYyAoKSA9PiBGSVhFRF9SRVNVTFQsXG4gICAgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHN0YWNrcy5zZWxlY3RTdGFja3MoWyd3aXRoZXJyb3JzJ10sIEV4dGVuZGVkU3RhY2tTZWxlY3Rpb24uTm9uZSk7XG4gICAgICB0ZXN0Lm9rKGZhbHNlLCAnRGlkIG5vdCBnZXQgZXhjZXB0aW9uJyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGVzdC5vaygvRm91bmQgZXJyb3JzLy50ZXN0KGUudG9TdHJpbmcoKSksICdXcm9uZyBlcnJvcicpO1xuICAgIH1cblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gIGFzeW5jICdyZW5hbWVzIGdldCBhcHBsaWVkIHdoZW4gc3RhY2tzIGFyZSBzZWxlY3RlZCcodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2tzID0gbmV3IEFwcFN0YWNrcyh7XG4gICAgICBjb25maWd1cmF0aW9uOiBuZXcgQ29uZmlndXJhdGlvbigpLFxuICAgICAgYXdzOiBuZXcgU0RLKCksXG4gICAgICBzeW50aGVzaXplcjogYXN5bmMgKCkgPT4gRklYRURfUkVTVUxULFxuICAgICAgcmVuYW1lczogbmV3IFJlbmFtZXMoeyB3aXRob3V0ZXJyb3JzOiAnd2l0aG91dGJhbmFuYXMnIH0pLFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHN5bnRoZWQgPSBhd2FpdCBzdGFja3Muc2VsZWN0U3RhY2tzKFsnd2l0aG91dGVycm9ycyddLCBFeHRlbmRlZFN0YWNrU2VsZWN0aW9uLk5vbmUpO1xuXG4gICAgLy8gVEhFTlxuICAgIHRlc3QuZXF1YWwoc3ludGhlZFswXS5uYW1lLCAnd2l0aG91dGJhbmFuYXMnKTtcbiAgICB0ZXN0LmVxdWFsKHN5bnRoZWRbMF0ub3JpZ2luYWxOYW1lLCAnd2l0aG91dGVycm9ycycpO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG59OyJdfQ==