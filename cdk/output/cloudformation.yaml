>>>> envname: MYAPP
>>>> providedSuffix: 
The following buckets are NOT being created because already exists:  [ 'myapp.raw', 'myapp.app' ]
>>> IMPORTING BUCKET: myapp.app
>>> IMPORTING BUCKET: myapp.raw
Resources:
  SecurityLayerMYAPPPostRegistrationFnRole8EDEE3FA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: MYAPPPostRegistrationFn_Role
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPPostRegistrationFn_Role/Resource
  SecurityLayerMYAPPPostRegistrationEE4E787E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: SecurityLayerMYAPPPostRegistrationCodeS3Bucket01653BF8
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: SecurityLayerMYAPPPostRegistrationCodeS3VersionKey7FB20BBD
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: SecurityLayerMYAPPPostRegistrationCodeS3VersionKey7FB20BBD
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SecurityLayerMYAPPPostRegistrationFnRole8EDEE3FA
          - Arn
      Runtime: nodejs8.10
      Description: This function adds an user to the Players group after confirmation
      FunctionName: MYAPPPostRegistrationFn
      MemorySize: 128
      Timeout: 60
    DependsOn:
      - SecurityLayerMYAPPPostRegistrationFnRole8EDEE3FA
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPPostRegistration/Resource
      aws:asset:path: /Users/fabisilv/Documents/Documents/aws-bootcamp/spaceinvaders/spaceinvaders.workshop/cdk/lambdas/postregistration
      aws:asset:property: Code
  SecurityLayerMYAPPSimpleUserPoolCustomResource5A2C53A7:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - SingletonLambda25e1b2cf6b7c3d33ab40194be919261176CAC5E4
          - Arn
      AppName: MYAPP
      UserPoolName: MYAPP
      PostConfirmationLambdaArn:
        Fn::GetAtt:
          - SecurityLayerMYAPPPostRegistrationEE4E787E
          - Arn
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPSimpleUserPoolCustomResource
  SecurityLayerMYAPPUserPoolPerm8D3694B2:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Ref: SecurityLayerMYAPPPostRegistrationEE4E787E
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - SecurityLayerMYAPPSimpleUserPoolCustomResource5A2C53A7
          - UserPoolArn
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPUserPoolPerm
  SecurityLayerMYAPPTriggerFunctionPolicy44F8903A:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: cognito-idp:AdminAddUserToGroup
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SecurityLayerMYAPPSimpleUserPoolCustomResource5A2C53A7
                - UserPoolArn
        Version: "2012-10-17"
      PolicyName: AllowAddUserToGroup
      Roles:
        - Ref: SecurityLayerMYAPPPostRegistrationFnRole8EDEE3FA
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPTriggerFunctionPolicy/Resource
  SecurityLayerMYAPPApp606F2E23:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Fn::GetAtt:
          - SecurityLayerMYAPPSimpleUserPoolCustomResource5A2C53A7
          - UserPoolId
      ClientName: MYAPPWebsite
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH
      GenerateSecret: false
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPApp
  SecurityLayerMYAPPIdentityPool0B5BBC0F:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId:
            Ref: SecurityLayerMYAPPApp606F2E23
          ProviderName:
            Fn::GetAtt:
              - SecurityLayerMYAPPSimpleUserPoolCustomResource5A2C53A7
              - UserPoolProviderName
          ServerSideTokenCheck: false
      IdentityPoolName: MYAPP
    DependsOn:
      - SecurityLayerMYAPPSimpleUserPoolCustomResource5A2C53A7
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPIdentityPool
  SecurityLayerMYAPPPlayersRoleC8E35B15:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud:
                  Ref: SecurityLayerMYAPPIdentityPool0B5BBC0F
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
        Version: "2012-10-17"
      RoleName: MYAPPPlayersRole
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPPlayersRole/Resource
  SecurityLayerMYAPPPlayersRoleDefaultPolicyE66108D0:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - mobileanalytics:PutEvents
              - cognito-sync:*
              - cognito-identity:*
            Effect: Allow
            Resource: "*"
          - Action: apigateway:GET
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:apigateway:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":"
                    - Ref: IngestionConsumptionLayerMYAPPAPIECC63685
                    - /prod/*/config
              - Fn::Join:
                  - ""
                  - - "arn:aws:apigateway:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":"
                    - Ref: IngestionConsumptionLayerMYAPPAPIECC63685
                    - /prod/*/session
              - Fn::Join:
                  - ""
                  - - "arn:aws:apigateway:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":"
                    - Ref: IngestionConsumptionLayerMYAPPAPIECC63685
                    - /prod/*/scoreboard
            Sid: APIGatewayGETPermissions
          - Action: execute-api:Invoke
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:execute-api:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":"
                    - Ref: IngestionConsumptionLayerMYAPPAPIECC63685
                    - /prod/GET/config
              - Fn::Join:
                  - ""
                  - - "arn:aws:execute-api:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":"
                    - Ref: IngestionConsumptionLayerMYAPPAPIECC63685
                    - /prod/GET/session
              - Fn::Join:
                  - ""
                  - - "arn:aws:execute-api:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":"
                    - Ref: IngestionConsumptionLayerMYAPPAPIECC63685
                    - /prod/GET/scoreboard
            Sid: APIGatewayEXECGETPermissions
          - Action: apigateway:POST
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:apigateway:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":"
                    - Ref: IngestionConsumptionLayerMYAPPAPIECC63685
                    - /prod/*/updatestatus
              - Fn::Join:
                  - ""
                  - - "arn:aws:apigateway:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":"
                    - Ref: IngestionConsumptionLayerMYAPPAPIECC63685
                    - /prod/*/allocate
              - Fn::Join:
                  - ""
                  - - "arn:aws:apigateway:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":"
                    - Ref: IngestionConsumptionLayerMYAPPAPIECC63685
                    - /prod/*/deallocate
            Sid: APIGatewayPOSTPermissions
          - Action: execute-api:Invoke
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:execute-api:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":"
                    - Ref: IngestionConsumptionLayerMYAPPAPIECC63685
                    - /prod/POST/updatestatus
              - Fn::Join:
                  - ""
                  - - "arn:aws:execute-api:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":"
                    - Ref: IngestionConsumptionLayerMYAPPAPIECC63685
                    - /prod/POST/allocate
              - Fn::Join:
                  - ""
                  - - "arn:aws:execute-api:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - ":"
                    - Ref: IngestionConsumptionLayerMYAPPAPIECC63685
                    - /prod/POST/deallocate
            Sid: APIGatewayEXECPOSTPermissions
        Version: "2012-10-17"
      PolicyName: SecurityLayerMYAPPPlayersRoleDefaultPolicyE66108D0
      Roles:
        - Ref: SecurityLayerMYAPPPlayersRoleC8E35B15
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPPlayersRole/DefaultPolicy/Resource
  SecurityLayerMYAPPPlayersC841061C:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId:
        Fn::GetAtt:
          - SecurityLayerMYAPPSimpleUserPoolCustomResource5A2C53A7
          - UserPoolId
      Description: Players of the game.
      GroupName: Players
      Precedence: 9999
      RoleArn:
        Fn::GetAtt:
          - SecurityLayerMYAPPPlayersRoleC8E35B15
          - Arn
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPPlayers
  SecurityLayerMYAPPManagersRole2AC10C22:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud:
                  Ref: SecurityLayerMYAPPIdentityPool0B5BBC0F
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
      RoleName: MYAPPManagersRole
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPManagersRole/Resource
  SecurityLayerMYAPPManagersRoleDefaultPolicyF562C7FC:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - mobileanalytics:PutEvents
              - cognito-sync:*
              - cognito-identity:*
            Effect: Allow
            Resource: "*"
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:GetItem
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:dynamodb:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :table/MYAPP*
            Sid: DynamoDBPermissions
          - Action:
              - ssm:GetParameters
              - ssm:GetParameter
              - ssm:DeleteParameters
              - ssm:PutParameter
              - ssm:DeleteParameter
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:ssm:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :parameter/myapp/*
            Sid: SystemsManagerPermissions
          - Action:
              - kinesis:GetShardIterator
              - kinesis:DescribeStream
              - kinesis:GetRecords
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - IngestionConsumptionLayerMYAPPInputStreamC8F1BC5F
                - Arn
            Sid: KinesisPermissions
          - Action: apigateway:*
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:apigateway:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":"
                  - Ref: IngestionConsumptionLayerMYAPPAPIECC63685
                  - /prod/*/*
            Sid: APIGatewayPermissions
        Version: "2012-10-17"
      PolicyName: SecurityLayerMYAPPManagersRoleDefaultPolicyF562C7FC
      Roles:
        - Ref: SecurityLayerMYAPPManagersRole2AC10C22
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPManagersRole/DefaultPolicy/Resource
  SecurityLayerMYAPPManagersC123F198:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId:
        Fn::GetAtt:
          - SecurityLayerMYAPPSimpleUserPoolCustomResource5A2C53A7
          - UserPoolId
      Description: Managers of the game.
      GroupName: Managers
      Precedence: 0
      RoleArn:
        Fn::GetAtt:
          - SecurityLayerMYAPPManagersRole2AC10C22
          - Arn
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPManagers
  SecurityLayerMYAPPUnauthRole8EA7CECE:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud:
                  Ref: SecurityLayerMYAPPIdentityPool0B5BBC0F
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
        Version: "2012-10-17"
      RoleName: MYAPPUnauthRole
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPUnauthRole/Resource
  SecurityLayerMYAPPUnauthRoleDefaultPolicy36B588EC:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - mobileanalytics:PutEvents
              - cognito-sync:*
              - cognito-identity:*
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: SecurityLayerMYAPPUnauthRoleDefaultPolicy36B588EC
      Roles:
        - Ref: SecurityLayerMYAPPUnauthRole8EA7CECE
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPUnauthRole/DefaultPolicy/Resource
  SecurityLayerMYAPPIDPRoles67CAC5F0:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: SecurityLayerMYAPPIdentityPool0B5BBC0F
      Roles:
        authenticated:
          Fn::GetAtt:
            - SecurityLayerMYAPPPlayersRoleC8E35B15
            - Arn
        unauthenticated:
          Fn::GetAtt:
            - SecurityLayerMYAPPUnauthRole8EA7CECE
            - Arn
    Metadata:
      aws:cdk:path: NRTAMYAPP/SecurityLayer/MYAPPIDPRoles
  SingletonLambda25e1b2cf6b7c3d33ab40194be9192611ServiceRoleF8BA39D0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: NRTAMYAPP/SingletonLambda25e1b2cf6b7c3d33ab40194be9192611/ServiceRole/Resource
  SingletonLambda25e1b2cf6b7c3d33ab40194be9192611ServiceRoleDefaultPolicy8E8D4C85:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - cognito-idp:DeleteUserPool
              - cognito-idp:CreateUserPool
              - cognito-idp:UpdateUserPool
              - cognito-idp:CreateUserPoolDomain
              - cognito-idp:DeleteUserPoolDomain
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: SingletonLambda25e1b2cf6b7c3d33ab40194be9192611ServiceRoleDefaultPolicy8E8D4C85
      Roles:
        - Ref: SingletonLambda25e1b2cf6b7c3d33ab40194be9192611ServiceRoleF8BA39D0
    Metadata:
      aws:cdk:path: NRTAMYAPP/SingletonLambda25e1b2cf6b7c3d33ab40194be9192611/ServiceRole/DefaultPolicy/Resource
  SingletonLambda25e1b2cf6b7c3d33ab40194be919261176CAC5E4:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: SingletonLambda25e1b2cf6b7c3d33ab40194be9192611CodeS3BucketDF6114A4
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: SingletonLambda25e1b2cf6b7c3d33ab40194be9192611CodeS3VersionKey0D249EF6
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: SingletonLambda25e1b2cf6b7c3d33ab40194be9192611CodeS3VersionKey0D249EF6
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SingletonLambda25e1b2cf6b7c3d33ab40194be9192611ServiceRoleF8BA39D0
          - Arn
      Runtime: nodejs6.10
      Description: Generates the UserPool using configuration not available on CDK
      Timeout: 300
    DependsOn:
      - SingletonLambda25e1b2cf6b7c3d33ab40194be9192611ServiceRoleDefaultPolicy8E8D4C85
      - SingletonLambda25e1b2cf6b7c3d33ab40194be9192611ServiceRoleF8BA39D0
    Metadata:
      aws:cdk:path: NRTAMYAPP/SingletonLambda25e1b2cf6b7c3d33ab40194be9192611/Resource
      aws:asset:path: /Users/fabisilv/Documents/Documents/aws-bootcamp/spaceinvaders/spaceinvaders.workshop/cdk/lambdas/simpleUserPool
      aws:asset:property: Code
  ConfigurationLayerSSMParameterMYAPPRegion692100D1:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Ref: AWS::Region
      Name: /myapp/region
    Metadata:
      aws:cdk:path: NRTAMYAPP/ConfigurationLayer/SSMParameterMYAPPRegion
  ConfigurationLayerSSMParameterMYAPPClientId3D918970:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Ref: SecurityLayerMYAPPApp606F2E23
      Name: /myapp/clientid
    Metadata:
      aws:cdk:path: NRTAMYAPP/ConfigurationLayer/SSMParameterMYAPPClientId
  ConfigurationLayerSSMParameterMYAPPUserpoolId0569302A:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Fn::GetAtt:
          - SecurityLayerMYAPPSimpleUserPoolCustomResource5A2C53A7
          - UserPoolId
      Name: /myapp/userpoolid
    Metadata:
      aws:cdk:path: NRTAMYAPP/ConfigurationLayer/SSMParameterMYAPPUserpoolId
  ConfigurationLayerSSMParameterMYAPPUserPoolURL76E355DC:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Fn::Join:
          - ""
          - - cognito-idp.
            - Ref: AWS::Region
            - .amazonaws.com/
            - Fn::GetAtt:
                - SecurityLayerMYAPPSimpleUserPoolCustomResource5A2C53A7
                - UserPoolId
      Name: /myapp/userpoolurl
    Metadata:
      aws:cdk:path: NRTAMYAPP/ConfigurationLayer/SSMParameterMYAPPUserPoolURL
  ConfigurationLayerSSMParameterMYAPPIdentityPoolId7428792E:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Ref: SecurityLayerMYAPPIdentityPool0B5BBC0F
      Name: /myapp/identitypoolid
    Metadata:
      aws:cdk:path: NRTAMYAPP/ConfigurationLayer/SSMParameterMYAPPIdentityPoolId
  StorageStorageMYAPPCDNAccessId76217007:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: MYAPPCDNAccessId
    Metadata:
      aws:cdk:path: NRTAMYAPP/StorageStorage/MYAPPCDNAccessId
  StorageStorageMYAPPAppBucketPolicyFA34A2A8:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: myapp.app
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access
                      Identity "
                    - Ref: StorageStorageMYAPPCDNAccessId76217007
            Resource: arn:aws:s3:::myapp.app/*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: NRTAMYAPP/StorageStorage/MYAPPAppBucketPolicy
  DatabaseLayerMYAPPSession2F6DFA72:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: MYAPPSession
    Metadata:
      aws:cdk:path: NRTAMYAPP/DatabaseLayer/MYAPPSession/Resource
  DatabaseLayerMYAPPSessionControlDDFD11FC:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: MYAPPSessionControl
    Metadata:
      aws:cdk:path: NRTAMYAPP/DatabaseLayer/MYAPPSessionControl/Resource
  DatabaseLayerMYAPPSessionTopX31665A5B:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: MYAPPSessionTopX
    Metadata:
      aws:cdk:path: NRTAMYAPP/DatabaseLayer/MYAPPSessionTopX/Resource
  ProcessingLayerMYAPPAllocateGamerFnRole17769B2A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Effect: Allow
                Resource:
                  Fn::GetAtt:
                    - DatabaseLayerMYAPPSessionControlDDFD11FC
                    - Arn
            Version: "2012-10-17"
          PolicyName: DynamoDBPermissions
        - PolicyDocument:
            Statement:
              - Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:ssm:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :parametersession
            Version: "2012-10-17"
          PolicyName: SystemsManagerPermissions
      RoleName: MYAPPAllocateGamerFn_Role
    Metadata:
      aws:cdk:path: NRTAMYAPP/ProcessingLayer/MYAPPAllocateGamerFn_Role/Resource
  ProcessingLayerMYAPPAllocateGamerFnA6EB55E5:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ProcessingLayerMYAPPAllocateGamerFnCodeS3BucketCD78C621
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: ProcessingLayerMYAPPAllocateGamerFnCodeS3VersionKey9DC87F76
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: ProcessingLayerMYAPPAllocateGamerFnCodeS3VersionKey9DC87F76
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - ProcessingLayerMYAPPAllocateGamerFnRole17769B2A
          - Arn
      Runtime: nodejs6.10
      Description: This function supports the allocation of gamers when the game is to start
      Environment:
        Variables:
          SESSION_CONTROL_TABLENAME:
            Ref: DatabaseLayerMYAPPSessionControlDDFD11FC
          SESSION_PARAMETER: session
      FunctionName: MYAPPAllocateGamerFn
      MemorySize: 128
      Timeout: 60
    DependsOn:
      - ProcessingLayerMYAPPAllocateGamerFnRole17769B2A
    Metadata:
      aws:cdk:path: NRTAMYAPP/ProcessingLayer/MYAPPAllocateGamerFn/Resource
      aws:asset:path: /Users/fabisilv/Documents/Documents/aws-bootcamp/spaceinvaders/spaceinvaders.workshop/cdk/lambdas/allocateGamer
      aws:asset:property: Code
  ProcessingLayerMYAPPDeallocateGamerFnRoleF660C8C0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Effect: Allow
                Resource:
                  Fn::GetAtt:
                    - DatabaseLayerMYAPPSessionControlDDFD11FC
                    - Arn
            Version: "2012-10-17"
          PolicyName: DynamoDBPermissions
        - PolicyDocument:
            Statement:
              - Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:ssm:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :parametersession
            Version: "2012-10-17"
          PolicyName: SystemsManagerPermissions
      RoleName: MYAPPDeallocateGamerFn_Role
    Metadata:
      aws:cdk:path: NRTAMYAPP/ProcessingLayer/MYAPPDeallocateGamerFn_Role/Resource
  ProcessingLayerMYAPPDeallocateGamerFn748824E9:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ProcessingLayerMYAPPDeallocateGamerFnCodeS3Bucket42319B11
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: ProcessingLayerMYAPPDeallocateGamerFnCodeS3VersionKey071C8B8D
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: ProcessingLayerMYAPPDeallocateGamerFnCodeS3VersionKey071C8B8D
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - ProcessingLayerMYAPPDeallocateGamerFnRoleF660C8C0
          - Arn
      Runtime: nodejs6.10
      Description: This function deallocates the gamer when a relevant event is identified
        (sign out, close window etc)
      Environment:
        Variables:
          SESSION_CONTROL_TABLENAME:
            Ref: DatabaseLayerMYAPPSessionControlDDFD11FC
          SESSION_PARAMETER: session
      FunctionName: MYAPPDeallocateGamerFn
      MemorySize: 128
      Timeout: 60
    DependsOn:
      - ProcessingLayerMYAPPDeallocateGamerFnRoleF660C8C0
    Metadata:
      aws:cdk:path: NRTAMYAPP/ProcessingLayer/MYAPPDeallocateGamerFn/Resource
      aws:asset:path: /Users/fabisilv/Documents/Documents/aws-bootcamp/spaceinvaders/spaceinvaders.workshop/cdk/lambdas/deallocateGamer
      aws:asset:property: Code
  ProcessingLayerMYAPPDLQ69D7F656:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: MYAPPDLQ
    Metadata:
      aws:cdk:path: NRTAMYAPP/ProcessingLayer/MYAPPDLQ/Resource
  ProcessingLayerMYAPPScoreboardFnRole3915AE6E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:Batch*
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:dynamodb:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :table/MYAPP*
            Version: "2012-10-17"
          PolicyName: DynamoDBPermissions
        - PolicyDocument:
            Statement:
              - Action:
                  - ssm:Get*
                  - ssm:Get*
                  - ssm:List*
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:ssm:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :parameter/myapp*
            Version: "2012-10-17"
          PolicyName: SystemsManagerPermissions
        - PolicyDocument:
            Statement:
              - Action: sqs:SendMessage
                Effect: Allow
                Resource:
                  Fn::GetAtt:
                    - ProcessingLayerMYAPPDLQ69D7F656
                    - Arn
            Version: "2012-10-17"
          PolicyName: SQSPermissions
        - PolicyDocument:
            Statement:
              - Action:
                  - kinesis:SubscribeToShard
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                  - kinesis:DescribeStream
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: KinesisPermissions
      RoleName: MYAPPScoreboardFn_Role
    Metadata:
      aws:cdk:path: NRTAMYAPP/ProcessingLayer/MYAPPScoreboardFn_Role/Resource
  ProcessingLayerMYAPPScoreboardFn67E7F597:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ProcessingLayerMYAPPScoreboardFnCodeS3Bucket9C18B480
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: ProcessingLayerMYAPPScoreboardFnCodeS3VersionKey5992470D
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: ProcessingLayerMYAPPScoreboardFnCodeS3VersionKey5992470D
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - ProcessingLayerMYAPPScoreboardFnRole3915AE6E
          - Arn
      Runtime: nodejs6.10
      Description: This function computes the scoreboard
      Environment:
        Variables:
          DLQ_URL:
            Ref: ProcessingLayerMYAPPDLQ69D7F656
          SESSION_PARAMETER: session
          SESSION_TABLENAME:
            Ref: DatabaseLayerMYAPPSession2F6DFA72
          SESSION_CONTROL_TABLENAME:
            Ref: DatabaseLayerMYAPPSessionControlDDFD11FC
          SESSION_TOPX_TABLENAME:
            Ref: DatabaseLayerMYAPPSessionTopX31665A5B
          TopXValue: "10"
      FunctionName: MYAPPScoreboardFn
      MemorySize: 128
      Timeout: 60
    DependsOn:
      - ProcessingLayerMYAPPScoreboardFnRole3915AE6E
    Metadata:
      aws:cdk:path: NRTAMYAPP/ProcessingLayer/MYAPPScoreboardFn/Resource
      aws:asset:path: /Users/fabisilv/Documents/Documents/aws-bootcamp/spaceinvaders/spaceinvaders.workshop/cdk/lambdas/scoreboard
      aws:asset:property: Code
  IngestionConsumptionLayerMYAPPInputStreamC8F1BC5F:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1
      Name: MYAPP_InputStream
      RetentionPeriodHours: 24
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPInputStream/Resource
  IngestionConsumptionLayerMYAPPAPIRole0837BC25:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - lambda:InvokeFunction
                  - lambda:InvokeAsync
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:lambda:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :function:MYAPP*
            Version: "2012-10-17"
          PolicyName: LambdaPermissions
        - PolicyDocument:
            Statement:
              - Action:
                  - ssm:GetParameterHistory
                  - ssm:GetParametersByPath
                  - ssm:GetParameters
                  - ssm:GetParameter
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:ssm:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :parameter/myapp/*
            Version: "2012-10-17"
          PolicyName: SSMPermissions
        - PolicyDocument:
            Statement:
              - Action: dynamodb:GetItem
                Effect: Allow
                Resource:
                  - Fn::GetAtt:
                      - DatabaseLayerMYAPPSession2F6DFA72
                      - Arn
                  - Fn::GetAtt:
                      - DatabaseLayerMYAPPSessionTopX31665A5B
                      - Arn
            Version: "2012-10-17"
          PolicyName: DynamoDBPermissions
        - PolicyDocument:
            Statement:
              - Action:
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                Effect: Allow
                Resource:
                  Fn::GetAtt:
                    - IngestionConsumptionLayerMYAPPInputStreamC8F1BC5F
                    - Arn
            Version: "2012-10-17"
          PolicyName: KinesisPermissions
      RoleName: MYAPPAPI
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIRole/Resource
  IngestionConsumptionLayerMYAPPAPIECC63685:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API supporting the application MYAPP
      Name: myapp
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPI
  IngestionConsumptionLayerMYAPPGTWResponse5DF18D1E:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseType: DEFAULT_4XX
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Toke\
          n'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      ResponseTemplates:
        application/json: '{"message":$context.error.messageString}'
    DependsOn:
      - IngestionConsumptionLayerMYAPPAPIECC63685
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPGTWResponse
  IngestionConsumptionLayerMYAPPAuthorizerBDECB093:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      Name: myappAuthorizer
      ProviderARNs:
        - Fn::GetAtt:
            - SecurityLayerMYAPPSimpleUserPoolCustomResource5A2C53A7
            - UserPoolArn
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAuthorizer
  IngestionConsumptionLayerMYAPPAPIModelScoreboardResponseModelDE6F6B61:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
      ContentType: application/json
      Description: Scoreboard response model (for /scoreboard/GET)
      Name: ScoreboardResponseModel
      Schema:
        $schema: http://json-schema.org/draft-04/schema#
        title: ScoreboardResponseModel
        type: object
        properties:
          Scoreboard:
            type: array
            items:
              $ref: "#/definitions/GamerScore"
        definitions:
          GamerScore:
            type: object
            properties:
              Name:
                type: integer
              Score:
                type: integer
              Level:
                type: integer
              Shots:
                type: integer
              Nickname:
                type: string
              Lives:
                type: integer
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIModelScoreboardResponseModel
  IngestionConsumptionLayerMYAPPAPIModelGetParametersRequest6F196264:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
      ContentType: application/json
      Description: Model to request SSM:GetParameters
      Name: GetParametersRequest
      Schema:
        $schema: http://json-schema.org/draft-04/schema#
        title: GetParametersRequest
        type: object
        properties:
          names:
            type: array
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIModelGetParametersRequest
  IngestionConsumptionLayerMYAPPAPIv1D6D68E4C:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - IngestionConsumptionLayerMYAPPAPIECC63685
          - RootResourceId
      PathPart: v1
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1
  IngestionConsumptionLayerMYAPPAPIv1configF0E018F0:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: IngestionConsumptionLayerMYAPPAPIv1D6D68E4C
      PathPart: config
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1config
  IngestionConsumptionLayerMYAPPAPIv1configGETF5837604:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: IngestionConsumptionLayerMYAPPAPIv1configF0E018F0
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
      AuthorizationType: NONE
      Integration:
        Credentials:
          Fn::GetAtt:
            - IngestionConsumptionLayerMYAPPAPIRole0837BC25
            - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: >-2
                
                                                #set($inputRoot = $input.path('$'))
                                                {
                                                    "Parameters" : [
                                                        #foreach($elem in $inputRoot.Parameters)
                                                        {
                                                            "Name" : "$elem.Name",
                                                            "Value" :  "$util.escapeJavaScript("$elem.Value").replaceAll("'",'"')"
                                                        } 
                                                        #if($foreach.hasNext),#end
                                                    #end
                                                ]
                                                }
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestParameters:
          integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
          integration.request.header.X-Amz-Target: "'AmazonSSM.GetParameters'"
        RequestTemplates:
          application/json: '{"Names" :
            ["/myapp/userpoolid","/myapp/userpoolurl","/myapp/clientid","/myapp/identitypoolid"]}'
        Type: AWS
        Uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - :ssm:path//
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
      RequestModels:
        application/json:
          Ref: IngestionConsumptionLayerMYAPPAPIModelGetParametersRequest6F196264
      RequestParameters:
        method.request.header.Content-Type: true
        method.request.header.X-Amz-Target: true
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1configGET
  IngestionConsumptionLayerMYAPPAPIv1configOPTIONS8B734AD5:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: IngestionConsumptionLayerMYAPPAPIv1configF0E018F0
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Securit\
                y-Token'"
            StatusCode: "200"
        PassthroughBehavior: when_no_match
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1configOPTIONS
  IngestionConsumptionLayerMYAPPAPIv1allocate9B95CAE7:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: IngestionConsumptionLayerMYAPPAPIv1D6D68E4C
      PathPart: allocate
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1allocate
  IngestionConsumptionLayerMYAPPAPIv1allocatePOSTDD7CC880:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: IngestionConsumptionLayerMYAPPAPIv1allocate9B95CAE7
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: IngestionConsumptionLayerMYAPPAuthorizerBDECB093
      Integration:
        Credentials:
          Fn::GetAtt:
            - IngestionConsumptionLayerMYAPPAPIRole0837BC25
            - Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - ProcessingLayerMYAPPAllocateGamerFnA6EB55E5
                  - Arn
              - /invocations
      MethodResponses:
        - StatusCode: "200"
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1allocatePOST
  IngestionConsumptionLayerMYAPPAPIv1allocateOPTIONS3EC585D0:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: IngestionConsumptionLayerMYAPPAPIv1allocate9B95CAE7
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Securit\
                y-Token'"
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1allocateOPTIONS
  IngestionConsumptionLayerMYAPPAPIv1deallocate466FEA0E:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: IngestionConsumptionLayerMYAPPAPIv1D6D68E4C
      PathPart: deallocate
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1deallocate
  IngestionConsumptionLayerMYAPPAPIv1deallocatePOST49CCDDAA:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: IngestionConsumptionLayerMYAPPAPIv1deallocate466FEA0E
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: IngestionConsumptionLayerMYAPPAuthorizerBDECB093
      Integration:
        ContentHandling: CONVERT_TO_TEXT
        Credentials:
          Fn::GetAtt:
            - IngestionConsumptionLayerMYAPPAPIRole0837BC25
            - Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - ProcessingLayerMYAPPDeallocateGamerFn748824E9
                  - Arn
              - /invocations
      MethodResponses:
        - StatusCode: "200"
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1deallocatePOST
  IngestionConsumptionLayerMYAPPAPIv1deallocateOPTIONSB1E111DE:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: IngestionConsumptionLayerMYAPPAPIv1deallocate466FEA0E
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Securit\
                y-Token'"
            StatusCode: "200"
        PassthroughBehavior: when_no_match
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1deallocateOPTIONS
  IngestionConsumptionLayerMYAPPAPIv1scoreboard629C3946:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: IngestionConsumptionLayerMYAPPAPIv1D6D68E4C
      PathPart: scoreboard
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1scoreboard
  IngestionConsumptionLayerMYAPPAPIv1scoreboardPOST62D46889:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: IngestionConsumptionLayerMYAPPAPIv1scoreboard629C3946
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: IngestionConsumptionLayerMYAPPAuthorizerBDECB093
      Integration:
        Credentials:
          Fn::GetAtt:
            - IngestionConsumptionLayerMYAPPAPIRole0837BC25
            - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: >-
                #set($scoreboard = $input.path('$.Item.TopX.L'))
                                                        { 
                                                        "Scoreboard" : [
                                                                #foreach($gamerScore in $scoreboard)
                                                                        {
                                                                            "Score" : $gamerScore.M.Score.N ,
                                                                            "Level" : $gamerScore.M.Level.N ,
                                                                            "Shots" : $gamerScore.M.Shots.N ,
                                                                            "Nickname" : "$gamerScore.M.Nickname.S" ,
                                                                            "Lives" : $gamerScore.M.Lives.N
                                                                        }#if($foreach.hasNext),#end
                                                                
                                                                #end
                                                            ]
                                                        }
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestParameters:
          integration.request.querystring.sessionId: method.request.querystring.sessionId
        RequestTemplates:
          application/json:
            Fn::Join:
              - ""
              - - |-
                  {
                                          "TableName" : "
                - Ref: DatabaseLayerMYAPPSessionTopX31665A5B
                - >-
                  ",
                                          "Key" : {
                                              "SessionId" : {
                                                  "S" : "$input.params('sessionId')"
                                              }
                                          }
                                      }
        Type: AWS
        Uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - :dynamodb:action/GetItem
      MethodResponses:
        - ResponseModels:
            application/json:
              Ref: IngestionConsumptionLayerMYAPPAPIModelScoreboardResponseModelDE6F6B61
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
      RequestParameters:
        method.request.querystring.sessionId: true
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1scoreboardPOST
  IngestionConsumptionLayerMYAPPAPIv1scoreboardOPTIONS94801D0E:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: IngestionConsumptionLayerMYAPPAPIv1scoreboard629C3946
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Securit\
                y-Token'"
            StatusCode: "200"
        PassthroughBehavior: when_no_match
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1scoreboardOPTIONS
  IngestionConsumptionLayerMYAPPAPIv1updatestatus1F47A77D:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: IngestionConsumptionLayerMYAPPAPIv1D6D68E4C
      PathPart: updatestatus
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1updatestatus
  IngestionConsumptionLayerMYAPPAPIv1updatestatusPOSTCABBDCA0:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: IngestionConsumptionLayerMYAPPAPIv1updatestatus1F47A77D
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: IngestionConsumptionLayerMYAPPAuthorizerBDECB093
      Integration:
        Credentials:
          Fn::GetAtt:
            - IngestionConsumptionLayerMYAPPAPIRole0837BC25
            - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: "200"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json:
            Fn::Join:
              - ""
              - - >-
                  #set($inputRoot = $input.path('$'))
                                          {
                                              "Data" : "$util.base64Encode("$input.json('$')")",
                                              "PartitionKey" : $input.json('$.SessionId'),
                                              "StreamName" : "
                - Ref: IngestionConsumptionLayerMYAPPInputStreamC8F1BC5F
                - |-
                  "
                                          }
        Type: AWS
        Uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - :kinesis:action/PutRecord
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
      RequestParameters:
        method.request.header.Authentication: true
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1updatestatusPOST
  IngestionConsumptionLayerMYAPPAPIv1updateStatusOPTIONSD8531113:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: IngestionConsumptionLayerMYAPPAPIv1updatestatus1F47A77D
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Securit\
                y-Token'"
            StatusCode: "200"
        PassthroughBehavior: when_no_match
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          StatusCode: "200"
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIv1updateStatusOPTIONS
  IngestionConsumptionLayerMYAPPAPIDeployment6D5E1BD0:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: IngestionConsumptionLayerMYAPPAPIECC63685
      Description: Production deployment
      StageName: prod
    DependsOn:
      - IngestionConsumptionLayerMYAPPAPIv1allocateOPTIONS3EC585D0
      - IngestionConsumptionLayerMYAPPAPIv1allocatePOSTDD7CC880
      - IngestionConsumptionLayerMYAPPAPIv1configGETF5837604
      - IngestionConsumptionLayerMYAPPAPIv1configOPTIONS8B734AD5
      - IngestionConsumptionLayerMYAPPAPIv1deallocateOPTIONSB1E111DE
      - IngestionConsumptionLayerMYAPPAPIv1deallocatePOST49CCDDAA
      - IngestionConsumptionLayerMYAPPAPIv1scoreboardOPTIONS94801D0E
      - IngestionConsumptionLayerMYAPPAPIv1scoreboardPOST62D46889
      - IngestionConsumptionLayerMYAPPAPIv1updateStatusOPTIONSD8531113
      - IngestionConsumptionLayerMYAPPAPIv1updatestatusPOSTCABBDCA0
    Metadata:
      aws:cdk:path: NRTAMYAPP/IngestionConsumptionLayer/MYAPPAPIDeployment
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=0.22.0,@aws-cdk/assets=0.25.2,@aws-cdk/aws-apigateway=0.25.2,@aws-cdk/aws-applicationautoscaling=0.25.2,@aws-cdk/aws-autoscaling-common=0.25.2,@aws-cdk/aws-cloudformation=0.25.2,@aws-cdk/aws-cloudfront=0.25.2,@aws-cdk/aws-cloudwatch=0.25.2,@aws-cdk/aws-codepipeline-api=0.25.2,@aws-cdk/aws-cognito=0.25.2,@aws-cdk/aws-dynamodb=0.25.2,@aws-cdk/aws-ec2=0.25.2,@aws-cdk/aws-events=0.25.2,@aws-cdk/aws-iam=0.25.2,@aws-cdk/aws-kinesis=0.25.2,@aws-cdk/aws-kms=0.25.2,@aws-cdk/aws-lambda=0.25.2,@aws-cdk/aws-logs=0.25.2,@aws-cdk/aws-s3=0.25.2,@aws-cdk/aws-s3-notifications=0.25.2,@aws-cdk/aws-sqs=0.25.2,@aws-cdk/aws-ssm=0.25.2,@aws-cdk/cdk=0.25.2,@aws-cdk/cx-api=0.25.2,jsii-runtime=node.js/v11.6.0
Parameters:
  SecurityLayerMYAPPPostRegistrationCodeS3Bucket01653BF8:
    Type: String
    Description: S3 bucket for asset "NRTAMYAPP/SecurityLayer/MYAPPPostRegistration/Code"
  SecurityLayerMYAPPPostRegistrationCodeS3VersionKey7FB20BBD:
    Type: String
    Description: S3 key for asset version
      "NRTAMYAPP/SecurityLayer/MYAPPPostRegistration/Code"
  SingletonLambda25e1b2cf6b7c3d33ab40194be9192611CodeS3BucketDF6114A4:
    Type: String
    Description: S3 bucket for asset
      "NRTAMYAPP/SingletonLambda25e1b2cf6b7c3d33ab40194be9192611/Code"
  SingletonLambda25e1b2cf6b7c3d33ab40194be9192611CodeS3VersionKey0D249EF6:
    Type: String
    Description: S3 key for asset version
      "NRTAMYAPP/SingletonLambda25e1b2cf6b7c3d33ab40194be9192611/Code"
  ProcessingLayerMYAPPAllocateGamerFnCodeS3BucketCD78C621:
    Type: String
    Description: S3 bucket for asset "NRTAMYAPP/ProcessingLayer/MYAPPAllocateGamerFn/Code"
  ProcessingLayerMYAPPAllocateGamerFnCodeS3VersionKey9DC87F76:
    Type: String
    Description: S3 key for asset version
      "NRTAMYAPP/ProcessingLayer/MYAPPAllocateGamerFn/Code"
  ProcessingLayerMYAPPDeallocateGamerFnCodeS3Bucket42319B11:
    Type: String
    Description: S3 bucket for asset "NRTAMYAPP/ProcessingLayer/MYAPPDeallocateGamerFn/Code"
  ProcessingLayerMYAPPDeallocateGamerFnCodeS3VersionKey071C8B8D:
    Type: String
    Description: S3 key for asset version
      "NRTAMYAPP/ProcessingLayer/MYAPPDeallocateGamerFn/Code"
  ProcessingLayerMYAPPScoreboardFnCodeS3Bucket9C18B480:
    Type: String
    Description: S3 bucket for asset "NRTAMYAPP/ProcessingLayer/MYAPPScoreboardFn/Code"
  ProcessingLayerMYAPPScoreboardFnCodeS3VersionKey5992470D:
    Type: String
    Description: S3 key for asset version "NRTAMYAPP/ProcessingLayer/MYAPPScoreboardFn/Code"

